
lab4demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800100  00006c06  00006c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fc  008003b0  008003b0  00006f4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00006fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032e3  00000000  00000000  000070ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003cf  00000000  00000000  0000a391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c3  00000000  00000000  0000a760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a2c  00000000  00000000  0000af24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c2  00000000  00000000  0000b950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003d88  00000000  00000000  0000c312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0001009a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__ctors_end>
       4:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
       8:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
       c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      10:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__vector_4>
      14:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_5>
      18:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__vector_6>
      1c:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_7>
      20:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      24:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_9>
      28:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_10>
      2c:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_11>
      30:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_12>
      34:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_13>
      38:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_14>
      3c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_15>
      40:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_16>
      44:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_17>
      48:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__vector_18>
      4c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      50:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      54:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      58:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      5c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      60:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      64:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      68:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      6c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      70:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      74:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      78:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__bad_interrupt>
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 05       	cpc	r19, r15
      aa:	a8 4c       	sbci	r26, 0xC8	; 200
      ac:	cd b2       	in	r12, 0x1d	; 29
      ae:	d4 4e       	sbci	r29, 0xE4	; 228
      b0:	b9 38       	cpi	r27, 0x89	; 137
      b2:	36 a9       	ldd	r19, Z+54	; 0x36
      b4:	02 0c       	add	r0, r2
      b6:	50 b9       	out	0x00, r21	; 0
      b8:	91 86       	std	Z+9, r9	; 0x09
      ba:	88 08       	sbc	r8, r8
      bc:	3c a6       	std	Y+44, r3	; 0x2c
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	2a be       	out	0x3a, r2	; 58
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	3f 00       	.word	0x003f	; ????
      c8:	8d 09       	sbc	r24, r13
      ca:	90 09       	sbc	r25, r0
      cc:	93 09       	sbc	r25, r3
      ce:	96 09       	sbc	r25, r6
      d0:	9f 09       	sbc	r25, r15
      d2:	99 09       	sbc	r25, r9
      d4:	9c 09       	sbc	r25, r12
      d6:	a2 09       	sbc	r26, r2
      d8:	a5 09       	sbc	r26, r5
      da:	a8 09       	sbc	r26, r8
      dc:	ab 09       	sbc	r26, r11
      de:	ae 09       	sbc	r26, r14
      e0:	b1 09       	sbc	r27, r1
      e2:	b4 09       	sbc	r27, r4
      e4:	b7 09       	sbc	r27, r7
      e6:	ba 09       	sbc	r27, r10
      e8:	bd 09       	sbc	r27, r13
      ea:	c0 09       	sbc	r28, r0
      ec:	c3 09       	sbc	r28, r3
      ee:	d4 09       	sbc	r29, r4
      f0:	d7 09       	sbc	r29, r7
      f2:	da 09       	sbc	r29, r10
      f4:	dd 09       	sbc	r29, r13
      f6:	e6 09       	sbc	r30, r6
      f8:	e0 09       	sbc	r30, r0
      fa:	e3 09       	sbc	r30, r3
      fc:	e9 09       	sbc	r30, r9
      fe:	ec 09       	sbc	r30, r12
     100:	ef 09       	sbc	r30, r15
     102:	f2 09       	sbc	r31, r2
     104:	f5 09       	sbc	r31, r5
     106:	f8 09       	sbc	r31, r8
     108:	fb 09       	sbc	r31, r11
     10a:	fe 09       	sbc	r31, r14
     10c:	01 0a       	sbc	r0, r17
     10e:	04 0a       	sbc	r0, r20
     110:	07 0a       	sbc	r0, r23
     112:	0a 0a       	sbc	r0, r26
     114:	07 63       	ori	r16, 0x37	; 55
     116:	42 36       	cpi	r20, 0x62	; 98
     118:	b7 9b       	sbis	0x16, 7	; 22
     11a:	d8 a7       	std	Y+40, r29	; 0x28
     11c:	1a 39       	cpi	r17, 0x9A	; 154
     11e:	68 56       	subi	r22, 0x68	; 104
     120:	18 ae       	std	Y+56, r1	; 0x38
     122:	ba ab       	std	Y+50, r27	; 0x32
     124:	55 8c       	ldd	r5, Z+29	; 0x1d
     126:	1d 3c       	cpi	r17, 0xCD	; 205
     128:	b7 cc       	rjmp	.-1682   	; 0xfffffa98 <__eeprom_end+0xff7efa98>
     12a:	57 63       	ori	r21, 0x37	; 55
     12c:	bd 6d       	ori	r27, 0xDD	; 221
     12e:	ed fd       	.word	0xfded	; ????
     130:	75 3e       	cpi	r23, 0xE5	; 229
     132:	f6 17       	cp	r31, r22
     134:	72 31       	cpi	r23, 0x12	; 18
     136:	bf 00       	.word	0x00bf	; ????
     138:	00 00       	nop
     13a:	80 3f       	cpi	r24, 0xF0	; 240
     13c:	08 00       	.word	0x0008	; ????
     13e:	00 00       	nop
     140:	be 92       	st	-X, r11
     142:	24 49       	sbci	r18, 0x94	; 148
     144:	12 3e       	cpi	r17, 0xE2	; 226
     146:	ab aa       	std	Y+51, r10	; 0x33
     148:	aa 2a       	or	r10, r26
     14a:	be cd       	rjmp	.-1156   	; 0xfffffcc8 <__eeprom_end+0xff7efcc8>
     14c:	cc cc       	rjmp	.-1640   	; 0xfffffae6 <__eeprom_end+0xff7efae6>
     14e:	4c 3e       	cpi	r20, 0xEC	; 236
     150:	00 00       	nop
     152:	00 80       	ld	r0, Z
     154:	be ab       	std	Y+54, r27	; 0x36
     156:	aa aa       	std	Y+50, r10	; 0x32
     158:	aa 3e       	cpi	r26, 0xEA	; 234
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	bf 00       	.word	0x00bf	; ????
     160:	00 00       	nop
     162:	80 3f       	cpi	r24, 0xF0	; 240
     164:	00 00       	nop
     166:	00 00       	nop
     168:	00 08       	sbc	r0, r0
     16a:	41 78       	andi	r20, 0x81	; 129
     16c:	d3 bb       	out	0x13, r29	; 19
     16e:	43 87       	std	Z+11, r20	; 0x0b
     170:	d1 13       	cpse	r29, r17
     172:	3d 19       	sub	r19, r13
     174:	0e 3c       	cpi	r16, 0xCE	; 206
     176:	c3 bd       	out	0x23, r28	; 35
     178:	42 82       	std	Z+2, r4	; 0x02
     17a:	ad 2b       	or	r26, r29
     17c:	3e 68       	ori	r19, 0x8E	; 142
     17e:	ec 82       	std	Y+4, r14	; 0x04
     180:	76 be       	out	0x36, r7	; 54
     182:	d9 8f       	std	Y+25, r29	; 0x19
     184:	e1 a9       	ldd	r30, Z+49	; 0x31
     186:	3e 4c       	sbci	r19, 0xCE	; 206
     188:	80 ef       	ldi	r24, 0xF0	; 240
     18a:	ff be       	out	0x3f, r15	; 63
     18c:	01 c4       	rjmp	.+2050   	; 0x990 <LCD_set_PGC_addr+0x2c>
     18e:	ff 7f       	andi	r31, 0xFF	; 255
     190:	3f 00       	.word	0x003f	; ????
     192:	00 00       	nop
	...

00000196 <__trampolines_end>:
     196:	16 05       	cpc	r17, r6
     198:	01 00       	.word	0x0001	; ????
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	00 00       	nop
     1a0:	fa 00       	.word	0x00fa	; ????
     1a2:	00 00       	nop
     1a4:	e0 00       	.word	0x00e0	; ????
     1a6:	e0 00       	.word	0x00e0	; ????
     1a8:	28 fe       	.word	0xfe28	; ????
     1aa:	28 fe       	.word	0xfe28	; ????
     1ac:	28 24       	eor	r2, r8
     1ae:	54 fe       	sbrs	r5, 4
     1b0:	54 48       	sbci	r21, 0x84	; 132
     1b2:	c4 c8       	rjmp	.-3704   	; 0xfffff33c <__eeprom_end+0xff7ef33c>
     1b4:	10 26       	eor	r1, r16
     1b6:	46 6c       	ori	r20, 0xC6	; 198
     1b8:	92 aa       	std	Z+50, r9	; 0x32
     1ba:	44 a0       	ldd	r4, Z+36	; 0x24
     1bc:	00 a0       	ldd	r0, Z+32	; 0x20
     1be:	c0 00       	.word	0x00c0	; ????
     1c0:	00 00       	nop
     1c2:	38 44       	sbci	r19, 0x48	; 72
     1c4:	82 00       	.word	0x0082	; ????
     1c6:	00 82       	st	Z, r0
     1c8:	44 38       	cpi	r20, 0x84	; 132
     1ca:	00 28       	or	r0, r0
     1cc:	10 7c       	andi	r17, 0xC0	; 192
     1ce:	10 28       	or	r1, r0
     1d0:	10 10       	cpse	r1, r0
     1d2:	7c 10       	cpse	r7, r12
     1d4:	10 00       	.word	0x0010	; ????
     1d6:	0a 0c       	add	r0, r10
     1d8:	00 00       	nop
     1da:	10 10       	cpse	r1, r0
     1dc:	10 10       	cpse	r1, r0
     1de:	10 00       	.word	0x0010	; ????
     1e0:	06 06       	cpc	r0, r22
     1e2:	00 00       	nop
     1e4:	04 08       	sbc	r0, r4
     1e6:	10 20       	and	r1, r0
     1e8:	40 7c       	andi	r20, 0xC0	; 192
     1ea:	8a 92       	st	-Y, r8
     1ec:	a2 7c       	andi	r26, 0xC2	; 194
     1ee:	00 42       	sbci	r16, 0x20	; 32
     1f0:	fe 02       	muls	r31, r30
     1f2:	00 42       	sbci	r16, 0x20	; 32
     1f4:	86 8a       	std	Z+22, r8	; 0x16
     1f6:	92 62       	ori	r25, 0x22	; 34
     1f8:	84 82       	std	Z+4, r8	; 0x04
     1fa:	a2 d2       	rcall	.+1348   	; 0x740 <ADC_sample+0x38>
     1fc:	8c 18       	sub	r8, r12
     1fe:	28 48       	sbci	r18, 0x88	; 136
     200:	fe 08       	sbc	r15, r14
     202:	e4 a2       	std	Z+36, r14	; 0x24
     204:	a2 a2       	std	Z+34, r10	; 0x22
     206:	9c 3c       	cpi	r25, 0xCC	; 204
     208:	52 92       	st	-Z, r5
     20a:	92 0c       	add	r9, r2
     20c:	80 8e       	std	Z+24, r8	; 0x18
     20e:	90 a0       	ldd	r9, Z+32	; 0x20
     210:	c0 6c       	ori	r28, 0xC0	; 192
     212:	92 92       	st	-Z, r9
     214:	92 6c       	ori	r25, 0xC2	; 194
     216:	60 92 92 94 	sts	0x9492, r6
     21a:	78 00       	.word	0x0078	; ????
     21c:	6c 6c       	ori	r22, 0xCC	; 204
     21e:	00 00       	nop
     220:	00 6a       	ori	r16, 0xA0	; 160
     222:	6c 00       	.word	0x006c	; ????
     224:	00 10       	cpse	r0, r0
     226:	28 44       	sbci	r18, 0x48	; 72
     228:	82 00       	.word	0x0082	; ????
     22a:	28 28       	or	r2, r8
     22c:	28 28       	or	r2, r8
     22e:	28 00       	.word	0x0028	; ????
     230:	82 44       	sbci	r24, 0x42	; 66
     232:	28 10       	cpse	r2, r8
     234:	40 80       	ld	r4, Z
     236:	8a 90       	ld	r8, -Y
     238:	60 4c       	sbci	r22, 0xC0	; 192
     23a:	92 9e       	mul	r9, r18
     23c:	82 7c       	andi	r24, 0xC2	; 194
     23e:	7e 88       	ldd	r7, Y+22	; 0x16
     240:	88 88       	ldd	r8, Y+16	; 0x10
     242:	7e fe       	.word	0xfe7e	; ????
     244:	92 92       	st	-Z, r9
     246:	92 6c       	ori	r25, 0xC2	; 194
     248:	7c 82       	std	Y+4, r7	; 0x04
     24a:	82 82       	std	Z+2, r8	; 0x02
     24c:	44 fe       	sbrs	r4, 4
     24e:	82 82       	std	Z+2, r8	; 0x02
     250:	44 38       	cpi	r20, 0x84	; 132
     252:	fe 92       	st	-X, r15
     254:	92 92       	st	-Z, r9
     256:	82 fe       	sbrs	r8, 2
     258:	90 90 90 80 	lds	r9, 0x8090
     25c:	7c 82       	std	Y+4, r7	; 0x04
     25e:	92 92       	st	-Z, r9
     260:	5e fe       	.word	0xfe5e	; ????
     262:	10 10       	cpse	r1, r0
     264:	10 fe       	sbrs	r1, 0
     266:	00 82       	st	Z, r0
     268:	fe 82       	std	Y+6, r15	; 0x06
     26a:	00 04       	cpc	r0, r0
     26c:	02 82       	std	Z+2, r0	; 0x02
     26e:	fc 80       	ldd	r15, Y+4	; 0x04
     270:	fe 10       	cpse	r15, r14
     272:	28 44       	sbci	r18, 0x48	; 72
     274:	82 fe       	sbrs	r8, 2
     276:	02 02       	muls	r16, r18
     278:	02 02       	muls	r16, r18
     27a:	fe 40       	sbci	r31, 0x0E	; 14
     27c:	30 40       	sbci	r19, 0x00	; 0
     27e:	fe fe       	.word	0xfefe	; ????
     280:	20 10       	cpse	r2, r0
     282:	08 fe       	.word	0xfe08	; ????
     284:	7c 82       	std	Y+4, r7	; 0x04
     286:	82 82       	std	Z+2, r8	; 0x02
     288:	7c fe       	.word	0xfe7c	; ????
     28a:	90 90 90 60 	lds	r9, 0x6090
     28e:	7c 82       	std	Y+4, r7	; 0x04
     290:	8a 84       	ldd	r8, Y+10	; 0x0a
     292:	7a fe       	.word	0xfe7a	; ????
     294:	90 98       	cbi	0x12, 0	; 18
     296:	94 62       	ori	r25, 0x24	; 36
     298:	62 92       	st	-Z, r6
     29a:	92 92       	st	-Z, r9
     29c:	8c 80       	ldd	r8, Y+4	; 0x04
     29e:	80 fe       	sbrs	r8, 0
     2a0:	80 80       	ld	r8, Z
     2a2:	fc 02       	muls	r31, r28
     2a4:	02 02       	muls	r16, r18
     2a6:	fc f8       	.word	0xf8fc	; ????
     2a8:	04 02       	muls	r16, r20
     2aa:	04 f8       	bld	r0, 4
     2ac:	fc 02       	muls	r31, r28
     2ae:	1c 02       	muls	r17, r28
     2b0:	fc c6       	rjmp	.+3576   	; 0x10aa <STEPPER_set_mode+0x1a>
     2b2:	28 10       	cpse	r2, r8
     2b4:	28 c6       	rjmp	.+3152   	; 0xf06 <STEPPER_move+0x10e>
     2b6:	e0 10       	cpse	r14, r0
     2b8:	0e 10       	cpse	r0, r14
     2ba:	e0 86       	std	Z+8, r14	; 0x08
     2bc:	8a 92       	st	-Y, r8
     2be:	a2 c2       	rjmp	.+1348   	; 0x804 <LCD_clear+0x2c>
     2c0:	00 fe       	sbrs	r0, 0
     2c2:	82 82       	std	Z+2, r8	; 0x02
     2c4:	00 40       	sbci	r16, 0x00	; 0
     2c6:	20 10       	cpse	r2, r0
     2c8:	08 04       	cpc	r0, r8
     2ca:	00 82       	st	Z, r0
     2cc:	82 fe       	sbrs	r8, 2
     2ce:	00 20       	and	r0, r0
     2d0:	40 80       	ld	r4, Z
     2d2:	40 20       	and	r4, r0
     2d4:	02 02       	muls	r16, r18
     2d6:	02 02       	muls	r16, r18
     2d8:	02 00       	.word	0x0002	; ????
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	20 00       	.word	0x0020	; ????
     2de:	04 2a       	or	r0, r20
     2e0:	2a 2a       	or	r2, r26
     2e2:	1e fe       	.word	0xfe1e	; ????
     2e4:	12 22       	and	r1, r18
     2e6:	22 1c       	adc	r2, r2
     2e8:	1c 22       	and	r1, r28
     2ea:	22 22       	and	r2, r18
     2ec:	04 1c       	adc	r0, r4
     2ee:	22 22       	and	r2, r18
     2f0:	12 fe       	sbrs	r1, 2
     2f2:	1c 2a       	or	r1, r28
     2f4:	2a 2a       	or	r2, r26
     2f6:	18 10       	cpse	r1, r8
     2f8:	7e 90       	ld	r7, -X
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	30 4a       	sbci	r19, 0xA0	; 160
     2fe:	4a 4a       	sbci	r20, 0xAA	; 170
     300:	7c fe       	.word	0xfe7c	; ????
     302:	10 20       	and	r1, r0
     304:	20 1e       	adc	r2, r16
     306:	00 22       	and	r0, r16
     308:	be 02       	muls	r27, r30
     30a:	00 04       	cpc	r0, r0
     30c:	02 22       	and	r0, r18
     30e:	bc 00       	.word	0x00bc	; ????
     310:	fe 08       	sbc	r15, r14
     312:	14 22       	and	r1, r20
     314:	00 00       	nop
     316:	82 fe       	sbrs	r8, 2
     318:	02 00       	.word	0x0002	; ????
     31a:	3e 20       	and	r3, r14
     31c:	18 20       	and	r1, r8
     31e:	1e 3e       	cpi	r17, 0xEE	; 238
     320:	10 20       	and	r1, r0
     322:	20 1e       	adc	r2, r16
     324:	1c 22       	and	r1, r28
     326:	22 22       	and	r2, r18
     328:	1c 3e       	cpi	r17, 0xEC	; 236
     32a:	28 28       	or	r2, r8
     32c:	28 10       	cpse	r2, r8
     32e:	10 28       	or	r1, r0
     330:	28 18       	sub	r2, r8
     332:	3e 3e       	cpi	r19, 0xEE	; 238
     334:	10 20       	and	r1, r0
     336:	20 10       	cpse	r2, r0
     338:	12 2a       	or	r1, r18
     33a:	2a 2a       	or	r2, r26
     33c:	04 20       	and	r0, r4
     33e:	fc 22       	and	r15, r28
     340:	02 04       	cpc	r0, r2
     342:	3c 02       	muls	r19, r28
     344:	02 04       	cpc	r0, r2
     346:	3e 38       	cpi	r19, 0x8E	; 142
     348:	04 02       	muls	r16, r20
     34a:	04 38       	cpi	r16, 0x84	; 132
     34c:	3c 02       	muls	r19, r28
     34e:	0c 02       	muls	r16, r28
     350:	3c 22       	and	r3, r28
     352:	14 08       	sbc	r1, r4
     354:	14 22       	and	r1, r20
     356:	30 0a       	sbc	r3, r16
     358:	0a 0a       	sbc	r0, r26
     35a:	3c 22       	and	r3, r28
     35c:	26 2a       	or	r2, r22
     35e:	32 22       	and	r3, r18
     360:	00 10       	cpse	r0, r0
     362:	6c 82       	std	Y+4, r6	; 0x04
     364:	00 00       	nop
     366:	00 fe       	sbrs	r0, 0
     368:	00 00       	nop
     36a:	00 82       	st	Z, r0
     36c:	6c 10       	cpse	r6, r12
     36e:	00 08       	sbc	r0, r0
     370:	10 10       	cpse	r1, r0
     372:	08 10       	cpse	r0, r8
     374:	00 00       	nop
     376:	00 00       	nop
     378:	00 7f       	andi	r16, 0xF0	; 240
     37a:	81 81       	ldd	r24, Z+1	; 0x01
     37c:	81 7f       	andi	r24, 0xF1	; 241
     37e:	7f 83       	std	Y+7, r23	; 0x07
     380:	83 83       	std	Z+3, r24	; 0x03
     382:	7f 7f       	andi	r23, 0xFF	; 255
     384:	87 87       	std	Z+15, r24	; 0x0f
     386:	87 7f       	andi	r24, 0xF7	; 247
     388:	7f 8f       	std	Y+31, r23	; 0x1f
     38a:	8f 8f       	std	Y+31, r24	; 0x1f
     38c:	7f 7f       	andi	r23, 0xFF	; 255
     38e:	9f 9f       	mul	r25, r31
     390:	9f 7f       	andi	r25, 0xFF	; 255
     392:	7f bf       	out	0x3f, r23	; 63
     394:	bf bf       	out	0x3f, r27	; 63
     396:	7f 7f       	andi	r23, 0xFF	; 255
     398:	ff ff       	.word	0xffff	; ????
     39a:	ff 7f       	andi	r31, 0xFF	; 255
     39c:	20 40       	sbci	r18, 0x00	; 0
     39e:	ff 40       	sbci	r31, 0x0F	; 15
     3a0:	20 62       	ori	r18, 0x20	; 32
     3a2:	15 17       	cp	r17, r21
     3a4:	15 65       	ori	r17, 0x55	; 85
     3a6:	00 fb       	bst	r16, 0
     3a8:	fb 00       	.word	0x00fb	; ????
	...

000003ab <CEENBoT_Inc_logo_bitmap>:
     3ab:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     3bb:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     3cb:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     3db:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     3eb:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3fb:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     40b:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     41b:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     42b:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     43b:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     44b:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     45b:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     46b:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     47b:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     48b:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     49b:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     4ab:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     4c3:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     4d3:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     4e3:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4f3:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     503:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     513:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     523:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     533:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     543:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     553:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     563:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     573:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     583:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     593:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     5a3:	00 00 00 30 00 00 00 7c                             ...0...|

000005ab <__c.2161>:
     5ab:	6e 61 6e 00                                         nan.

000005af <__c.2159>:
     5af:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5bf:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5cf:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5df:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5ef:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5ff:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     60f:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     61f:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     62f:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     63f:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     64f:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     65f:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     66f:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     67f:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     68f:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     69f:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000006ae <__ctors_end>:
     6ae:	11 24       	eor	r1, r1
     6b0:	1f be       	out	0x3f, r1	; 63
     6b2:	cf ef       	ldi	r28, 0xFF	; 255
     6b4:	d8 e0       	ldi	r29, 0x08	; 8
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	cd bf       	out	0x3d, r28	; 61

000006ba <__do_copy_data>:
     6ba:	13 e0       	ldi	r17, 0x03	; 3
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b1 e0       	ldi	r27, 0x01	; 1
     6c0:	e6 e0       	ldi	r30, 0x06	; 6
     6c2:	fc e6       	ldi	r31, 0x6C	; 108
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__do_copy_data+0x10>
     6c6:	05 90       	lpm	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	a0 3b       	cpi	r26, 0xB0	; 176
     6cc:	b1 07       	cpc	r27, r17
     6ce:	d9 f7       	brne	.-10     	; 0x6c6 <__do_copy_data+0xc>

000006d0 <__do_clear_bss>:
     6d0:	24 e0       	ldi	r18, 0x04	; 4
     6d2:	a0 eb       	ldi	r26, 0xB0	; 176
     6d4:	b3 e0       	ldi	r27, 0x03	; 3
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <.do_clear_bss_start>

000006d8 <.do_clear_bss_loop>:
     6d8:	1d 92       	st	X+, r1

000006da <.do_clear_bss_start>:
     6da:	ac 3a       	cpi	r26, 0xAC	; 172
     6dc:	b2 07       	cpc	r27, r18
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <.do_clear_bss_loop>
     6e0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <main>
     6e4:	0c 94 01 36 	jmp	0x6c02	; 0x6c02 <_exit>

000006e8 <__bad_interrupt>:
     6e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ec <ADC_open>:
     6ec:	8f e0       	ldi	r24, 0x0F	; 15
     6ee:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     6f2:	88 23       	and	r24, r24
     6f4:	31 f4       	brne	.+12     	; 0x702 <ADC_open+0x16>
     6f6:	0e 94 09 0b 	call	0x1612	; 0x1612 <__ADC_init>
     6fa:	8f e0       	ldi	r24, 0x0F	; 15
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	08 95       	ret

00000708 <ADC_sample>:
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	19 f0       	breq	.+6      	; 0x718 <ADC_sample+0x10>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	13 c0       	rjmp	.+38     	; 0x73e <ADC_sample+0x36>
     718:	80 91 7a 00 	lds	r24, 0x007A
     71c:	80 64       	ori	r24, 0x40	; 64
     71e:	80 93 7a 00 	sts	0x007A, r24
     722:	80 91 7a 00 	lds	r24, 0x007A
     726:	86 fd       	sbrc	r24, 6
     728:	fc cf       	rjmp	.-8      	; 0x722 <ADC_sample+0x1a>
     72a:	30 91 78 00 	lds	r19, 0x0078
     72e:	20 91 79 00 	lds	r18, 0x0079
     732:	92 2f       	mov	r25, r18
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	23 2f       	mov	r18, r19
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	28 2b       	or	r18, r24
     73c:	39 2b       	or	r19, r25
     73e:	c9 01       	movw	r24, r18
     740:	08 95       	ret

00000742 <ADC_set_channel>:
     742:	58 2f       	mov	r21, r24
     744:	80 91 00 01 	lds	r24, 0x0100
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	d8 f4       	brcc	.+54     	; 0x782 <ADC_set_channel+0x40>
     74c:	40 91 7e 00 	lds	r20, 0x007E
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	b9 01       	movw	r22, r18
     756:	02 c0       	rjmp	.+4      	; 0x75c <ADC_set_channel+0x1a>
     758:	66 0f       	add	r22, r22
     75a:	77 1f       	adc	r23, r23
     75c:	8a 95       	dec	r24
     75e:	e2 f7       	brpl	.-8      	; 0x758 <ADC_set_channel+0x16>
     760:	cb 01       	movw	r24, r22
     762:	80 95       	com	r24
     764:	84 23       	and	r24, r20
     766:	80 93 7e 00 	sts	0x007E, r24
     76a:	80 91 7e 00 	lds	r24, 0x007E
     76e:	05 2e       	mov	r0, r21
     770:	02 c0       	rjmp	.+4      	; 0x776 <ADC_set_channel+0x34>
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <ADC_set_channel+0x30>
     77a:	82 2b       	or	r24, r18
     77c:	80 93 7e 00 	sts	0x007E, r24
     780:	0d c0       	rjmp	.+26     	; 0x79c <ADC_set_channel+0x5a>
     782:	20 91 7e 00 	lds	r18, 0x007E
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	05 2e       	mov	r0, r21
     78c:	02 c0       	rjmp	.+4      	; 0x792 <ADC_set_channel+0x50>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0a 94       	dec	r0
     794:	e2 f7       	brpl	.-8      	; 0x78e <ADC_set_channel+0x4c>
     796:	28 2b       	or	r18, r24
     798:	20 93 7e 00 	sts	0x007E, r18
     79c:	50 93 00 01 	sts	0x0100, r21
     7a0:	80 91 7c 00 	lds	r24, 0x007C
     7a4:	5f 71       	andi	r21, 0x1F	; 31
     7a6:	80 7e       	andi	r24, 0xE0	; 224
     7a8:	85 2b       	or	r24, r21
     7aa:	80 93 7c 00 	sts	0x007C, r24
     7ae:	08 95       	ret

000007b0 <ADC_set_VREF>:
     7b0:	ec e7       	ldi	r30, 0x7C	; 124
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	90 81       	ld	r25, Z
     7b6:	82 95       	swap	r24
     7b8:	88 0f       	add	r24, r24
     7ba:	88 0f       	add	r24, r24
     7bc:	80 7c       	andi	r24, 0xC0	; 192
     7be:	9f 73       	andi	r25, 0x3F	; 63
     7c0:	98 2b       	or	r25, r24
     7c2:	90 83       	st	Z, r25
     7c4:	08 95       	ret

000007c6 <main>:
     7c6:	0e 94 22 0b 	call	0x1644	; 0x1644 <CBOT_ISR_init>
     7ca:	0e 94 14 0b 	call	0x1628	; 0x1628 <CBOT_init>
     7ce:	0e 94 7f 27 	call	0x4efe	; 0x4efe <CBOT_main>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	08 95       	ret

000007d8 <LCD_clear>:
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     7e4:	00 e0       	ldi	r16, 0x00	; 0
     7e6:	80 2f       	mov	r24, r16
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_set_PGC_addr>
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     7f8:	1f 5f       	subi	r17, 0xFF	; 255
     7fa:	10 38       	cpi	r17, 0x80	; 128
     7fc:	c9 f7       	brne	.-14     	; 0x7f0 <LCD_clear+0x18>
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	04 30       	cpi	r16, 0x04	; 4
     802:	89 f7       	brne	.-30     	; 0x7e6 <LCD_clear+0xe>
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	0e 94 ab 04 	call	0x956	; 0x956 <LCD_set_next_PGC>
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <LCD_open>:
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     81c:	88 23       	and	r24, r24
     81e:	11 f4       	brne	.+4      	; 0x824 <LCD_open+0x12>
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	06 c0       	rjmp	.+12     	; 0x830 <LCD_open+0x1e>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     82a:	88 23       	and	r24, r24
     82c:	19 f4       	brne	.+6      	; 0x834 <LCD_open+0x22>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	6d c0       	rjmp	.+218    	; 0x90e <__stack+0xf>
     834:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__LCD_init>
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     840:	8e ea       	ldi	r24, 0xAE	; 174
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     848:	82 ea       	ldi	r24, 0xA2	; 162
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     850:	80 ea       	ldi	r24, 0xA0	; 160
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     858:	00 e5       	ldi	r16, 0x50	; 80
     85a:	13 ec       	ldi	r17, 0xC3	; 195
     85c:	c8 01       	movw	r24, r16
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <LCD_open+0x4c>
     862:	80 ec       	ldi	r24, 0xC0	; 192
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     86a:	8f e2       	ldi	r24, 0x2F	; 47
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     872:	81 e8       	ldi	r24, 0x81	; 129
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     87a:	86 e1       	ldi	r24, 0x16	; 22
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     882:	82 e2       	ldi	r24, 0x22	; 34
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     88a:	c8 01       	movw	r24, r16
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <LCD_open+0x7a>
     890:	8f ea       	ldi	r24, 0xAF	; 175
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     898:	86 ea       	ldi	r24, 0xA6	; 166
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     8a0:	85 ea       	ldi	r24, 0xA5	; 165
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	28 e8       	ldi	r18, 0x88	; 136
     8ae:	33 e1       	ldi	r19, 0x13	; 19
     8b0:	f9 01       	movw	r30, r18
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <LCD_open+0xa0>
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	43 e0       	ldi	r20, 0x03	; 3
     8ba:	88 3e       	cpi	r24, 0xE8	; 232
     8bc:	94 07       	cpc	r25, r20
     8be:	c1 f7       	brne	.-16     	; 0x8b0 <LCD_open+0x9e>
     8c0:	83 eb       	ldi	r24, 0xB3	; 179
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     8c8:	80 e4       	ldi	r24, 0x40	; 64
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_set_PGC_addr>
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 ab 04 	call	0x956	; 0x956 <LCD_set_next_PGC>
     8e0:	10 92 7d 04 	sts	0x047D, r1
     8e4:	10 92 7f 04 	sts	0x047F, r1
     8e8:	10 92 7e 04 	sts	0x047E, r1
     8ec:	8f e0       	ldi	r24, 0x0F	; 15
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	90 93 a9 04 	sts	0x04A9, r25
     8f4:	80 93 a8 04 	sts	0x04A8, r24
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	0e 94 8a 04 	call	0x914	; 0x914 <LCD_set_backlight>
     8fe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
     902:	84 ea       	ldi	r24, 0xA4	; 164
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     90a:	85 e0       	ldi	r24, 0x05	; 5
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <LCD_set_backlight>:
     914:	1f 93       	push	r17
     916:	18 2f       	mov	r17, r24
     918:	85 e0       	ldi	r24, 0x05	; 5
     91a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	c1 f4       	brne	.+48     	; 0x952 <LCD_set_backlight+0x3e>
     922:	87 e0       	ldi	r24, 0x07	; 7
     924:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	6a e0       	ldi	r22, 0x0A	; 10
     92c:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	61 eb       	ldi	r22, 0xB1	; 177
     934:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
     938:	61 2f       	mov	r22, r17
     93a:	11 32       	cpi	r17, 0x21	; 33
     93c:	08 f0       	brcs	.+2      	; 0x940 <LCD_set_backlight+0x2c>
     93e:	60 e2       	ldi	r22, 0x20	; 32
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
     946:	89 ee       	ldi	r24, 0xE9	; 233
     948:	8a 95       	dec	r24
     94a:	f1 f7       	brne	.-4      	; 0x948 <LCD_set_backlight+0x34>
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
     952:	1f 91       	pop	r17
     954:	08 95       	ret

00000956 <LCD_set_next_PGC>:
     956:	83 70       	andi	r24, 0x03	; 3
     958:	6f 77       	andi	r22, 0x7F	; 127
     95a:	60 93 7b 04 	sts	0x047B, r22
     95e:	80 93 7c 04 	sts	0x047C, r24
     962:	08 95       	ret

00000964 <LCD_set_PGC_addr>:
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	06 2f       	mov	r16, r22
     96a:	16 2f       	mov	r17, r22
     96c:	1f 77       	andi	r17, 0x7F	; 127
     96e:	83 70       	andi	r24, 0x03	; 3
     970:	80 6b       	ori	r24, 0xB0	; 176
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     978:	12 95       	swap	r17
     97a:	1f 70       	andi	r17, 0x0F	; 15
     97c:	81 2f       	mov	r24, r17
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     986:	80 2f       	mov	r24, r16
     988:	8f 70       	andi	r24, 0x0F	; 15
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <LCD_write>:
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	08 2f       	mov	r16, r24
     99c:	16 2f       	mov	r17, r22
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	79 f4       	brne	.+30     	; 0x9c6 <LCD_write+0x30>
     9a8:	11 23       	and	r17, r17
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <LCD_write+0x1c>
     9ac:	11 30       	cpi	r17, 0x01	; 1
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <LCD_write+0x22>
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <LCD_write+0x20>
     9b2:	2b 98       	cbi	0x05, 3	; 5
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <LCD_write+0x22>
     9b6:	2b 9a       	sbi	0x05, 3	; 5
     9b8:	86 e0       	ldi	r24, 0x06	; 6
     9ba:	8a 95       	dec	r24
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <LCD_write+0x24>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	60 2f       	mov	r22, r16
     9c2:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	08 95       	ret

000009cc <SPI_set_slave_addr>:
     9cc:	1f 93       	push	r17
     9ce:	18 2f       	mov	r17, r24
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <SPI_set_slave_addr+0x10>
     9da:	47 c0       	rjmp	.+142    	; 0xa6a <SPI_set_slave_addr+0x9e>
     9dc:	91 2f       	mov	r25, r17
     9de:	97 70       	andi	r25, 0x07	; 7
     9e0:	80 91 80 04 	lds	r24, 0x0480
     9e4:	98 17       	cp	r25, r24
     9e6:	09 f4       	brne	.+2      	; 0x9ea <SPI_set_slave_addr+0x1e>
     9e8:	40 c0       	rjmp	.+128    	; 0xa6a <SPI_set_slave_addr+0x9e>
     9ea:	90 93 80 04 	sts	0x0480, r25
     9ee:	85 b1       	in	r24, 0x05	; 5
     9f0:	88 7f       	andi	r24, 0xF8	; 248
     9f2:	89 2b       	or	r24, r25
     9f4:	85 b9       	out	0x05, r24	; 5
     9f6:	93 30       	cpi	r25, 0x03	; 3
     9f8:	11 f1       	breq	.+68     	; 0xa3e <SPI_set_slave_addr+0x72>
     9fa:	94 30       	cpi	r25, 0x04	; 4
     9fc:	28 f4       	brcc	.+10     	; 0xa08 <SPI_set_slave_addr+0x3c>
     9fe:	91 30       	cpi	r25, 0x01	; 1
     a00:	51 f0       	breq	.+20     	; 0xa16 <SPI_set_slave_addr+0x4a>
     a02:	92 30       	cpi	r25, 0x02	; 2
     a04:	90 f4       	brcc	.+36     	; 0xa2a <SPI_set_slave_addr+0x5e>
     a06:	0c c0       	rjmp	.+24     	; 0xa20 <SPI_set_slave_addr+0x54>
     a08:	95 30       	cpi	r25, 0x05	; 5
     a0a:	19 f1       	breq	.+70     	; 0xa52 <SPI_set_slave_addr+0x86>
     a0c:	95 30       	cpi	r25, 0x05	; 5
     a0e:	e0 f0       	brcs	.+56     	; 0xa48 <SPI_set_slave_addr+0x7c>
     a10:	96 30       	cpi	r25, 0x06	; 6
     a12:	21 f5       	brne	.+72     	; 0xa5c <SPI_set_slave_addr+0x90>
     a14:	0f c0       	rjmp	.+30     	; 0xa34 <SPI_set_slave_addr+0x68>
     a16:	e0 91 02 04 	lds	r30, 0x0402
     a1a:	f0 91 03 04 	lds	r31, 0x0403
     a1e:	22 c0       	rjmp	.+68     	; 0xa64 <SPI_set_slave_addr+0x98>
     a20:	e0 91 00 04 	lds	r30, 0x0400
     a24:	f0 91 01 04 	lds	r31, 0x0401
     a28:	1d c0       	rjmp	.+58     	; 0xa64 <SPI_set_slave_addr+0x98>
     a2a:	e0 91 04 04 	lds	r30, 0x0404
     a2e:	f0 91 05 04 	lds	r31, 0x0405
     a32:	18 c0       	rjmp	.+48     	; 0xa64 <SPI_set_slave_addr+0x98>
     a34:	e0 91 0c 04 	lds	r30, 0x040C
     a38:	f0 91 0d 04 	lds	r31, 0x040D
     a3c:	13 c0       	rjmp	.+38     	; 0xa64 <SPI_set_slave_addr+0x98>
     a3e:	e0 91 06 04 	lds	r30, 0x0406
     a42:	f0 91 07 04 	lds	r31, 0x0407
     a46:	0e c0       	rjmp	.+28     	; 0xa64 <SPI_set_slave_addr+0x98>
     a48:	e0 91 08 04 	lds	r30, 0x0408
     a4c:	f0 91 09 04 	lds	r31, 0x0409
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <SPI_set_slave_addr+0x98>
     a52:	e0 91 0a 04 	lds	r30, 0x040A
     a56:	f0 91 0b 04 	lds	r31, 0x040B
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <SPI_set_slave_addr+0x98>
     a5c:	e0 91 0e 04 	lds	r30, 0x040E
     a60:	f0 91 0f 04 	lds	r31, 0x040F
     a64:	30 97       	sbiw	r30, 0x00	; 0
     a66:	09 f0       	breq	.+2      	; 0xa6a <SPI_set_slave_addr+0x9e>
     a68:	09 95       	icall
     a6a:	1f 91       	pop	r17
     a6c:	08 95       	ret

00000a6e <SPI_transmit>:
     a6e:	1f 93       	push	r17
     a70:	16 2f       	mov	r17, r22
     a72:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	21 f4       	brne	.+8      	; 0xa88 <SPI_transmit+0x1a>
     a80:	1e bd       	out	0x2e, r17	; 46
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <SPI_transmit+0x14>
     a88:	1f 91       	pop	r17
     a8a:	08 95       	ret

00000a8c <__SPKR_set_up_freq_LUT>:
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 96 32 	call	0x652c	; 0x652c <malloc>
     a9c:	9c 01       	movw	r18, r24
     a9e:	90 93 1f 04 	sts	0x041F, r25
     aa2:	80 93 1e 04 	sts	0x041E, r24
     aa6:	89 2b       	or	r24, r25
     aa8:	11 f4       	brne	.+4      	; 0xaae <__SPKR_set_up_freq_LUT+0x22>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	39 c0       	rjmp	.+114    	; 0xb20 <__SPKR_set_up_freq_LUT+0x94>
     aae:	89 01       	movw	r16, r18
     ab0:	c0 e0       	ldi	r28, 0x00	; 0
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	be 01       	movw	r22, r28
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__floatunsisf>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 ea       	ldi	r20, 0xA0	; 160
     ac4:	51 e4       	ldi	r21, 0x41	; 65
     ac6:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
     aca:	27 ef       	ldi	r18, 0xF7	; 247
     acc:	35 e7       	ldi	r19, 0x75	; 117
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e2       	ldi	r24, 0x20	; 32
     ae0:	91 e4       	ldi	r25, 0x41	; 65
     ae2:	0e 94 c0 30 	call	0x6180	; 0x6180 <pow>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	ca 01       	movw	r24, r20
     aec:	b9 01       	movw	r22, r18
     aee:	2d ec       	ldi	r18, 0xCD	; 205
     af0:	3c ec       	ldi	r19, 0xCC	; 204
     af2:	42 e8       	ldi	r20, 0x82	; 130
     af4:	51 e4       	ldi	r21, 0x41	; 65
     af6:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
     afa:	0e 94 86 30 	call	0x610c	; 0x610c <lrint>
     afe:	2a e0       	ldi	r18, 0x0A	; 10
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__mulsi3>
     b0a:	f8 01       	movw	r30, r16
     b0c:	61 93       	st	Z+, r22
     b0e:	71 93       	st	Z+, r23
     b10:	81 93       	st	Z+, r24
     b12:	91 93       	st	Z+, r25
     b14:	8f 01       	movw	r16, r30
     b16:	21 96       	adiw	r28, 0x01	; 1
     b18:	c8 34       	cpi	r28, 0x48	; 72
     b1a:	d1 05       	cpc	r29, r1
     b1c:	59 f6       	brne	.-106    	; 0xab4 <__SPKR_set_up_freq_LUT+0x28>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <__SPKR_open_beep_mode>:
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     b30:	88 23       	and	r24, r24
     b32:	71 f4       	brne	.+28     	; 0xb50 <__SPKR_open_beep_mode+0x26>
     b34:	10 92 1b 04 	sts	0x041B, r1
     b38:	10 92 1a 04 	sts	0x041A, r1
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__SPKR_init>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 11 04 	sts	0x0411, r24
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     b50:	8a e0       	ldi	r24, 0x0A	; 10
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	08 95       	ret

00000b56 <__SPKR_open_tone_mode>:
     b56:	1f 93       	push	r17
     b58:	8b e0       	ldi	r24, 0x0B	; 11
     b5a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     b5e:	88 23       	and	r24, r24
     b60:	11 f0       	breq	.+4      	; 0xb66 <__SPKR_open_tone_mode+0x10>
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	21 c0       	rjmp	.+66     	; 0xba8 <__SPKR_open_tone_mode+0x52>
     b66:	89 e0       	ldi	r24, 0x09	; 9
     b68:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     b6c:	88 23       	and	r24, r24
     b6e:	d9 f4       	brne	.+54     	; 0xba6 <__SPKR_open_tone_mode+0x50>
     b70:	0e 94 46 05 	call	0xa8c	; 0xa8c <__SPKR_set_up_freq_LUT>
     b74:	18 2f       	mov	r17, r24
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	b1 f4       	brne	.+44     	; 0xba6 <__SPKR_open_tone_mode+0x50>
     b7a:	10 92 12 04 	sts	0x0412, r1
     b7e:	10 92 13 04 	sts	0x0413, r1
     b82:	10 92 14 04 	sts	0x0414, r1
     b86:	10 92 15 04 	sts	0x0415, r1
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	60 ee       	ldi	r22, 0xE0	; 224
     b8e:	7e e0       	ldi	r23, 0x0E	; 14
     b90:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ISR_attach>
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__SPKR_init>
     b9a:	10 93 10 04 	sts	0x0410, r17
     b9e:	89 e0       	ldi	r24, 0x09	; 9
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	89 e0       	ldi	r24, 0x09	; 9
     baa:	1f 91       	pop	r17
     bac:	08 95       	ret

00000bae <SPKR_open>:
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	29 f0       	breq	.+10     	; 0xbbc <SPKR_open+0xe>
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	31 f0       	breq	.+12     	; 0xbc2 <SPKR_open+0x14>
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	89 e0       	ldi	r24, 0x09	; 9
     bba:	08 95       	ret
     bbc:	0e 94 95 05 	call	0xb2a	; 0xb2a <__SPKR_open_beep_mode>
     bc0:	08 95       	ret
     bc2:	0e 94 ab 05 	call	0xb56	; 0xb56 <__SPKR_open_tone_mode>
     bc6:	08 95       	ret

00000bc8 <SPKR_play_beep>:
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	4b 01       	movw	r8, r22
     be2:	5c 01       	movw	r10, r24
     be4:	ea 01       	movw	r28, r20
     be6:	b9 01       	movw	r22, r18
     be8:	21 15       	cp	r18, r1
     bea:	31 05       	cpc	r19, r1
     bec:	39 f1       	breq	.+78     	; 0xc3c <SPKR_play_beep+0x74>
     bee:	9e 01       	movw	r18, r28
     bf0:	44 27       	eor	r20, r20
     bf2:	37 fd       	sbrc	r19, 7
     bf4:	40 95       	com	r20
     bf6:	54 2f       	mov	r21, r20
     bf8:	65 36       	cpi	r22, 0x65	; 101
     bfa:	71 05       	cpc	r23, r1
     bfc:	10 f0       	brcs	.+4      	; 0xc02 <SPKR_play_beep+0x3a>
     bfe:	64 e6       	ldi	r22, 0x64	; 100
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__mulsi3>
     c0a:	24 e6       	ldi	r18, 0x64	; 100
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	0e 94 0f 32 	call	0x641e	; 0x641e <__udivmodsi4>
     c16:	79 01       	movw	r14, r18
     c18:	8a 01       	movw	r16, r20
     c1a:	c5 01       	movw	r24, r10
     c1c:	b4 01       	movw	r22, r8
     c1e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SPKR_beep>
     c22:	c7 01       	movw	r24, r14
     c24:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SPKR_beep>
     c34:	ce 01       	movw	r24, r28
     c36:	8e 19       	sub	r24, r14
     c38:	9f 09       	sbc	r25, r15
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <SPKR_play_beep+0x7c>
     c3c:	41 15       	cp	r20, r1
     c3e:	51 05       	cpc	r21, r1
     c40:	19 f0       	breq	.+6      	; 0xc48 <SPKR_play_beep+0x80>
     c42:	ca 01       	movw	r24, r20
     c44:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	08 95       	ret

00000c62 <STEPPER_close>:
     c62:	87 e0       	ldi	r24, 0x07	; 7
     c64:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	41 f4       	brne	.+16     	; 0xc7c <STEPPER_close+0x1a>
     c6c:	80 93 65 04 	sts	0x0465, r24
     c70:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__STEPPER_close>
     c74:	87 e0       	ldi	r24, 0x07	; 7
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     c7c:	08 95       	ret

00000c7e <STEPPER_stepmode>:
     c7e:	2f 92       	push	r2
     c80:	3f 92       	push	r3
     c82:	4f 92       	push	r4
     c84:	5f 92       	push	r5
     c86:	6f 92       	push	r6
     c88:	7f 92       	push	r7
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	58 2e       	mov	r5, r24
     ca8:	96 2e       	mov	r9, r22
     caa:	44 2e       	mov	r4, r20
     cac:	39 01       	movw	r6, r18
     cae:	3c 2c       	mov	r3, r12
     cb0:	c9 8c       	ldd	r12, Y+25	; 0x19
     cb2:	da 8c       	ldd	r13, Y+26	; 0x1a
     cb4:	2b 8c       	ldd	r2, Y+27	; 0x1b
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	68 17       	cp	r22, r24
     cba:	39 f1       	breq	.+78     	; 0xd0a <STEPPER_stepmode+0x8c>
     cbc:	68 17       	cp	r22, r24
     cbe:	28 f0       	brcs	.+10     	; 0xcca <STEPPER_stepmode+0x4c>
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	69 17       	cp	r22, r25
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <STEPPER_stepmode+0x4a>
     cc6:	85 c0       	rjmp	.+266    	; 0xdd2 <STEPPER_stepmode+0x154>
     cc8:	49 c0       	rjmp	.+146    	; 0xd5c <STEPPER_stepmode+0xde>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	b7 01       	movw	r22, r14
     cd6:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	64 2d       	mov	r22, r4
     cde:	a3 01       	movw	r20, r6
     ce0:	98 01       	movw	r18, r16
     ce2:	03 2d       	mov	r16, r3
     ce4:	ee 24       	eor	r14, r14
     ce6:	e3 94       	inc	r14
     ce8:	e6 e6       	ldi	r30, 0x66	; 102
     cea:	ce 2e       	mov	r12, r30
     cec:	e4 e0       	ldi	r30, 0x04	; 4
     cee:	de 2e       	mov	r13, r30
     cf0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <STEPPER_step>
     cf4:	55 20       	and	r5, r5
     cf6:	09 f0       	breq	.+2      	; 0xcfa <STEPPER_stepmode+0x7c>
     cf8:	6c c0       	rjmp	.+216    	; 0xdd2 <STEPPER_stepmode+0x154>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <STEPPER_stepmode+0x7e>
     cfc:	0f 92       	push	r0
     cfe:	ed b7       	in	r30, 0x3d	; 61
     d00:	fe b7       	in	r31, 0x3e	; 62
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	b3 82       	std	Z+3, r11	; 0x03
     d06:	a2 82       	std	Z+2, r10	; 0x02
     d08:	23 c0       	rjmp	.+70     	; 0xd50 <STEPPER_stepmode+0xd2>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	68 2d       	mov	r22, r8
     d1e:	4d 89       	ldd	r20, Y+21	; 0x15
     d20:	5e 89       	ldd	r21, Y+22	; 0x16
     d22:	2f 89       	ldd	r18, Y+23	; 0x17
     d24:	38 8d       	ldd	r19, Y+24	; 0x18
     d26:	02 2d       	mov	r16, r2
     d28:	ee 24       	eor	r14, r14
     d2a:	e3 94       	inc	r14
     d2c:	76 e6       	ldi	r23, 0x66	; 102
     d2e:	c7 2e       	mov	r12, r23
     d30:	74 e0       	ldi	r23, 0x04	; 4
     d32:	d7 2e       	mov	r13, r23
     d34:	0e 94 7f 08 	call	0x10fe	; 0x10fe <STEPPER_step>
     d38:	55 20       	and	r5, r5
     d3a:	09 f0       	breq	.+2      	; 0xd3e <STEPPER_stepmode+0xc0>
     d3c:	4a c0       	rjmp	.+148    	; 0xdd2 <STEPPER_stepmode+0x154>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <STEPPER_stepmode+0xc2>
     d40:	0f 92       	push	r0
     d42:	ed b7       	in	r30, 0x3d	; 61
     d44:	fe b7       	in	r31, 0x3e	; 62
     d46:	91 82       	std	Z+1, r9	; 0x01
     d48:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d4c:	93 83       	std	Z+3, r25	; 0x03
     d4e:	82 83       	std	Z+2, r24	; 0x02
     d50:	0e 94 30 09 	call	0x1260	; 0x1260 <STEPPER_wait_and_then>
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	3b c0       	rjmp	.+118    	; 0xdd2 <STEPPER_stepmode+0x154>
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	b7 01       	movw	r22, r14
     d68:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	b6 01       	movw	r22, r12
     d70:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	64 2d       	mov	r22, r4
     d78:	a3 01       	movw	r20, r6
     d7a:	98 01       	movw	r18, r16
     d7c:	03 2d       	mov	r16, r3
     d7e:	ee 24       	eor	r14, r14
     d80:	e3 94       	inc	r14
     d82:	96 e6       	ldi	r25, 0x66	; 102
     d84:	c9 2e       	mov	r12, r25
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	d9 2e       	mov	r13, r25
     d8a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <STEPPER_step>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	68 2d       	mov	r22, r8
     d92:	4d 89       	ldd	r20, Y+21	; 0x15
     d94:	5e 89       	ldd	r21, Y+22	; 0x16
     d96:	2f 89       	ldd	r18, Y+23	; 0x17
     d98:	38 8d       	ldd	r19, Y+24	; 0x18
     d9a:	02 2d       	mov	r16, r2
     d9c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <STEPPER_step>
     da0:	55 20       	and	r5, r5
     da2:	b9 f4       	brne	.+46     	; 0xdd2 <STEPPER_stepmode+0x154>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <STEPPER_stepmode+0x128>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <STEPPER_stepmode+0x12a>
     da8:	0f 92       	push	r0
     daa:	ad b7       	in	r26, 0x3d	; 61
     dac:	be b7       	in	r27, 0x3e	; 62
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	ed b7       	in	r30, 0x3d	; 61
     db2:	fe b7       	in	r31, 0x3e	; 62
     db4:	91 82       	std	Z+1, r9	; 0x01
     db6:	fd 01       	movw	r30, r26
     db8:	b2 82       	std	Z+2, r11	; 0x02
     dba:	a1 82       	std	Z+1, r10	; 0x01
     dbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dc0:	94 83       	std	Z+4, r25	; 0x04
     dc2:	83 83       	std	Z+3, r24	; 0x03
     dc4:	0e 94 30 09 	call	0x1260	; 0x1260 <STEPPER_wait_and_then>
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	2f 90       	pop	r2
     df6:	08 95       	ret

00000df8 <STEPPER_move>:
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	94 2e       	mov	r9, r20
     e1a:	7c 2d       	mov	r23, r12
     e1c:	d5 01       	movw	r26, r10
     e1e:	49 89       	ldd	r20, Y+17	; 0x11
     e20:	5a 89       	ldd	r21, Y+18	; 0x12
     e22:	ab 88       	ldd	r10, Y+19	; 0x13
     e24:	bc 88       	ldd	r11, Y+20	; 0x14
     e26:	cd 88       	ldd	r12, Y+21	; 0x15
     e28:	de 88       	ldd	r13, Y+22	; 0x16
     e2a:	9f 89       	ldd	r25, Y+23	; 0x17
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <STEPPER_move+0x3a>
     e30:	57 c0       	rjmp	.+174    	; 0xee0 <STEPPER_move+0xe8>
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	b8 f1       	brcs	.+110    	; 0xea4 <STEPPER_move+0xac>
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	09 f0       	breq	.+2      	; 0xe3c <STEPPER_move+0x44>
     e3a:	76 c0       	rjmp	.+236    	; 0xf28 <STEPPER_move+0x130>
     e3c:	61 30       	cpi	r22, 0x01	; 1
     e3e:	91 f0       	breq	.+36     	; 0xe64 <STEPPER_move+0x6c>
     e40:	61 30       	cpi	r22, 0x01	; 1
     e42:	20 f0       	brcs	.+8      	; 0xe4c <STEPPER_move+0x54>
     e44:	62 30       	cpi	r22, 0x02	; 2
     e46:	09 f0       	breq	.+2      	; 0xe4a <STEPPER_move+0x52>
     e48:	6f c0       	rjmp	.+222    	; 0xf28 <STEPPER_move+0x130>
     e4a:	15 c0       	rjmp	.+42     	; 0xe76 <STEPPER_move+0x7e>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	b7 01       	movw	r22, r14
     e58:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	69 2d       	mov	r22, r9
     e60:	a8 01       	movw	r20, r16
     e62:	1d c0       	rjmp	.+58     	; 0xe9e <STEPPER_move+0xa6>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <STEPPER_move+0xa0>
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	b7 01       	movw	r22, r14
     e82:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 11 08 	call	0x1022	; 0x1022 <STEPPER_set_accel>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	69 2d       	mov	r22, r9
     e92:	a8 01       	movw	r20, r16
     e94:	0e 94 fa 07 	call	0xff4	; 0xff4 <STEPPER_run>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	68 2d       	mov	r22, r8
     e9c:	a5 01       	movw	r20, r10
     e9e:	0e 94 fa 07 	call	0xff4	; 0xff4 <STEPPER_run>
     ea2:	42 c0       	rjmp	.+132    	; 0xf28 <STEPPER_move+0x130>
     ea4:	ed b7       	in	r30, 0x3d	; 61
     ea6:	fe b7       	in	r31, 0x3e	; 62
     ea8:	39 97       	sbiw	r30, 0x09	; 9
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	fe bf       	out	0x3e, r31	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	ed bf       	out	0x3d, r30	; 61
     eb4:	6d b6       	in	r6, 0x3d	; 61
     eb6:	7e b6       	in	r7, 0x3e	; 62
     eb8:	08 94       	sec
     eba:	61 1c       	adc	r6, r1
     ebc:	71 1c       	adc	r7, r1
     ebe:	52 83       	std	Z+2, r21	; 0x02
     ec0:	41 83       	std	Z+1, r20	; 0x01
     ec2:	f3 01       	movw	r30, r6
     ec4:	b3 82       	std	Z+3, r11	; 0x03
     ec6:	a2 82       	std	Z+2, r10	; 0x02
     ec8:	d5 82       	std	Z+5, r13	; 0x05
     eca:	c4 82       	std	Z+4, r12	; 0x04
     ecc:	96 83       	std	Z+6, r25	; 0x06
     ece:	88 8d       	ldd	r24, Y+24	; 0x18
     ed0:	99 8d       	ldd	r25, Y+25	; 0x19
     ed2:	90 87       	std	Z+8, r25	; 0x08
     ed4:	87 83       	std	Z+7, r24	; 0x07
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	49 2d       	mov	r20, r9
     eda:	c7 2e       	mov	r12, r23
     edc:	5d 01       	movw	r10, r26
     ede:	1a c0       	rjmp	.+52     	; 0xf14 <STEPPER_move+0x11c>
     ee0:	ed b7       	in	r30, 0x3d	; 61
     ee2:	fe b7       	in	r31, 0x3e	; 62
     ee4:	39 97       	sbiw	r30, 0x09	; 9
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	fe bf       	out	0x3e, r31	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	ed bf       	out	0x3d, r30	; 61
     ef0:	ad b7       	in	r26, 0x3d	; 61
     ef2:	be b7       	in	r27, 0x3e	; 62
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	52 83       	std	Z+2, r21	; 0x02
     ef8:	41 83       	std	Z+1, r20	; 0x01
     efa:	fd 01       	movw	r30, r26
     efc:	b3 82       	std	Z+3, r11	; 0x03
     efe:	a2 82       	std	Z+2, r10	; 0x02
     f00:	d5 82       	std	Z+5, r13	; 0x05
     f02:	c4 82       	std	Z+4, r12	; 0x04
     f04:	96 83       	std	Z+6, r25	; 0x06
     f06:	10 86       	std	Z+8, r1	; 0x08
     f08:	17 82       	std	Z+7, r1	; 0x07
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	49 2d       	mov	r20, r9
     f0e:	c7 2e       	mov	r12, r23
     f10:	aa 24       	eor	r10, r10
     f12:	bb 24       	eor	r11, r11
     f14:	0e 94 3f 06 	call	0xc7e	; 0xc7e <STEPPER_stepmode>
     f18:	8d b7       	in	r24, 0x3d	; 61
     f1a:	9e b7       	in	r25, 0x3e	; 62
     f1c:	09 96       	adiw	r24, 0x09	; 9
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	9e bf       	out	0x3e, r25	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	8d bf       	out	0x3d, r24	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	08 95       	ret

00000f46 <STEPPER_open>:
     f46:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__STEPPER_init>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 65 04 	sts	0x0465, r24
     f50:	ef e2       	ldi	r30, 0x2F	; 47
     f52:	f4 e0       	ldi	r31, 0x04	; 4
     f54:	11 92       	st	Z+, r1
     f56:	11 92       	st	Z+, r1
     f58:	11 82       	std	Z+1, r1	; 0x01
     f5a:	10 82       	st	Z, r1
     f5c:	32 96       	adiw	r30, 0x02	; 2
     f5e:	11 82       	std	Z+1, r1	; 0x01
     f60:	10 82       	st	Z, r1
     f62:	32 96       	adiw	r30, 0x02	; 2
     f64:	11 82       	std	Z+1, r1	; 0x01
     f66:	10 82       	st	Z, r1
     f68:	32 96       	adiw	r30, 0x02	; 2
     f6a:	11 82       	std	Z+1, r1	; 0x01
     f6c:	10 82       	st	Z, r1
     f6e:	32 96       	adiw	r30, 0x02	; 2
     f70:	11 82       	std	Z+1, r1	; 0x01
     f72:	10 82       	st	Z, r1
     f74:	32 96       	adiw	r30, 0x02	; 2
     f76:	11 82       	std	Z+1, r1	; 0x01
     f78:	10 82       	st	Z, r1
     f7a:	32 96       	adiw	r30, 0x02	; 2
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
     f80:	32 96       	adiw	r30, 0x02	; 2
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	10 82       	st	Z, r1
     f86:	32 96       	adiw	r30, 0x02	; 2
     f88:	11 82       	std	Z+1, r1	; 0x01
     f8a:	10 82       	st	Z, r1
     f8c:	32 96       	adiw	r30, 0x02	; 2
     f8e:	11 82       	std	Z+1, r1	; 0x01
     f90:	10 82       	st	Z, r1
     f92:	32 96       	adiw	r30, 0x02	; 2
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	10 82       	st	Z, r1
     f98:	32 96       	adiw	r30, 0x02	; 2
     f9a:	11 82       	std	Z+1, r1	; 0x01
     f9c:	10 82       	st	Z, r1
     f9e:	36 96       	adiw	r30, 0x06	; 6
     fa0:	11 92       	st	Z+, r1
     fa2:	11 92       	st	Z+, r1
     fa4:	11 92       	st	Z+, r1
     fa6:	10 82       	st	Z, r1
     fa8:	32 96       	adiw	r30, 0x02	; 2
     faa:	11 92       	st	Z+, r1
     fac:	11 92       	st	Z+, r1
     fae:	11 92       	st	Z+, r1
     fb0:	11 92       	st	Z+, r1
     fb2:	11 92       	st	Z+, r1
     fb4:	11 92       	st	Z+, r1
     fb6:	11 92       	st	Z+, r1
     fb8:	11 82       	std	Z+1, r1	; 0x01
     fba:	10 82       	st	Z, r1
     fbc:	32 96       	adiw	r30, 0x02	; 2
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	10 82       	st	Z, r1
     fc2:	32 96       	adiw	r30, 0x02	; 2
     fc4:	11 82       	std	Z+1, r1	; 0x01
     fc6:	10 82       	st	Z, r1
     fc8:	32 96       	adiw	r30, 0x02	; 2
     fca:	11 82       	std	Z+1, r1	; 0x01
     fcc:	10 82       	st	Z, r1
     fce:	76 97       	sbiw	r30, 0x16	; 22
     fd0:	11 82       	std	Z+1, r1	; 0x01
     fd2:	10 82       	st	Z, r1
     fd4:	32 96       	adiw	r30, 0x02	; 2
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1
     fda:	10 92 64 04 	sts	0x0464, r1
     fde:	10 92 63 04 	sts	0x0463, r1
     fe2:	10 92 65 04 	sts	0x0465, r1
     fe6:	87 e0       	ldi	r24, 0x07	; 7
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
     fee:	87 e0       	ldi	r24, 0x07	; 7
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	08 95       	ret

00000ff4 <STEPPER_run>:
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	18 2f       	mov	r17, r24
     ffe:	06 2f       	mov	r16, r22
    1000:	7a 01       	movw	r14, r20
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
    1008:	81 2f       	mov	r24, r17
    100a:	60 2f       	mov	r22, r16
    100c:	0e 94 33 08 	call	0x1066	; 0x1066 <STEPPER_set_dir>
    1010:	81 2f       	mov	r24, r17
    1012:	b7 01       	movw	r22, r14
    1014:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	08 95       	ret

00001022 <STEPPER_set_accel>:
    1022:	48 2f       	mov	r20, r24
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 65 04 	sts	0x0465, r24
    102a:	cb 01       	movw	r24, r22
    102c:	23 e0       	ldi	r18, 0x03	; 3
    102e:	69 3e       	cpi	r22, 0xE9	; 233
    1030:	72 07       	cpc	r23, r18
    1032:	10 f0       	brcs	.+4      	; 0x1038 <STEPPER_set_accel+0x16>
    1034:	88 ee       	ldi	r24, 0xE8	; 232
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	41 30       	cpi	r20, 0x01	; 1
    103a:	71 f0       	breq	.+28     	; 0x1058 <STEPPER_set_accel+0x36>
    103c:	41 30       	cpi	r20, 0x01	; 1
    103e:	18 f0       	brcs	.+6      	; 0x1046 <STEPPER_set_accel+0x24>
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	71 f4       	brne	.+28     	; 0x1060 <STEPPER_set_accel+0x3e>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <STEPPER_set_accel+0x2e>
    1046:	90 93 3a 04 	sts	0x043A, r25
    104a:	80 93 39 04 	sts	0x0439, r24
    104e:	08 c0       	rjmp	.+16     	; 0x1060 <STEPPER_set_accel+0x3e>
    1050:	90 93 3a 04 	sts	0x043A, r25
    1054:	80 93 39 04 	sts	0x0439, r24
    1058:	90 93 3c 04 	sts	0x043C, r25
    105c:	80 93 3b 04 	sts	0x043B, r24
    1060:	10 92 65 04 	sts	0x0465, r1
    1064:	08 95       	ret

00001066 <STEPPER_set_dir>:
    1066:	98 2f       	mov	r25, r24
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 65 04 	sts	0x0465, r24
    106e:	91 30       	cpi	r25, 0x01	; 1
    1070:	51 f0       	breq	.+20     	; 0x1086 <STEPPER_set_dir+0x20>
    1072:	91 30       	cpi	r25, 0x01	; 1
    1074:	18 f0       	brcs	.+6      	; 0x107c <STEPPER_set_dir+0x16>
    1076:	92 30       	cpi	r25, 0x02	; 2
    1078:	41 f4       	brne	.+16     	; 0x108a <STEPPER_set_dir+0x24>
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <STEPPER_set_dir+0x1c>
    107c:	60 93 52 04 	sts	0x0452, r22
    1080:	04 c0       	rjmp	.+8      	; 0x108a <STEPPER_set_dir+0x24>
    1082:	60 93 52 04 	sts	0x0452, r22
    1086:	60 93 53 04 	sts	0x0453, r22
    108a:	10 92 65 04 	sts	0x0465, r1
    108e:	08 95       	ret

00001090 <STEPPER_set_mode>:
    1090:	98 2f       	mov	r25, r24
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 65 04 	sts	0x0465, r24
    1098:	91 30       	cpi	r25, 0x01	; 1
    109a:	51 f0       	breq	.+20     	; 0x10b0 <STEPPER_set_mode+0x20>
    109c:	91 30       	cpi	r25, 0x01	; 1
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <STEPPER_set_mode+0x16>
    10a0:	92 30       	cpi	r25, 0x02	; 2
    10a2:	41 f4       	brne	.+16     	; 0x10b4 <STEPPER_set_mode+0x24>
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <STEPPER_set_mode+0x1c>
    10a6:	60 93 2f 04 	sts	0x042F, r22
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <STEPPER_set_mode+0x24>
    10ac:	60 93 2f 04 	sts	0x042F, r22
    10b0:	60 93 30 04 	sts	0x0430, r22
    10b4:	10 92 65 04 	sts	0x0465, r1
    10b8:	08 95       	ret

000010ba <STEPPER_set_speed>:
    10ba:	48 2f       	mov	r20, r24
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 65 04 	sts	0x0465, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	21 e0       	ldi	r18, 0x01	; 1
    10c6:	61 39       	cpi	r22, 0x91	; 145
    10c8:	72 07       	cpc	r23, r18
    10ca:	10 f0       	brcs	.+4      	; 0x10d0 <STEPPER_set_speed+0x16>
    10cc:	80 e9       	ldi	r24, 0x90	; 144
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	41 30       	cpi	r20, 0x01	; 1
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <STEPPER_set_speed+0x36>
    10d4:	41 30       	cpi	r20, 0x01	; 1
    10d6:	18 f0       	brcs	.+6      	; 0x10de <STEPPER_set_speed+0x24>
    10d8:	42 30       	cpi	r20, 0x02	; 2
    10da:	71 f4       	brne	.+28     	; 0x10f8 <STEPPER_set_speed+0x3e>
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <STEPPER_set_speed+0x2e>
    10de:	90 93 32 04 	sts	0x0432, r25
    10e2:	80 93 31 04 	sts	0x0431, r24
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <STEPPER_set_speed+0x3e>
    10e8:	90 93 32 04 	sts	0x0432, r25
    10ec:	80 93 31 04 	sts	0x0431, r24
    10f0:	90 93 34 04 	sts	0x0434, r25
    10f4:	80 93 33 04 	sts	0x0433, r24
    10f8:	10 92 65 04 	sts	0x0465, r1
    10fc:	08 95       	ret

000010fe <STEPPER_step>:
    10fe:	8f 92       	push	r8
    1100:	9f 92       	push	r9
    1102:	af 92       	push	r10
    1104:	bf 92       	push	r11
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	18 2f       	mov	r17, r24
    1118:	f6 2e       	mov	r15, r22
    111a:	5a 01       	movw	r10, r20
    111c:	49 01       	movw	r8, r18
    111e:	e6 01       	movw	r28, r12
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
    1126:	81 2f       	mov	r24, r17
    1128:	b5 01       	movw	r22, r10
    112a:	a4 01       	movw	r20, r8
    112c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <STEPPER_setup_decels>
    1130:	81 2f       	mov	r24, r17
    1132:	6f 2d       	mov	r22, r15
    1134:	0e 94 33 08 	call	0x1066	; 0x1066 <STEPPER_set_dir>
    1138:	81 2f       	mov	r24, r17
    113a:	60 2f       	mov	r22, r16
    113c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <STEPPER_set_stop_mode>
    1140:	81 2f       	mov	r24, r17
    1142:	b5 01       	movw	r22, r10
    1144:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <STEPPER_set_steps>
    1148:	c1 14       	cp	r12, r1
    114a:	d1 04       	cpc	r13, r1
    114c:	99 f0       	breq	.+38     	; 0x1174 <STEPPER_step+0x76>
    114e:	11 30       	cpi	r17, 0x01	; 1
    1150:	49 f0       	breq	.+18     	; 0x1164 <STEPPER_step+0x66>
    1152:	11 30       	cpi	r17, 0x01	; 1
    1154:	18 f0       	brcs	.+6      	; 0x115c <STEPPER_step+0x5e>
    1156:	12 30       	cpi	r17, 0x02	; 2
    1158:	69 f4       	brne	.+26     	; 0x1174 <STEPPER_step+0x76>
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <STEPPER_step+0x6a>
    115c:	18 82       	st	Y, r1
    115e:	10 92 61 04 	sts	0x0461, r1
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <STEPPER_step+0x76>
    1164:	19 82       	std	Y+1, r1	; 0x01
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <STEPPER_step+0x72>
    1168:	18 82       	st	Y, r1
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	10 92 61 04 	sts	0x0461, r1
    1170:	10 92 62 04 	sts	0x0462, r1
    1174:	d0 93 64 04 	sts	0x0464, r29
    1178:	c0 93 63 04 	sts	0x0463, r28
    117c:	ee 20       	and	r14, r14
    117e:	b9 f5       	brne	.+110    	; 0x11ee <STEPPER_step+0xf0>
    1180:	80 eb       	ldi	r24, 0xB0	; 176
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	90 93 64 04 	sts	0x0464, r25
    1188:	80 93 63 04 	sts	0x0463, r24
    118c:	81 2f       	mov	r24, r17
    118e:	b4 01       	movw	r22, r8
    1190:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    1194:	81 2f       	mov	r24, r17
    1196:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <STEPPER_go>
    119a:	11 30       	cpi	r17, 0x01	; 1
    119c:	71 f0       	breq	.+28     	; 0x11ba <STEPPER_step+0xbc>
    119e:	11 30       	cpi	r17, 0x01	; 1
    11a0:	18 f0       	brcs	.+6      	; 0x11a8 <STEPPER_step+0xaa>
    11a2:	12 30       	cpi	r17, 0x02	; 2
    11a4:	59 f5       	brne	.+86     	; 0x11fc <STEPPER_step+0xfe>
    11a6:	12 c0       	rjmp	.+36     	; 0x11cc <STEPPER_step+0xce>
    11a8:	10 92 b0 03 	sts	0x03B0, r1
    11ac:	10 92 61 04 	sts	0x0461, r1
    11b0:	80 91 b0 03 	lds	r24, 0x03B0
    11b4:	88 23       	and	r24, r24
    11b6:	e1 f3       	breq	.-8      	; 0x11b0 <STEPPER_step+0xb2>
    11b8:	21 c0       	rjmp	.+66     	; 0x11fc <STEPPER_step+0xfe>
    11ba:	10 92 b1 03 	sts	0x03B1, r1
    11be:	10 92 62 04 	sts	0x0462, r1
    11c2:	80 91 b1 03 	lds	r24, 0x03B1
    11c6:	88 23       	and	r24, r24
    11c8:	e1 f3       	breq	.-8      	; 0x11c2 <STEPPER_step+0xc4>
    11ca:	18 c0       	rjmp	.+48     	; 0x11fc <STEPPER_step+0xfe>
    11cc:	10 92 b0 03 	sts	0x03B0, r1
    11d0:	10 92 b1 03 	sts	0x03B1, r1
    11d4:	10 92 61 04 	sts	0x0461, r1
    11d8:	10 92 62 04 	sts	0x0462, r1
    11dc:	80 91 b0 03 	lds	r24, 0x03B0
    11e0:	88 23       	and	r24, r24
    11e2:	e1 f3       	breq	.-8      	; 0x11dc <STEPPER_step+0xde>
    11e4:	80 91 b1 03 	lds	r24, 0x03B1
    11e8:	88 23       	and	r24, r24
    11ea:	c1 f3       	breq	.-16     	; 0x11dc <STEPPER_step+0xde>
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <STEPPER_step+0xfe>
    11ee:	81 2f       	mov	r24, r17
    11f0:	b4 01       	movw	r22, r8
    11f2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    11f6:	81 2f       	mov	r24, r17
    11f8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <STEPPER_go>
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	08 95       	ret

00001216 <STEPPER_stop>:
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	18 2f       	mov	r17, r24
    121c:	06 2f       	mov	r16, r22
    121e:	66 23       	and	r22, r22
    1220:	49 f4       	brne	.+18     	; 0x1234 <STEPPER_stop+0x1e>
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    122a:	81 2f       	mov	r24, r17
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <STEPPER_set_steps>
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	80 93 65 04 	sts	0x0465, r24
    123a:	11 30       	cpi	r17, 0x01	; 1
    123c:	51 f0       	breq	.+20     	; 0x1252 <STEPPER_stop+0x3c>
    123e:	11 30       	cpi	r17, 0x01	; 1
    1240:	18 f0       	brcs	.+6      	; 0x1248 <STEPPER_stop+0x32>
    1242:	12 30       	cpi	r17, 0x02	; 2
    1244:	41 f4       	brne	.+16     	; 0x1256 <STEPPER_stop+0x40>
    1246:	03 c0       	rjmp	.+6      	; 0x124e <STEPPER_stop+0x38>
    1248:	00 93 4d 04 	sts	0x044D, r16
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <STEPPER_stop+0x40>
    124e:	00 93 4d 04 	sts	0x044D, r16
    1252:	00 93 4e 04 	sts	0x044E, r16
    1256:	10 92 65 04 	sts	0x0465, r1
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <STEPPER_wait_and_then>:
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8b 85       	ldd	r24, Y+11	; 0x0b
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	61 f0       	breq	.+24     	; 0x1292 <STEPPER_wait_and_then+0x32>
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	18 f0       	brcs	.+6      	; 0x1284 <STEPPER_wait_and_then+0x24>
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	a1 f5       	brne	.+104    	; 0x12ea <STEPPER_wait_and_then+0x8a>
    1282:	11 c0       	rjmp	.+34     	; 0x12a6 <STEPPER_wait_and_then+0x46>
    1284:	ec 85       	ldd	r30, Y+12	; 0x0c
    1286:	fd 85       	ldd	r31, Y+13	; 0x0d
    1288:	80 91 66 04 	lds	r24, 0x0466
    128c:	88 23       	and	r24, r24
    128e:	e1 f3       	breq	.-8      	; 0x1288 <STEPPER_wait_and_then+0x28>
    1290:	06 c0       	rjmp	.+12     	; 0x129e <STEPPER_wait_and_then+0x3e>
    1292:	ec 85       	ldd	r30, Y+12	; 0x0c
    1294:	fd 85       	ldd	r31, Y+13	; 0x0d
    1296:	80 91 67 04 	lds	r24, 0x0467
    129a:	88 23       	and	r24, r24
    129c:	e1 f3       	breq	.-8      	; 0x1296 <STEPPER_wait_and_then+0x36>
    129e:	30 97       	sbiw	r30, 0x00	; 0
    12a0:	21 f1       	breq	.+72     	; 0x12ea <STEPPER_wait_and_then+0x8a>
    12a2:	09 95       	icall
    12a4:	22 c0       	rjmp	.+68     	; 0x12ea <STEPPER_wait_and_then+0x8a>
    12a6:	cc 84       	ldd	r12, Y+12	; 0x0c
    12a8:	dd 84       	ldd	r13, Y+13	; 0x0d
    12aa:	ee 84       	ldd	r14, Y+14	; 0x0e
    12ac:	ff 84       	ldd	r15, Y+15	; 0x0f
    12ae:	00 e0       	ldi	r16, 0x00	; 0
    12b0:	10 e0       	ldi	r17, 0x00	; 0
    12b2:	00 23       	and	r16, r16
    12b4:	51 f4       	brne	.+20     	; 0x12ca <STEPPER_wait_and_then+0x6a>
    12b6:	80 91 66 04 	lds	r24, 0x0466
    12ba:	88 23       	and	r24, r24
    12bc:	31 f0       	breq	.+12     	; 0x12ca <STEPPER_wait_and_then+0x6a>
    12be:	c1 14       	cp	r12, r1
    12c0:	d1 04       	cpc	r13, r1
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <STEPPER_wait_and_then+0x68>
    12c4:	f6 01       	movw	r30, r12
    12c6:	09 95       	icall
    12c8:	01 e0       	ldi	r16, 0x01	; 1
    12ca:	11 23       	and	r17, r17
    12cc:	51 f4       	brne	.+20     	; 0x12e2 <STEPPER_wait_and_then+0x82>
    12ce:	80 91 67 04 	lds	r24, 0x0467
    12d2:	88 23       	and	r24, r24
    12d4:	31 f0       	breq	.+12     	; 0x12e2 <STEPPER_wait_and_then+0x82>
    12d6:	e1 14       	cp	r14, r1
    12d8:	f1 04       	cpc	r15, r1
    12da:	11 f0       	breq	.+4      	; 0x12e0 <STEPPER_wait_and_then+0x80>
    12dc:	f7 01       	movw	r30, r14
    12de:	09 95       	icall
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	00 23       	and	r16, r16
    12e4:	31 f3       	breq	.-52     	; 0x12b2 <STEPPER_wait_and_then+0x52>
    12e6:	11 23       	and	r17, r17
    12e8:	21 f3       	breq	.-56     	; 0x12b2 <STEPPER_wait_and_then+0x52>
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	08 95       	ret

000012fc <SYS_get_state>:
    12fc:	e8 2f       	mov	r30, r24
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	e3 31       	cpi	r30, 0x13	; 19
    1302:	f1 05       	cpc	r31, r1
    1304:	40 f4       	brcc	.+16     	; 0x1316 <SYS_get_state+0x1a>
    1306:	ec 59       	subi	r30, 0x9C	; 156
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	05 90       	lpm	r0, Z+
    1310:	f4 91       	lpm	r31, Z
    1312:	e0 2d       	mov	r30, r0
    1314:	09 94       	ijmp
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret
    131a:	80 91 68 04 	lds	r24, 0x0468
    131e:	08 95       	ret
    1320:	80 91 69 04 	lds	r24, 0x0469
    1324:	08 95       	ret
    1326:	80 91 6a 04 	lds	r24, 0x046A
    132a:	08 95       	ret
    132c:	80 91 6b 04 	lds	r24, 0x046B
    1330:	08 95       	ret
    1332:	80 91 6c 04 	lds	r24, 0x046C
    1336:	08 95       	ret
    1338:	80 91 6e 04 	lds	r24, 0x046E
    133c:	08 95       	ret
    133e:	80 91 6d 04 	lds	r24, 0x046D
    1342:	08 95       	ret
    1344:	80 91 6f 04 	lds	r24, 0x046F
    1348:	08 95       	ret
    134a:	80 91 70 04 	lds	r24, 0x0470
    134e:	08 95       	ret
    1350:	80 91 71 04 	lds	r24, 0x0471
    1354:	08 95       	ret
    1356:	80 91 72 04 	lds	r24, 0x0472
    135a:	08 95       	ret
    135c:	80 91 73 04 	lds	r24, 0x0473
    1360:	08 95       	ret
    1362:	80 91 74 04 	lds	r24, 0x0474
    1366:	08 95       	ret
    1368:	80 91 75 04 	lds	r24, 0x0475
    136c:	08 95       	ret
    136e:	80 91 76 04 	lds	r24, 0x0476
    1372:	08 95       	ret
    1374:	80 91 77 04 	lds	r24, 0x0477
    1378:	08 95       	ret
    137a:	80 91 78 04 	lds	r24, 0x0478
    137e:	08 95       	ret
    1380:	80 91 79 04 	lds	r24, 0x0479
    1384:	08 95       	ret
    1386:	80 91 7a 04 	lds	r24, 0x047A
    138a:	08 95       	ret

0000138c <SYS_set_state>:
    138c:	e8 2f       	mov	r30, r24
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	e3 31       	cpi	r30, 0x13	; 19
    1392:	f1 05       	cpc	r31, r1
    1394:	08 f0       	brcs	.+2      	; 0x1398 <SYS_set_state+0xc>
    1396:	40 c0       	rjmp	.+128    	; 0x1418 <SYS_set_state+0x8c>
    1398:	e9 58       	subi	r30, 0x89	; 137
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	05 90       	lpm	r0, Z+
    13a2:	f4 91       	lpm	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	09 94       	ijmp
    13a8:	60 93 68 04 	sts	0x0468, r22
    13ac:	08 95       	ret
    13ae:	60 93 69 04 	sts	0x0469, r22
    13b2:	08 95       	ret
    13b4:	60 93 6a 04 	sts	0x046A, r22
    13b8:	08 95       	ret
    13ba:	60 93 6b 04 	sts	0x046B, r22
    13be:	08 95       	ret
    13c0:	60 93 6c 04 	sts	0x046C, r22
    13c4:	08 95       	ret
    13c6:	60 93 6e 04 	sts	0x046E, r22
    13ca:	08 95       	ret
    13cc:	60 93 6d 04 	sts	0x046D, r22
    13d0:	08 95       	ret
    13d2:	60 93 6f 04 	sts	0x046F, r22
    13d6:	08 95       	ret
    13d8:	60 93 70 04 	sts	0x0470, r22
    13dc:	08 95       	ret
    13de:	60 93 71 04 	sts	0x0471, r22
    13e2:	08 95       	ret
    13e4:	60 93 72 04 	sts	0x0472, r22
    13e8:	08 95       	ret
    13ea:	60 93 73 04 	sts	0x0473, r22
    13ee:	08 95       	ret
    13f0:	60 93 74 04 	sts	0x0474, r22
    13f4:	08 95       	ret
    13f6:	60 93 75 04 	sts	0x0475, r22
    13fa:	08 95       	ret
    13fc:	60 93 76 04 	sts	0x0476, r22
    1400:	08 95       	ret
    1402:	60 93 77 04 	sts	0x0477, r22
    1406:	08 95       	ret
    1408:	60 93 78 04 	sts	0x0478, r22
    140c:	08 95       	ret
    140e:	60 93 79 04 	sts	0x0479, r22
    1412:	08 95       	ret
    1414:	60 93 78 04 	sts	0x0478, r22
    1418:	08 95       	ret

0000141a <ATTINY_get_SW_state>:
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	18 2f       	mov	r17, r24
    1422:	80 91 b3 03 	lds	r24, 0x03B3
    1426:	88 23       	and	r24, r24
    1428:	41 f0       	breq	.+16     	; 0x143a <ATTINY_get_SW_state+0x20>
    142a:	80 91 bd 03 	lds	r24, 0x03BD
    142e:	88 23       	and	r24, r24
    1430:	99 f0       	breq	.+38     	; 0x1458 <ATTINY_get_SW_state+0x3e>
    1432:	10 92 b3 03 	sts	0x03B3, r1
    1436:	10 92 bd 03 	sts	0x03BD, r1
    143a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <ATTINY_get_sensors>
    143e:	80 93 b2 03 	sts	0x03B2, r24
    1442:	87 eb       	ldi	r24, 0xB7	; 183
    1444:	93 e0       	ldi	r25, 0x03	; 3
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	22 e3       	ldi	r18, 0x32	; 50
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <TMRSRVC_new>
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 b3 03 	sts	0x03B3, r24
    1458:	90 91 b2 03 	lds	r25, 0x03B2
    145c:	a1 2f       	mov	r26, r17
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ed 01       	movw	r28, r26
    1462:	c7 5f       	subi	r28, 0xF7	; 247
    1464:	de 4f       	sbci	r29, 0xFE	; 254
    1466:	88 81       	ld	r24, Y
    1468:	88 23       	and	r24, r24
    146a:	69 f0       	breq	.+26     	; 0x1486 <ATTINY_get_SW_state+0x6c>
    146c:	fd 01       	movw	r30, r26
    146e:	e4 5f       	subi	r30, 0xF4	; 244
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	80 81       	ld	r24, Z
    1474:	98 23       	and	r25, r24
    1476:	c1 f0       	breq	.+48     	; 0x14a8 <ATTINY_get_SW_state+0x8e>
    1478:	fd 01       	movw	r30, r26
    147a:	ec 54       	subi	r30, 0x4C	; 76
    147c:	fc 4f       	sbci	r31, 0xFC	; 252
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
    1482:	18 82       	st	Y, r1
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <ATTINY_get_SW_state+0x8e>
    1486:	fd 01       	movw	r30, r26
    1488:	ec 54       	subi	r30, 0x4C	; 76
    148a:	fc 4f       	sbci	r31, 0xFC	; 252
    148c:	80 81       	ld	r24, Z
    148e:	81 11       	cpse	r24, r1
    1490:	10 82       	st	Z, r1
    1492:	fd 01       	movw	r30, r26
    1494:	e4 5f       	subi	r30, 0xF4	; 244
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	80 81       	ld	r24, Z
    149a:	98 23       	and	r25, r24
    149c:	29 f4       	brne	.+10     	; 0x14a8 <ATTINY_get_SW_state+0x8e>
    149e:	fd 01       	movw	r30, r26
    14a0:	e7 5f       	subi	r30, 0xF7	; 247
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	80 83       	st	Z, r24
    14a8:	ac 54       	subi	r26, 0x4C	; 76
    14aa:	bc 4f       	sbci	r27, 0xFC	; 252
    14ac:	8c 91       	ld	r24, X
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	08 95       	ret

000014b6 <ATTINY_open>:
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    14bc:	88 23       	and	r24, r24
    14be:	19 f4       	brne	.+6      	; 0x14c6 <ATTINY_open+0x10>
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	08 95       	ret
    14c6:	10 92 96 04 	sts	0x0496, r1
    14ca:	10 92 95 04 	sts	0x0495, r1
    14ce:	10 92 98 04 	sts	0x0498, r1
    14d2:	10 92 97 04 	sts	0x0497, r1
    14d6:	10 92 9a 04 	sts	0x049A, r1
    14da:	10 92 99 04 	sts	0x0499, r1
    14de:	10 92 9c 04 	sts	0x049C, r1
    14e2:	10 92 9b 04 	sts	0x049B, r1
    14e6:	10 92 9e 04 	sts	0x049E, r1
    14ea:	10 92 9d 04 	sts	0x049D, r1
    14ee:	80 e9       	ldi	r24, 0x90	; 144
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	90 93 82 04 	sts	0x0482, r25
    14f6:	80 93 81 04 	sts	0x0481, r24
    14fa:	90 93 84 04 	sts	0x0484, r25
    14fe:	80 93 83 04 	sts	0x0483, r24
    1502:	90 93 86 04 	sts	0x0486, r25
    1506:	80 93 85 04 	sts	0x0485, r24
    150a:	90 93 88 04 	sts	0x0488, r25
    150e:	80 93 87 04 	sts	0x0487, r24
    1512:	90 93 8a 04 	sts	0x048A, r25
    1516:	80 93 89 04 	sts	0x0489, r24
    151a:	84 e3       	ldi	r24, 0x34	; 52
    151c:	98 e0       	ldi	r25, 0x08	; 8
    151e:	90 93 8c 04 	sts	0x048C, r25
    1522:	80 93 8b 04 	sts	0x048B, r24
    1526:	90 93 8e 04 	sts	0x048E, r25
    152a:	80 93 8d 04 	sts	0x048D, r24
    152e:	90 93 90 04 	sts	0x0490, r25
    1532:	80 93 8f 04 	sts	0x048F, r24
    1536:	90 93 92 04 	sts	0x0492, r25
    153a:	80 93 91 04 	sts	0x0491, r24
    153e:	90 93 94 04 	sts	0x0494, r25
    1542:	80 93 93 04 	sts	0x0493, r24
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	08 95       	ret

00001554 <TMRSRVC_delay>:
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	29 97       	sbiw	r28, 0x09	; 9
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	9c 01       	movw	r18, r24
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 cb 0a 	call	0x1596	; 0x1596 <TMRSRVC_new>
    1576:	98 2f       	mov	r25, r24
    1578:	88 23       	and	r24, r24
    157a:	19 f4       	brne	.+6      	; 0x1582 <TMRSRVC_delay+0x2e>
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	88 23       	and	r24, r24
    1580:	e9 f3       	breq	.-6      	; 0x157c <TMRSRVC_delay+0x28>
    1582:	89 2f       	mov	r24, r25
    1584:	29 96       	adiw	r28, 0x09	; 9
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <TMRSRVC_new>:
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
    15a4:	f6 2e       	mov	r15, r22
    15a6:	e4 2e       	mov	r14, r20
    15a8:	89 01       	movw	r16, r18
    15aa:	88 e0       	ldi	r24, 0x08	; 8
    15ac:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <TMRSRVC_new+0x22>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	26 c0       	rjmp	.+76     	; 0x1604 <TMRSRVC_new+0x6e>
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 96 32 	call	0x652c	; 0x652c <malloc>
    15c0:	fc 01       	movw	r30, r24
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	11 f4       	brne	.+4      	; 0x15ca <TMRSRVC_new+0x34>
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	1d c0       	rjmp	.+58     	; 0x1604 <TMRSRVC_new+0x6e>
    15ca:	f9 82       	std	Y+1, r15	; 0x01
    15cc:	f0 fc       	sbrc	r15, 0
    15ce:	1e 82       	std	Y+6, r1	; 0x06
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	e8 16       	cp	r14, r24
    15d4:	19 f4       	brne	.+6      	; 0x15dc <TMRSRVC_new+0x46>
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	84 60       	ori	r24, 0x04	; 4
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	88 60       	ori	r24, 0x08	; 8
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	1b 83       	std	Y+3, r17	; 0x03
    15e4:	0a 83       	std	Y+2, r16	; 0x02
    15e6:	1d 83       	std	Y+5, r17	; 0x05
    15e8:	0c 83       	std	Y+4, r16	; 0x04
    15ea:	d1 83       	std	Z+1, r29	; 0x01
    15ec:	c0 83       	st	Z, r28
    15ee:	13 82       	std	Z+3, r1	; 0x03
    15f0:	12 82       	std	Z+2, r1	; 0x02
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 20 04 	sts	0x0420, r24
    15f8:	cf 01       	movw	r24, r30
    15fa:	0e 94 8e 10 	call	0x211c	; 0x211c <TMRSRVC_insert>
    15fe:	10 92 20 04 	sts	0x0420, r1
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	08 95       	ret

00001612 <__ADC_init>:
    1612:	8f e1       	ldi	r24, 0x1F	; 31
    1614:	80 93 7c 00 	sts	0x007C, r24
    1618:	ea e7       	ldi	r30, 0x7A	; 122
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	87 e0       	ldi	r24, 0x07	; 7
    161e:	80 83       	st	Z, r24
    1620:	80 81       	ld	r24, Z
    1622:	80 68       	ori	r24, 0x80	; 128
    1624:	80 83       	st	Z, r24
    1626:	08 95       	ret

00001628 <CBOT_init>:
    1628:	0e 94 3a 10 	call	0x2074	; 0x2074 <SYS_init>
    162c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <ATMEGA_open>
    1630:	0e 94 76 0d 	call	0x1aec	; 0x1aec <ISR_open>
    1634:	0e 94 f7 10 	call	0x21ee	; 0x21ee <TMRSRVC_open>
    1638:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <SPI_open>
    163c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ATTINY_open>
    1640:	78 94       	sei
    1642:	08 95       	ret

00001644 <CBOT_ISR_init>:
    1644:	00 00       	nop
    1646:	08 95       	ret

00001648 <__vector_16>:
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
    166a:	e0 91 e0 03 	lds	r30, 0x03E0
    166e:	f0 91 e1 03 	lds	r31, 0x03E1
    1672:	30 97       	sbiw	r30, 0x00	; 0
    1674:	09 f0       	breq	.+2      	; 0x1678 <__vector_16+0x30>
    1676:	09 95       	icall
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <__vector_17>:
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	2f 93       	push	r18
    16a6:	3f 93       	push	r19
    16a8:	4f 93       	push	r20
    16aa:	5f 93       	push	r21
    16ac:	6f 93       	push	r22
    16ae:	7f 93       	push	r23
    16b0:	8f 93       	push	r24
    16b2:	9f 93       	push	r25
    16b4:	af 93       	push	r26
    16b6:	bf 93       	push	r27
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	e0 91 e2 03 	lds	r30, 0x03E2
    16c0:	f0 91 e3 03 	lds	r31, 0x03E3
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	09 f0       	breq	.+2      	; 0x16ca <__vector_17+0x30>
    16c8:	09 95       	icall
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	7f 91       	pop	r23
    16d8:	6f 91       	pop	r22
    16da:	5f 91       	pop	r21
    16dc:	4f 91       	pop	r20
    16de:	3f 91       	pop	r19
    16e0:	2f 91       	pop	r18
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti

000016ec <__vector_18>:
    16ec:	1f 92       	push	r1
    16ee:	0f 92       	push	r0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	e0 91 e4 03 	lds	r30, 0x03E4
    1712:	f0 91 e5 03 	lds	r31, 0x03E5
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	09 f0       	breq	.+2      	; 0x171c <__vector_18+0x30>
    171a:	09 95       	icall
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <__vector_9>:
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
    1760:	e0 91 d2 03 	lds	r30, 0x03D2
    1764:	f0 91 d3 03 	lds	r31, 0x03D3
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	09 f0       	breq	.+2      	; 0x176e <__vector_9+0x30>
    176c:	09 95       	icall
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <__vector_10>:
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
    17b2:	e0 91 d4 03 	lds	r30, 0x03D4
    17b6:	f0 91 d5 03 	lds	r31, 0x03D5
    17ba:	30 97       	sbiw	r30, 0x00	; 0
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <__vector_10+0x30>
    17be:	09 95       	icall
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_11>:
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	e0 91 d6 03 	lds	r30, 0x03D6
    1808:	f0 91 d7 03 	lds	r31, 0x03D7
    180c:	30 97       	sbiw	r30, 0x00	; 0
    180e:	09 f0       	breq	.+2      	; 0x1812 <__vector_11+0x30>
    1810:	09 95       	icall
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <__vector_13>:
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
    1856:	e0 91 da 03 	lds	r30, 0x03DA
    185a:	f0 91 db 03 	lds	r31, 0x03DB
    185e:	30 97       	sbiw	r30, 0x00	; 0
    1860:	09 f0       	breq	.+2      	; 0x1864 <__vector_13+0x30>
    1862:	09 95       	icall
    1864:	ff 91       	pop	r31
    1866:	ef 91       	pop	r30
    1868:	bf 91       	pop	r27
    186a:	af 91       	pop	r26
    186c:	9f 91       	pop	r25
    186e:	8f 91       	pop	r24
    1870:	7f 91       	pop	r23
    1872:	6f 91       	pop	r22
    1874:	5f 91       	pop	r21
    1876:	4f 91       	pop	r20
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_14>:
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	e0 91 dc 03 	lds	r30, 0x03DC
    18ac:	f0 91 dd 03 	lds	r31, 0x03DD
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <__vector_14+0x30>
    18b4:	09 95       	icall
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	bf 91       	pop	r27
    18bc:	af 91       	pop	r26
    18be:	9f 91       	pop	r25
    18c0:	8f 91       	pop	r24
    18c2:	7f 91       	pop	r23
    18c4:	6f 91       	pop	r22
    18c6:	5f 91       	pop	r21
    18c8:	4f 91       	pop	r20
    18ca:	3f 91       	pop	r19
    18cc:	2f 91       	pop	r18
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	0f 90       	pop	r0
    18d4:	1f 90       	pop	r1
    18d6:	18 95       	reti

000018d8 <__vector_12>:
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	6f 93       	push	r22
    18ec:	7f 93       	push	r23
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	e0 91 d8 03 	lds	r30, 0x03D8
    18fe:	f0 91 d9 03 	lds	r31, 0x03D9
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	09 f0       	breq	.+2      	; 0x1908 <__vector_12+0x30>
    1906:	09 95       	icall
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <__vector_15>:
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
    194c:	e0 91 de 03 	lds	r30, 0x03DE
    1950:	f0 91 df 03 	lds	r31, 0x03DF
    1954:	30 97       	sbiw	r30, 0x00	; 0
    1956:	09 f0       	breq	.+2      	; 0x195a <__vector_15+0x30>
    1958:	09 95       	icall
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	7f 91       	pop	r23
    1968:	6f 91       	pop	r22
    196a:	5f 91       	pop	r21
    196c:	4f 91       	pop	r20
    196e:	3f 91       	pop	r19
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <__vector_4>:
    197c:	1f 92       	push	r1
    197e:	0f 92       	push	r0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
    199e:	e0 91 c8 03 	lds	r30, 0x03C8
    19a2:	f0 91 c9 03 	lds	r31, 0x03C9
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	09 f0       	breq	.+2      	; 0x19ac <__vector_4+0x30>
    19aa:	09 95       	icall
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <__vector_5>:
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
    19f0:	e0 91 ca 03 	lds	r30, 0x03CA
    19f4:	f0 91 cb 03 	lds	r31, 0x03CB
    19f8:	30 97       	sbiw	r30, 0x00	; 0
    19fa:	09 f0       	breq	.+2      	; 0x19fe <__vector_5+0x30>
    19fc:	09 95       	icall
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	7f 91       	pop	r23
    1a0c:	6f 91       	pop	r22
    1a0e:	5f 91       	pop	r21
    1a10:	4f 91       	pop	r20
    1a12:	3f 91       	pop	r19
    1a14:	2f 91       	pop	r18
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <__vector_6>:
    1a20:	1f 92       	push	r1
    1a22:	0f 92       	push	r0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	0f 92       	push	r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	e0 91 cc 03 	lds	r30, 0x03CC
    1a46:	f0 91 cd 03 	lds	r31, 0x03CD
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_6+0x30>
    1a4e:	09 95       	icall
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <__vector_7>:
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
    1a94:	e0 91 ce 03 	lds	r30, 0x03CE
    1a98:	f0 91 cf 03 	lds	r31, 0x03CF
    1a9c:	30 97       	sbiw	r30, 0x00	; 0
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <__vector_7+0x30>
    1aa0:	09 95       	icall
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	7f 91       	pop	r23
    1ab0:	6f 91       	pop	r22
    1ab2:	5f 91       	pop	r21
    1ab4:	4f 91       	pop	r20
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <ISR_attach>:
    1ac4:	e8 2f       	mov	r30, r24
    1ac6:	80 32       	cpi	r24, 0x20	; 32
    1ac8:	68 f4       	brcc	.+26     	; 0x1ae4 <ISR_attach+0x20>
    1aca:	80 51       	subi	r24, 0x10	; 16
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	50 f0       	brcs	.+20     	; 0x1ae4 <ISR_attach+0x20>
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	e0 54       	subi	r30, 0x40	; 64
    1ad8:	fc 4f       	sbci	r31, 0xFC	; 252
    1ada:	20 81       	ld	r18, Z
    1adc:	31 81       	ldd	r19, Z+1	; 0x01
    1ade:	71 83       	std	Z+1, r23	; 0x01
    1ae0:	60 83       	st	Z, r22
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <ISR_attach+0x24>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	c9 01       	movw	r24, r18
    1aea:	08 95       	ret

00001aec <ISR_open>:
    1aec:	80 e1       	ldi	r24, 0x10	; 16
    1aee:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    1af2:	88 23       	and	r24, r24
    1af4:	61 f4       	brne	.+24     	; 0x1b0e <ISR_open+0x22>
    1af6:	e0 ec       	ldi	r30, 0xC0	; 192
    1af8:	f3 e0       	ldi	r31, 0x03	; 3
    1afa:	11 92       	st	Z+, r1
    1afc:	11 92       	st	Z+, r1
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	e0 30       	cpi	r30, 0x00	; 0
    1b02:	f8 07       	cpc	r31, r24
    1b04:	d1 f7       	brne	.-12     	; 0x1afa <ISR_open+0xe>
    1b06:	80 e1       	ldi	r24, 0x10	; 16
    1b08:	61 e0       	ldi	r22, 0x01	; 1
    1b0a:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    1b0e:	80 e1       	ldi	r24, 0x10	; 16
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	08 95       	ret

00001b14 <__LCD_init>:
    1b14:	23 9a       	sbi	0x04, 3	; 4
    1b16:	08 95       	ret

00001b18 <__LCD_putchar>:
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	f8 2e       	mov	r15, r24
    1b24:	8a e0       	ldi	r24, 0x0A	; 10
    1b26:	f8 16       	cp	r15, r24
    1b28:	b1 f0       	breq	.+44     	; 0x1b56 <__LCD_putchar+0x3e>
    1b2a:	8f 15       	cp	r24, r15
    1b2c:	48 f0       	brcs	.+18     	; 0x1b40 <__LCD_putchar+0x28>
    1b2e:	e8 e0       	ldi	r30, 0x08	; 8
    1b30:	fe 16       	cp	r15, r30
    1b32:	b9 f1       	breq	.+110    	; 0x1ba2 <__LCD_putchar+0x8a>
    1b34:	ef 15       	cp	r30, r15
    1b36:	38 f1       	brcs	.+78     	; 0x1b86 <__LCD_putchar+0x6e>
    1b38:	f7 e0       	ldi	r31, 0x07	; 7
    1b3a:	ff 16       	cp	r15, r31
    1b3c:	51 f4       	brne	.+20     	; 0x1b52 <__LCD_putchar+0x3a>
    1b3e:	3b c0       	rjmp	.+118    	; 0x1bb6 <__LCD_putchar+0x9e>
    1b40:	8d e0       	ldi	r24, 0x0D	; 13
    1b42:	f8 16       	cp	r15, r24
    1b44:	59 f0       	breq	.+22     	; 0x1b5c <__LCD_putchar+0x44>
    1b46:	eb e1       	ldi	r30, 0x1B	; 27
    1b48:	fe 16       	cp	r15, r30
    1b4a:	89 f0       	breq	.+34     	; 0x1b6e <__LCD_putchar+0x56>
    1b4c:	fc e0       	ldi	r31, 0x0C	; 12
    1b4e:	ff 16       	cp	r15, r31
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <__LCD_putchar+0x4a>
    1b52:	01 e0       	ldi	r16, 0x01	; 1
    1b54:	41 c0       	rjmp	.+130    	; 0x1bd8 <__LCD_putchar+0xc0>
    1b56:	10 92 7b 04 	sts	0x047B, r1
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <__LCD_putchar+0x4a>
    1b5c:	10 92 7b 04 	sts	0x047B, r1
    1b60:	3a c0       	rjmp	.+116    	; 0x1bd6 <__LCD_putchar+0xbe>
    1b62:	80 91 7c 04 	lds	r24, 0x047C
    1b66:	81 50       	subi	r24, 0x01	; 1
    1b68:	80 93 7c 04 	sts	0x047C, r24
    1b6c:	34 c0       	rjmp	.+104    	; 0x1bd6 <__LCD_putchar+0xbe>
    1b6e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <__LCD_putchar+0x84>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
    1b7c:	80 91 7b 04 	lds	r24, 0x047B
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 7b 04 	sts	0x047B, r24
    1b86:	80 91 7b 04 	lds	r24, 0x047B
    1b8a:	87 ff       	sbrs	r24, 7
    1b8c:	f3 cf       	rjmp	.-26     	; 0x1b74 <__LCD_putchar+0x5c>
    1b8e:	10 92 7b 04 	sts	0x047B, r1
    1b92:	80 91 7c 04 	lds	r24, 0x047C
    1b96:	81 50       	subi	r24, 0x01	; 1
    1b98:	80 93 7c 04 	sts	0x047C, r24
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	11 e0       	ldi	r17, 0x01	; 1
    1ba0:	1c c0       	rjmp	.+56     	; 0x1bda <__LCD_putchar+0xc2>
    1ba2:	80 91 7b 04 	lds	r24, 0x047B
    1ba6:	88 23       	and	r24, r24
    1ba8:	b1 f0       	breq	.+44     	; 0x1bd6 <__LCD_putchar+0xbe>
    1baa:	80 91 7b 04 	lds	r24, 0x047B
    1bae:	86 50       	subi	r24, 0x06	; 6
    1bb0:	80 93 7b 04 	sts	0x047B, r24
    1bb4:	10 c0       	rjmp	.+32     	; 0x1bd6 <__LCD_putchar+0xbe>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	0e 94 d7 05 	call	0xbae	; 0xbae <SPKR_open>
    1bbc:	64 ef       	ldi	r22, 0xF4	; 244
    1bbe:	71 e0       	ldi	r23, 0x01	; 1
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	4d e7       	ldi	r20, 0x7D	; 125
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	24 e6       	ldi	r18, 0x64	; 100
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <SPKR_play_beep>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <SPKR_close>
    1bd6:	00 e0       	ldi	r16, 0x00	; 0
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	80 91 7c 04 	lds	r24, 0x047C
    1bde:	60 91 7b 04 	lds	r22, 0x047B
    1be2:	0e 94 b2 04 	call	0x964	; 0x964 <LCD_set_PGC_addr>
    1be6:	00 23       	and	r16, r16
    1be8:	51 f1       	breq	.+84     	; 0x1c3e <__LCD_putchar+0x126>
    1bea:	85 e0       	ldi	r24, 0x05	; 5
    1bec:	f8 9e       	mul	r15, r24
    1bee:	c0 01       	movw	r24, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	c7 50       	subi	r28, 0x07	; 7
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	02 50       	subi	r16, 0x02	; 2
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	fe 01       	movw	r30, r28
    1c00:	84 91       	lpm	r24, Z
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
    1c08:	21 96       	adiw	r28, 0x01	; 1
    1c0a:	c0 17       	cp	r28, r16
    1c0c:	d1 07       	cpc	r29, r17
    1c0e:	b9 f7       	brne	.-18     	; 0x1bfe <__LCD_putchar+0xe6>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_write>
    1c18:	80 91 7b 04 	lds	r24, 0x047B
    1c1c:	8a 5f       	subi	r24, 0xFA	; 250
    1c1e:	80 93 7b 04 	sts	0x047B, r24
    1c22:	80 91 7b 04 	lds	r24, 0x047B
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	8c 37       	cpi	r24, 0x7C	; 124
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	3c f0       	brlt	.+14     	; 0x1c3c <__LCD_putchar+0x124>
    1c2e:	10 92 7b 04 	sts	0x047B, r1
    1c32:	80 91 7c 04 	lds	r24, 0x047C
    1c36:	81 50       	subi	r24, 0x01	; 1
    1c38:	80 93 7c 04 	sts	0x047C, r24
    1c3c:	11 e0       	ldi	r17, 0x01	; 1
    1c3e:	80 91 7c 04 	lds	r24, 0x047C
    1c42:	83 70       	andi	r24, 0x03	; 3
    1c44:	80 93 7c 04 	sts	0x047C, r24
    1c48:	11 30       	cpi	r17, 0x01	; 1
    1c4a:	59 f4       	brne	.+22     	; 0x1c62 <__LCD_putchar+0x14a>
    1c4c:	80 91 7d 04 	lds	r24, 0x047D
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <__LCD_putchar+0x14a>
    1c54:	e0 91 7e 04 	lds	r30, 0x047E
    1c58:	f0 91 7f 04 	lds	r31, 0x047F
    1c5c:	30 97       	sbiw	r30, 0x00	; 0
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <__LCD_putchar+0x14a>
    1c60:	09 95       	icall
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	08 95       	ret

00001c72 <ATMEGA_open>:
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    1c78:	88 23       	and	r24, r24
    1c7a:	51 f4       	brne	.+20     	; 0x1c90 <ATMEGA_open+0x1e>
    1c7c:	f8 94       	cli
    1c7e:	0e 94 31 11 	call	0x2262	; 0x2262 <__ATMEGA_init>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <ATMEGA_set_clk_mode>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	91 e0       	ldi	r25, 0x01	; 1
    1c94:	08 95       	ret

00001c96 <ATMEGA_set_clk_mode>:
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	49 f0       	breq	.+18     	; 0x1cac <ATMEGA_set_clk_mode+0x16>
    1c9a:	f8 94       	cli
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	20 f1       	brcs	.+72     	; 0x1ce8 <ATMEGA_set_clk_mode+0x52>
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	b1 f0       	breq	.+44     	; 0x1cd0 <ATMEGA_set_clk_mode+0x3a>
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <ATMEGA_set_clk_mode+0x14>
    1ca8:	45 c0       	rjmp	.+138    	; 0x1d34 <ATMEGA_set_clk_mode+0x9e>
    1caa:	17 c0       	rjmp	.+46     	; 0x1cda <ATMEGA_set_clk_mode+0x44>
    1cac:	2c 9a       	sbi	0x05, 4	; 5
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	80 93 61 00 	sts	0x0061, r24
    1cb4:	10 92 61 00 	sts	0x0061, r1
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	00 00       	nop
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	88 32       	cpi	r24, 0x28	; 40
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	d9 f7       	brne	.-10     	; 0x1cbc <ATMEGA_set_clk_mode+0x26>
    1cc6:	10 92 68 00 	sts	0x0068, r1
    1cca:	10 92 6b 00 	sts	0x006B, r1
    1cce:	08 95       	ret
    1cd0:	80 e8       	ldi	r24, 0x80	; 128
    1cd2:	80 93 61 00 	sts	0x0061, r24
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <ATMEGA_set_clk_mode+0x4c>
    1cda:	80 e8       	ldi	r24, 0x80	; 128
    1cdc:	80 93 61 00 	sts	0x0061, r24
    1ce0:	88 e0       	ldi	r24, 0x08	; 8
    1ce2:	80 93 61 00 	sts	0x0061, r24
    1ce6:	28 c0       	rjmp	.+80     	; 0x1d38 <ATMEGA_set_clk_mode+0xa2>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	00 00       	nop
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	2d e6       	ldi	r18, 0x6D	; 109
    1cf2:	80 36       	cpi	r24, 0x60	; 96
    1cf4:	92 07       	cpc	r25, r18
    1cf6:	d1 f7       	brne	.-12     	; 0x1cec <ATMEGA_set_clk_mode+0x56>
    1cf8:	2c 98       	cbi	0x05, 4	; 5
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	00 00       	nop
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	2d e6       	ldi	r18, 0x6D	; 109
    1d04:	80 36       	cpi	r24, 0x60	; 96
    1d06:	92 07       	cpc	r25, r18
    1d08:	d1 f7       	brne	.-12     	; 0x1cfe <ATMEGA_set_clk_mode+0x68>
    1d0a:	10 92 7a 00 	sts	0x007A, r1
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	80 93 64 00 	sts	0x0064, r24
    1d14:	80 91 68 00 	lds	r24, 0x0068
    1d18:	81 60       	ori	r24, 0x01	; 1
    1d1a:	80 93 68 00 	sts	0x0068, r24
    1d1e:	80 91 6b 00 	lds	r24, 0x006B
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	80 93 6b 00 	sts	0x006B, r24
    1d28:	78 94       	sei
    1d2a:	83 b7       	in	r24, 0x33	; 51
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	83 bf       	out	0x33, r24	; 51
    1d30:	88 95       	sleep
    1d32:	08 95       	ret
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <ATMEGA_set_clk_mode+0xa4>
    1d38:	78 94       	sei
    1d3a:	08 95       	ret

00001d3c <SPI_open>:
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__SPI_init>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	6c e4       	ldi	r22, 0x4C	; 76
    1d48:	71 e1       	ldi	r23, 0x11	; 17
    1d4a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	64 e4       	ldi	r22, 0x44	; 68
    1d52:	71 e1       	ldi	r23, 0x11	; 17
    1d54:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	6c e3       	ldi	r22, 0x3C	; 60
    1d5c:	71 e1       	ldi	r23, 0x11	; 17
    1d5e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d62:	86 e0       	ldi	r24, 0x06	; 6
    1d64:	64 e5       	ldi	r22, 0x54	; 84
    1d66:	71 e1       	ldi	r23, 0x11	; 17
    1d68:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d6c:	04 e3       	ldi	r16, 0x34	; 52
    1d6e:	11 e1       	ldi	r17, 0x11	; 17
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	b8 01       	movw	r22, r16
    1d74:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d78:	84 e0       	ldi	r24, 0x04	; 4
    1d7a:	b8 01       	movw	r22, r16
    1d7c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d80:	85 e0       	ldi	r24, 0x05	; 5
    1d82:	b8 01       	movw	r22, r16
    1d84:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d88:	87 e0       	ldi	r24, 0x07	; 7
    1d8a:	b8 01       	movw	r22, r16
    1d8c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <SPI_set_config_func>
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	80 93 80 04 	sts	0x0480, r24
    1d9e:	87 e0       	ldi	r24, 0x07	; 7
    1da0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <SPI_set_config_func>:
    1dae:	e8 2f       	mov	r30, r24
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	ee 0f       	add	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	e0 50       	subi	r30, 0x00	; 0
    1db8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dba:	71 83       	std	Z+1, r23	; 0x01
    1dbc:	60 83       	st	Z, r22
    1dbe:	08 95       	ret

00001dc0 <__SPKR_TIMER1_COMPA_vect>:
    1dc0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SPKR_clk>
    1dc4:	08 95       	ret

00001dc6 <SPKR_beep>:
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	80 91 11 04 	lds	r24, 0x0411
    1dce:	88 23       	and	r24, r24
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <SPKR_beep+0x2c>
    1dd2:	da 01       	movw	r26, r20
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	aa 1f       	adc	r26, r26
    1ddc:	bb 1f       	adc	r27, r27
    1dde:	90 93 1d 04 	sts	0x041D, r25
    1de2:	80 93 1c 04 	sts	0x041C, r24
    1de6:	21 15       	cp	r18, r1
    1de8:	31 05       	cpc	r19, r1
    1dea:	41 05       	cpc	r20, r1
    1dec:	51 05       	cpc	r21, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <SPKR_beep+0x2c>
    1df0:	5f 98       	cbi	0x0b, 7	; 11
    1df2:	08 95       	ret

00001df4 <SPKR_clk>:
    1df4:	80 91 12 04 	lds	r24, 0x0412
    1df8:	90 91 13 04 	lds	r25, 0x0413
    1dfc:	a0 91 14 04 	lds	r26, 0x0414
    1e00:	b0 91 15 04 	lds	r27, 0x0415
    1e04:	20 91 16 04 	lds	r18, 0x0416
    1e08:	30 91 17 04 	lds	r19, 0x0417
    1e0c:	40 91 18 04 	lds	r20, 0x0418
    1e10:	50 91 19 04 	lds	r21, 0x0419
    1e14:	28 0f       	add	r18, r24
    1e16:	39 1f       	adc	r19, r25
    1e18:	4a 1f       	adc	r20, r26
    1e1a:	5b 1f       	adc	r21, r27
    1e1c:	20 93 12 04 	sts	0x0412, r18
    1e20:	30 93 13 04 	sts	0x0413, r19
    1e24:	40 93 14 04 	sts	0x0414, r20
    1e28:	50 93 15 04 	sts	0x0415, r21
    1e2c:	80 91 12 04 	lds	r24, 0x0412
    1e30:	90 91 13 04 	lds	r25, 0x0413
    1e34:	a0 91 14 04 	lds	r26, 0x0414
    1e38:	b0 91 15 04 	lds	r27, 0x0415
    1e3c:	88 51       	subi	r24, 0x18	; 24
    1e3e:	96 4f       	sbci	r25, 0xF6	; 246
    1e40:	a0 40       	sbci	r26, 0x00	; 0
    1e42:	b0 40       	sbci	r27, 0x00	; 0
    1e44:	bc f0       	brlt	.+46     	; 0x1e74 <SPKR_clk+0x80>
    1e46:	8b b1       	in	r24, 0x0b	; 11
    1e48:	80 58       	subi	r24, 0x80	; 128
    1e4a:	8b b9       	out	0x0b, r24	; 11
    1e4c:	80 91 12 04 	lds	r24, 0x0412
    1e50:	90 91 13 04 	lds	r25, 0x0413
    1e54:	a0 91 14 04 	lds	r26, 0x0414
    1e58:	b0 91 15 04 	lds	r27, 0x0415
    1e5c:	88 51       	subi	r24, 0x18	; 24
    1e5e:	96 4f       	sbci	r25, 0xF6	; 246
    1e60:	a0 40       	sbci	r26, 0x00	; 0
    1e62:	b0 40       	sbci	r27, 0x00	; 0
    1e64:	80 93 12 04 	sts	0x0412, r24
    1e68:	90 93 13 04 	sts	0x0413, r25
    1e6c:	a0 93 14 04 	sts	0x0414, r26
    1e70:	b0 93 15 04 	sts	0x0415, r27
    1e74:	08 95       	ret

00001e76 <__SPKR_close_beep_mode>:
    1e76:	8a e0       	ldi	r24, 0x0A	; 10
    1e78:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	41 f4       	brne	.+16     	; 0x1e90 <__SPKR_close_beep_mode+0x1a>
    1e80:	0e 94 76 11 	call	0x22ec	; 0x22ec <__SPKR_close>
    1e84:	10 92 11 04 	sts	0x0411, r1
    1e88:	8a e0       	ldi	r24, 0x0A	; 10
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    1e90:	08 95       	ret

00001e92 <__SPKR_close_tone_mode>:
    1e92:	89 e0       	ldi	r24, 0x09	; 9
    1e94:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	d9 f4       	brne	.+54     	; 0x1ed2 <__SPKR_close_tone_mode+0x40>
    1e9c:	80 91 10 04 	lds	r24, 0x0410
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <__SPKR_close_tone_mode+0x16>
    1ea4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__SPKR_stop>
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	0e 94 76 11 	call	0x22ec	; 0x22ec <__SPKR_close>
    1eae:	80 91 1e 04 	lds	r24, 0x041E
    1eb2:	90 91 1f 04 	lds	r25, 0x041F
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	31 f0       	breq	.+12     	; 0x1ec6 <__SPKR_close_tone_mode+0x34>
    1eba:	0e 94 2e 33 	call	0x665c	; 0x665c <free>
    1ebe:	10 92 1f 04 	sts	0x041F, r1
    1ec2:	10 92 1e 04 	sts	0x041E, r1
    1ec6:	10 92 10 04 	sts	0x0410, r1
    1eca:	89 e0       	ldi	r24, 0x09	; 9
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    1ed2:	08 95       	ret

00001ed4 <SPKR_close>:
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <SPKR_close+0xe>
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <SPKR_close+0x12>
    1edc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__SPKR_close_tone_mode>
    1ee0:	08 95       	ret
    1ee2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__SPKR_close_beep_mode>
    1ee6:	08 95       	ret

00001ee8 <__SPKR_init>:
    1ee8:	98 2f       	mov	r25, r24
    1eea:	80 91 10 04 	lds	r24, 0x0410
    1eee:	88 23       	and	r24, r24
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <__SPKR_init+0x16>
    1ef2:	80 91 11 04 	lds	r24, 0x0411
    1ef6:	88 23       	and	r24, r24
    1ef8:	11 f4       	brne	.+4      	; 0x1efe <__SPKR_init+0x16>
    1efa:	57 9a       	sbi	0x0a, 7	; 10
    1efc:	5f 98       	cbi	0x0b, 7	; 11
    1efe:	80 91 10 04 	lds	r24, 0x0410
    1f02:	88 23       	and	r24, r24
    1f04:	d1 f4       	brne	.+52     	; 0x1f3a <__SPKR_init+0x52>
    1f06:	92 30       	cpi	r25, 0x02	; 2
    1f08:	c1 f4       	brne	.+48     	; 0x1f3a <__SPKR_init+0x52>
    1f0a:	10 92 80 00 	sts	0x0080, r1
    1f0e:	10 92 81 00 	sts	0x0081, r1
    1f12:	80 91 81 00 	lds	r24, 0x0081
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	80 93 81 00 	sts	0x0081, r24
    1f1c:	80 91 81 00 	lds	r24, 0x0081
    1f20:	81 60       	ori	r24, 0x01	; 1
    1f22:	80 93 81 00 	sts	0x0081, r24
    1f26:	10 92 85 00 	sts	0x0085, r1
    1f2a:	10 92 84 00 	sts	0x0084, r1
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 89 00 	sts	0x0089, r24
    1f34:	80 e9       	ldi	r24, 0x90	; 144
    1f36:	80 93 88 00 	sts	0x0088, r24
    1f3a:	08 95       	ret

00001f3c <__SPKR_stop>:
    1f3c:	ef e6       	ldi	r30, 0x6F	; 111
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8d 7f       	andi	r24, 0xFD	; 253
    1f44:	80 83       	st	Z, r24
    1f46:	08 95       	ret

00001f48 <__STEPPER_close>:
    1f48:	88 b1       	in	r24, 0x08	; 8
    1f4a:	83 70       	andi	r24, 0x03	; 3
    1f4c:	88 b9       	out	0x08, r24	; 8
    1f4e:	3a 98       	cbi	0x07, 2	; 7
    1f50:	3b 98       	cbi	0x07, 3	; 7
    1f52:	3c 98       	cbi	0x07, 4	; 7
    1f54:	3d 98       	cbi	0x07, 5	; 7
    1f56:	3e 98       	cbi	0x07, 6	; 7
    1f58:	3f 98       	cbi	0x07, 7	; 7
    1f5a:	08 95       	ret

00001f5c <STEPPER_go>:
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 93 65 04 	sts	0x0465, r24
    1f64:	91 30       	cpi	r25, 0x01	; 1
    1f66:	51 f0       	breq	.+20     	; 0x1f7c <STEPPER_go+0x20>
    1f68:	91 30       	cpi	r25, 0x01	; 1
    1f6a:	18 f0       	brcs	.+6      	; 0x1f72 <STEPPER_go+0x16>
    1f6c:	92 30       	cpi	r25, 0x02	; 2
    1f6e:	41 f4       	brne	.+16     	; 0x1f80 <STEPPER_go+0x24>
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <STEPPER_go+0x1c>
    1f72:	10 92 4d 04 	sts	0x044D, r1
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <STEPPER_go+0x24>
    1f78:	10 92 4d 04 	sts	0x044D, r1
    1f7c:	10 92 4e 04 	sts	0x044E, r1
    1f80:	10 92 65 04 	sts	0x0465, r1
    1f84:	08 95       	ret

00001f86 <__STEPPER_init>:
    1f86:	3a 9a       	sbi	0x07, 2	; 7
    1f88:	3b 9a       	sbi	0x07, 3	; 7
    1f8a:	3c 9a       	sbi	0x07, 4	; 7
    1f8c:	3d 9a       	sbi	0x07, 5	; 7
    1f8e:	3e 9a       	sbi	0x07, 6	; 7
    1f90:	3f 9a       	sbi	0x07, 7	; 7
    1f92:	88 b1       	in	r24, 0x08	; 8
    1f94:	83 70       	andi	r24, 0x03	; 3
    1f96:	88 b9       	out	0x08, r24	; 8
    1f98:	08 95       	ret

00001f9a <STEPPER_set_steps>:
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 65 04 	sts	0x0465, r24
    1fa2:	91 30       	cpi	r25, 0x01	; 1
    1fa4:	71 f0       	breq	.+28     	; 0x1fc2 <STEPPER_set_steps+0x28>
    1fa6:	91 30       	cpi	r25, 0x01	; 1
    1fa8:	18 f0       	brcs	.+6      	; 0x1fb0 <STEPPER_set_steps+0x16>
    1faa:	92 30       	cpi	r25, 0x02	; 2
    1fac:	71 f4       	brne	.+28     	; 0x1fca <STEPPER_set_steps+0x30>
    1fae:	05 c0       	rjmp	.+10     	; 0x1fba <STEPPER_set_steps+0x20>
    1fb0:	70 93 42 04 	sts	0x0442, r23
    1fb4:	60 93 41 04 	sts	0x0441, r22
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <STEPPER_set_steps+0x30>
    1fba:	70 93 42 04 	sts	0x0442, r23
    1fbe:	60 93 41 04 	sts	0x0441, r22
    1fc2:	70 93 44 04 	sts	0x0444, r23
    1fc6:	60 93 43 04 	sts	0x0443, r22
    1fca:	10 92 65 04 	sts	0x0465, r1
    1fce:	08 95       	ret

00001fd0 <STEPPER_set_stop_mode>:
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	80 93 65 04 	sts	0x0465, r24
    1fd8:	91 30       	cpi	r25, 0x01	; 1
    1fda:	51 f0       	breq	.+20     	; 0x1ff0 <STEPPER_set_stop_mode+0x20>
    1fdc:	91 30       	cpi	r25, 0x01	; 1
    1fde:	18 f0       	brcs	.+6      	; 0x1fe6 <STEPPER_set_stop_mode+0x16>
    1fe0:	92 30       	cpi	r25, 0x02	; 2
    1fe2:	41 f4       	brne	.+16     	; 0x1ff4 <STEPPER_set_stop_mode+0x24>
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <STEPPER_set_stop_mode+0x1c>
    1fe6:	60 93 4f 04 	sts	0x044F, r22
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <STEPPER_set_stop_mode+0x24>
    1fec:	60 93 4f 04 	sts	0x044F, r22
    1ff0:	60 93 50 04 	sts	0x0450, r22
    1ff4:	10 92 65 04 	sts	0x0465, r1
    1ff8:	08 95       	ret

00001ffa <STEPPER_setup_decels>:
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	eb 01       	movw	r28, r22
    2004:	8a 01       	movw	r16, r20
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	01 f1       	breq	.+64     	; 0x204a <STEPPER_setup_decels+0x50>
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	18 f0       	brcs	.+6      	; 0x2014 <STEPPER_setup_decels+0x1a>
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	61 f5       	brne	.+88     	; 0x206a <STEPPER_setup_decels+0x70>
    2012:	0d c0       	rjmp	.+26     	; 0x202e <STEPPER_setup_decels+0x34>
    2014:	80 91 39 04 	lds	r24, 0x0439
    2018:	90 91 3a 04 	lds	r25, 0x043A
    201c:	89 2b       	or	r24, r25
    201e:	11 f0       	breq	.+4      	; 0x2024 <STEPPER_setup_decels+0x2a>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	1a c0       	rjmp	.+52     	; 0x2058 <STEPPER_setup_decels+0x5e>
    2024:	10 92 46 04 	sts	0x0446, r1
    2028:	10 92 45 04 	sts	0x0445, r1
    202c:	1e c0       	rjmp	.+60     	; 0x206a <STEPPER_setup_decels+0x70>
    202e:	80 91 39 04 	lds	r24, 0x0439
    2032:	90 91 3a 04 	lds	r25, 0x043A
    2036:	89 2b       	or	r24, r25
    2038:	21 f0       	breq	.+8      	; 0x2042 <STEPPER_setup_decels+0x48>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 92 11 	call	0x2324	; 0x2324 <STEPPER_set_decel_step_values>
    2040:	04 c0       	rjmp	.+8      	; 0x204a <STEPPER_setup_decels+0x50>
    2042:	10 92 46 04 	sts	0x0446, r1
    2046:	10 92 45 04 	sts	0x0445, r1
    204a:	80 91 3b 04 	lds	r24, 0x043B
    204e:	90 91 3c 04 	lds	r25, 0x043C
    2052:	89 2b       	or	r24, r25
    2054:	31 f0       	breq	.+12     	; 0x2062 <STEPPER_setup_decels+0x68>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	be 01       	movw	r22, r28
    205a:	a8 01       	movw	r20, r16
    205c:	0e 94 92 11 	call	0x2324	; 0x2324 <STEPPER_set_decel_step_values>
    2060:	04 c0       	rjmp	.+8      	; 0x206a <STEPPER_setup_decels+0x70>
    2062:	10 92 48 04 	sts	0x0448, r1
    2066:	10 92 47 04 	sts	0x0447, r1
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	08 95       	ret

00002074 <SYS_init>:
    2074:	10 92 68 04 	sts	0x0468, r1
    2078:	10 92 69 04 	sts	0x0469, r1
    207c:	10 92 6d 04 	sts	0x046D, r1
    2080:	10 92 6a 04 	sts	0x046A, r1
    2084:	10 92 6c 04 	sts	0x046C, r1
    2088:	10 92 6e 04 	sts	0x046E, r1
    208c:	10 92 6f 04 	sts	0x046F, r1
    2090:	10 92 70 04 	sts	0x0470, r1
    2094:	10 92 71 04 	sts	0x0471, r1
    2098:	10 92 72 04 	sts	0x0472, r1
    209c:	10 92 73 04 	sts	0x0473, r1
    20a0:	10 92 74 04 	sts	0x0474, r1
    20a4:	10 92 75 04 	sts	0x0475, r1
    20a8:	10 92 76 04 	sts	0x0476, r1
    20ac:	10 92 77 04 	sts	0x0477, r1
    20b0:	10 92 78 04 	sts	0x0478, r1
    20b4:	10 92 79 04 	sts	0x0479, r1
    20b8:	08 95       	ret

000020ba <ATTINY_get_sensors>:
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	11 f0       	breq	.+4      	; 0x20cc <ATTINY_get_sensors+0x12>
    20c8:	00 e0       	ldi	r16, 0x00	; 0
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <ATTINY_get_sensors+0x5a>
    20cc:	87 e0       	ldi	r24, 0x07	; 7
    20ce:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	6a e0       	ldi	r22, 0x0A	; 10
    20d6:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	62 eb       	ldi	r22, 0xB2	; 178
    20de:	0e 94 37 05 	call	0xa6e	; 0xa6e <SPI_transmit>
    20e2:	18 ec       	ldi	r17, 0xC8	; 200
    20e4:	81 2f       	mov	r24, r17
    20e6:	8a 95       	dec	r24
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <ATTINY_get_sensors+0x2c>
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	0e 94 64 11 	call	0x22c8	; 0x22c8 <SPI_receive>
    20f2:	08 2f       	mov	r16, r24
    20f4:	81 2f       	mov	r24, r17
    20f6:	8a 95       	dec	r24
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <ATTINY_get_sensors+0x3c>
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	0e 94 64 11 	call	0x22c8	; 0x22c8 <SPI_receive>
    2102:	1a 95       	dec	r17
    2104:	f1 f7       	brne	.-4      	; 0x2102 <ATTINY_get_sensors+0x48>
    2106:	87 e0       	ldi	r24, 0x07	; 7
    2108:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
    210c:	88 e8       	ldi	r24, 0x88	; 136
    210e:	93 e1       	ldi	r25, 0x13	; 19
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <ATTINY_get_sensors+0x56>
    2114:	80 2f       	mov	r24, r16
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <TMRSRVC_insert>:
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	ec 01       	movw	r28, r24
    212e:	80 91 9f 04 	lds	r24, 0x049F
    2132:	88 23       	and	r24, r24
    2134:	39 f4       	brne	.+14     	; 0x2144 <TMRSRVC_insert+0x28>
    2136:	d0 93 a1 04 	sts	0x04A1, r29
    213a:	c0 93 a0 04 	sts	0x04A0, r28
    213e:	0e 94 1c 11 	call	0x2238	; 0x2238 <TMRSRVC_start>
    2142:	47 c0       	rjmp	.+142    	; 0x21d2 <TMRSRVC_insert+0xb6>
    2144:	c0 90 a0 04 	lds	r12, 0x04A0
    2148:	d0 90 a1 04 	lds	r13, 0x04A1
    214c:	00 e0       	ldi	r16, 0x00	; 0
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	ee 24       	eor	r14, r14
    2152:	ff 24       	eor	r15, r15
    2154:	37 c0       	rjmp	.+110    	; 0x21c4 <TMRSRVC_insert+0xa8>
    2156:	a8 81       	ld	r26, Y
    2158:	b9 81       	ldd	r27, Y+1	; 0x01
    215a:	fd 01       	movw	r30, r26
    215c:	64 81       	ldd	r22, Z+4	; 0x04
    215e:	75 81       	ldd	r23, Z+5	; 0x05
    2160:	f6 01       	movw	r30, r12
    2162:	40 81       	ld	r20, Z
    2164:	51 81       	ldd	r21, Z+1	; 0x01
    2166:	fa 01       	movw	r30, r20
    2168:	84 81       	ldd	r24, Z+4	; 0x04
    216a:	95 81       	ldd	r25, Z+5	; 0x05
    216c:	9b 01       	movw	r18, r22
    216e:	28 1b       	sub	r18, r24
    2170:	39 0b       	sbc	r19, r25
    2172:	37 ff       	sbrs	r19, 7
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <TMRSRVC_insert+0x78>
    2176:	86 1b       	sub	r24, r22
    2178:	97 0b       	sbc	r25, r23
    217a:	95 83       	std	Z+5, r25	; 0x05
    217c:	84 83       	std	Z+4, r24	; 0x04
    217e:	db 82       	std	Y+3, r13	; 0x03
    2180:	ca 82       	std	Y+2, r12	; 0x02
    2182:	01 2b       	or	r16, r17
    2184:	29 f4       	brne	.+10     	; 0x2190 <TMRSRVC_insert+0x74>
    2186:	d0 93 a1 04 	sts	0x04A1, r29
    218a:	c0 93 a0 04 	sts	0x04A0, r28
    218e:	21 c0       	rjmp	.+66     	; 0x21d2 <TMRSRVC_insert+0xb6>
    2190:	f7 01       	movw	r30, r14
    2192:	0c c0       	rjmp	.+24     	; 0x21ac <TMRSRVC_insert+0x90>
    2194:	f6 01       	movw	r30, r12
    2196:	82 81       	ldd	r24, Z+2	; 0x02
    2198:	93 81       	ldd	r25, Z+3	; 0x03
    219a:	21 15       	cp	r18, r1
    219c:	31 05       	cpc	r19, r1
    219e:	49 f4       	brne	.+18     	; 0x21b2 <TMRSRVC_insert+0x96>
    21a0:	fd 01       	movw	r30, r26
    21a2:	15 82       	std	Z+5, r1	; 0x05
    21a4:	14 82       	std	Z+4, r1	; 0x04
    21a6:	9b 83       	std	Y+3, r25	; 0x03
    21a8:	8a 83       	std	Y+2, r24	; 0x02
    21aa:	f6 01       	movw	r30, r12
    21ac:	d3 83       	std	Z+3, r29	; 0x03
    21ae:	c2 83       	std	Z+2, r28	; 0x02
    21b0:	10 c0       	rjmp	.+32     	; 0x21d2 <TMRSRVC_insert+0xb6>
    21b2:	fd 01       	movw	r30, r26
    21b4:	35 83       	std	Z+5, r19	; 0x05
    21b6:	24 83       	std	Z+4, r18	; 0x04
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	b9 f3       	breq	.-18     	; 0x21aa <TMRSRVC_insert+0x8e>
    21bc:	0f 5f       	subi	r16, 0xFF	; 255
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	76 01       	movw	r14, r12
    21c2:	6c 01       	movw	r12, r24
    21c4:	80 91 9f 04 	lds	r24, 0x049F
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	08 17       	cp	r16, r24
    21cc:	19 07       	cpc	r17, r25
    21ce:	18 f2       	brcs	.-122    	; 0x2156 <TMRSRVC_insert+0x3a>
    21d0:	ec cf       	rjmp	.-40     	; 0x21aa <TMRSRVC_insert+0x8e>
    21d2:	80 91 9f 04 	lds	r24, 0x049F
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	80 93 9f 04 	sts	0x049F, r24
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	cf 90       	pop	r12
    21ec:	08 95       	ret

000021ee <TMRSRVC_open>:
    21ee:	88 e0       	ldi	r24, 0x08	; 8
    21f0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    21f4:	88 23       	and	r24, r24
    21f6:	b9 f4       	brne	.+46     	; 0x2226 <TMRSRVC_open+0x38>
    21f8:	10 92 9f 04 	sts	0x049F, r1
    21fc:	10 92 a1 04 	sts	0x04A1, r1
    2200:	10 92 a0 04 	sts	0x04A0, r1
    2204:	10 92 20 04 	sts	0x0420, r1
    2208:	10 92 21 04 	sts	0x0421, r1
    220c:	80 e1       	ldi	r24, 0x10	; 16
    220e:	6f ef       	ldi	r22, 0xFF	; 255
    2210:	71 e1       	ldi	r23, 0x11	; 17
    2212:	0e 94 20 11 	call	0x2240	; 0x2240 <__ISR_attach>
    2216:	0e 94 06 12 	call	0x240c	; 0x240c <__TMRSRVC_init>
    221a:	0e 94 16 11 	call	0x222c	; 0x222c <__TMRSRVC_start>
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	0e 94 c6 09 	call	0x138c	; 0x138c <SYS_set_state>
    2226:	88 e0       	ldi	r24, 0x08	; 8
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	08 95       	ret

0000222c <__TMRSRVC_start>:
    222c:	ee e6       	ldi	r30, 0x6E	; 110
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	82 60       	ori	r24, 0x02	; 2
    2234:	80 83       	st	Z, r24
    2236:	08 95       	ret

00002238 <TMRSRVC_start>:
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 21 04 	sts	0x0421, r24
    223e:	08 95       	ret

00002240 <__ISR_attach>:
    2240:	80 32       	cpi	r24, 0x20	; 32
    2242:	18 f0       	brcs	.+6      	; 0x224a <__ISR_attach+0xa>
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	0a c0       	rjmp	.+20     	; 0x225e <__ISR_attach+0x1e>
    224a:	e8 2f       	mov	r30, r24
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	e0 54       	subi	r30, 0x40	; 64
    2254:	fc 4f       	sbci	r31, 0xFC	; 252
    2256:	20 81       	ld	r18, Z
    2258:	31 81       	ldd	r19, Z+1	; 0x01
    225a:	71 83       	std	Z+1, r23	; 0x01
    225c:	60 83       	st	Z, r22
    225e:	c9 01       	movw	r24, r18
    2260:	08 95       	ret

00002262 <__ATMEGA_init>:
    2262:	24 9a       	sbi	0x04, 4	; 4
    2264:	2c 9a       	sbi	0x05, 4	; 5
    2266:	08 95       	ret

00002268 <SPI_default_config>:
    2268:	83 e5       	ldi	r24, 0x53	; 83
    226a:	8c bd       	out	0x2c, r24	; 44
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	8d bd       	out	0x2d, r24	; 45
    2270:	8d e0       	ldi	r24, 0x0D	; 13
    2272:	8a 95       	dec	r24
    2274:	f1 f7       	brne	.-4      	; 0x2272 <SPI_default_config+0xa>
    2276:	08 95       	ret

00002278 <SPI_ATtiny0_config>:
    2278:	83 e5       	ldi	r24, 0x53	; 83
    227a:	8c bd       	out	0x2c, r24	; 44
    227c:	1d bc       	out	0x2d, r1	; 45
    227e:	84 ef       	ldi	r24, 0xF4	; 244
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <SPI_ATtiny0_config+0xa>
    2286:	08 95       	ret

00002288 <SPI_PSXC_config>:
    2288:	8f e7       	ldi	r24, 0x7F	; 127
    228a:	8c bd       	out	0x2c, r24	; 44
    228c:	1d bc       	out	0x2d, r1	; 45
    228e:	84 ef       	ldi	r24, 0xF4	; 244
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <SPI_PSXC_config+0xa>
    2296:	08 95       	ret

00002298 <SPI_LCD_config>:
    2298:	83 e5       	ldi	r24, 0x53	; 83
    229a:	8c bd       	out	0x2c, r24	; 44
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	8d bd       	out	0x2d, r24	; 45
    22a0:	8d e0       	ldi	r24, 0x0D	; 13
    22a2:	8a 95       	dec	r24
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <SPI_LCD_config+0xa>
    22a6:	08 95       	ret

000022a8 <SPI_FLASH_config>:
    22a8:	83 e5       	ldi	r24, 0x53	; 83
    22aa:	8c bd       	out	0x2c, r24	; 44
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8d bd       	out	0x2d, r24	; 45
    22b0:	84 ef       	ldi	r24, 0xF4	; 244
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <SPI_FLASH_config+0xc>
    22b8:	08 95       	ret

000022ba <__SPI_init>:
    22ba:	25 9a       	sbi	0x04, 5	; 4
    22bc:	26 98       	cbi	0x04, 6	; 4
    22be:	27 9a       	sbi	0x04, 7	; 4
    22c0:	20 9a       	sbi	0x04, 0	; 4
    22c2:	21 9a       	sbi	0x04, 1	; 4
    22c4:	22 9a       	sbi	0x04, 2	; 4
    22c6:	08 95       	ret

000022c8 <SPI_receive>:
    22c8:	1f 93       	push	r17
    22ca:	16 2f       	mov	r17, r22
    22cc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SPI_set_slave_addr>
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	11 f0       	breq	.+4      	; 0x22de <SPI_receive+0x16>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <SPI_receive+0x20>
    22de:	1e bd       	out	0x2e, r17	; 46
    22e0:	0d b4       	in	r0, 0x2d	; 45
    22e2:	07 fe       	sbrs	r0, 7
    22e4:	fd cf       	rjmp	.-6      	; 0x22e0 <SPI_receive+0x18>
    22e6:	8e b5       	in	r24, 0x2e	; 46
    22e8:	1f 91       	pop	r17
    22ea:	08 95       	ret

000022ec <__SPKR_close>:
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	29 f4       	brne	.+10     	; 0x22fa <__SPKR_close+0xe>
    22f0:	80 91 81 00 	lds	r24, 0x0081
    22f4:	8e 7f       	andi	r24, 0xFE	; 254
    22f6:	80 93 81 00 	sts	0x0081, r24
    22fa:	80 91 10 04 	lds	r24, 0x0410
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	31 f4       	brne	.+12     	; 0x230e <__SPKR_close+0x22>
    2302:	80 91 11 04 	lds	r24, 0x0411
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	11 f4       	brne	.+4      	; 0x230e <__SPKR_close+0x22>
    230a:	00 00       	nop
    230c:	08 95       	ret
    230e:	80 91 10 04 	lds	r24, 0x0410
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	21 f0       	breq	.+8      	; 0x231e <__SPKR_close+0x32>
    2316:	80 91 11 04 	lds	r24, 0x0411
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	11 f4       	brne	.+4      	; 0x2322 <__SPKR_close+0x36>
    231e:	5f 98       	cbi	0x0b, 7	; 11
    2320:	57 98       	cbi	0x0a, 7	; 10
    2322:	08 95       	ret

00002324 <STEPPER_set_decel_step_values>:
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	eb 01       	movw	r28, r22
    2332:	88 23       	and	r24, r24
    2334:	21 f0       	breq	.+8      	; 0x233e <STEPPER_set_decel_step_values+0x1a>
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	09 f0       	breq	.+2      	; 0x233c <STEPPER_set_decel_step_values+0x18>
    233a:	5a c0       	rjmp	.+180    	; 0x23f0 <STEPPER_set_decel_step_values+0xcc>
    233c:	2d c0       	rjmp	.+90     	; 0x2398 <STEPPER_set_decel_step_values+0x74>
    233e:	9a 01       	movw	r18, r20
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	ca 01       	movw	r24, r20
    2346:	b9 01       	movw	r22, r18
    2348:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__mulsi3>
    234c:	20 91 39 04 	lds	r18, 0x0439
    2350:	30 91 3a 04 	lds	r19, 0x043A
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	0e 94 0f 32 	call	0x641e	; 0x641e <__udivmodsi4>
    2360:	79 01       	movw	r14, r18
    2362:	8a 01       	movw	r16, r20
    2364:	a8 01       	movw	r20, r16
    2366:	97 01       	movw	r18, r14
    2368:	22 0f       	add	r18, r18
    236a:	33 1f       	adc	r19, r19
    236c:	44 1f       	adc	r20, r20
    236e:	55 1f       	adc	r21, r21
    2370:	ce 01       	movw	r24, r28
    2372:	a0 e0       	ldi	r26, 0x00	; 0
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	82 17       	cp	r24, r18
    2378:	93 07       	cpc	r25, r19
    237a:	a4 07       	cpc	r26, r20
    237c:	b5 07       	cpc	r27, r21
    237e:	28 f0       	brcs	.+10     	; 0x238a <STEPPER_set_decel_step_values+0x66>
    2380:	f0 92 46 04 	sts	0x0446, r15
    2384:	e0 92 45 04 	sts	0x0445, r14
    2388:	33 c0       	rjmp	.+102    	; 0x23f0 <STEPPER_set_decel_step_values+0xcc>
    238a:	d6 95       	lsr	r29
    238c:	c7 95       	ror	r28
    238e:	d0 93 46 04 	sts	0x0446, r29
    2392:	c0 93 45 04 	sts	0x0445, r28
    2396:	2c c0       	rjmp	.+88     	; 0x23f0 <STEPPER_set_decel_step_values+0xcc>
    2398:	9a 01       	movw	r18, r20
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	ca 01       	movw	r24, r20
    23a0:	b9 01       	movw	r22, r18
    23a2:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__mulsi3>
    23a6:	20 91 3b 04 	lds	r18, 0x043B
    23aa:	30 91 3c 04 	lds	r19, 0x043C
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	0e 94 0f 32 	call	0x641e	; 0x641e <__udivmodsi4>
    23ba:	79 01       	movw	r14, r18
    23bc:	8a 01       	movw	r16, r20
    23be:	a8 01       	movw	r20, r16
    23c0:	97 01       	movw	r18, r14
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	44 1f       	adc	r20, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	ce 01       	movw	r24, r28
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	a4 07       	cpc	r26, r20
    23d6:	b5 07       	cpc	r27, r21
    23d8:	28 f0       	brcs	.+10     	; 0x23e4 <STEPPER_set_decel_step_values+0xc0>
    23da:	f0 92 48 04 	sts	0x0448, r15
    23de:	e0 92 47 04 	sts	0x0447, r14
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <STEPPER_set_decel_step_values+0xcc>
    23e4:	d6 95       	lsr	r29
    23e6:	c7 95       	ror	r28
    23e8:	d0 93 48 04 	sts	0x0448, r29
    23ec:	c0 93 47 04 	sts	0x0447, r28
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	08 95       	ret

000023fe <__TIMER0_COMPA_vect>:
    23fe:	0e 94 0f 12 	call	0x241e	; 0x241e <TMRSRVC_tick>
    2402:	0e 94 4f 12 	call	0x249e	; 0x249e <STEPPER_clk>
    2406:	0e 94 28 12 	call	0x2450	; 0x2450 <SPKR_beep_clk>
    240a:	08 95       	ret

0000240c <__TMRSRVC_init>:
    240c:	84 b5       	in	r24, 0x24	; 36
    240e:	82 60       	ori	r24, 0x02	; 2
    2410:	84 bd       	out	0x24, r24	; 36
    2412:	85 b5       	in	r24, 0x25	; 37
    2414:	84 60       	ori	r24, 0x04	; 4
    2416:	85 bd       	out	0x25, r24	; 37
    2418:	8e e4       	ldi	r24, 0x4E	; 78
    241a:	87 bd       	out	0x27, r24	; 39
    241c:	08 95       	ret

0000241e <TMRSRVC_tick>:
    241e:	88 e0       	ldi	r24, 0x08	; 8
    2420:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    2424:	88 23       	and	r24, r24
    2426:	11 f4       	brne	.+4      	; 0x242c <TMRSRVC_tick+0xe>
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	08 95       	ret
    242c:	80 91 21 04 	lds	r24, 0x0421
    2430:	88 23       	and	r24, r24
    2432:	11 f4       	brne	.+4      	; 0x2438 <TMRSRVC_tick+0x1a>
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	08 95       	ret
    2438:	80 91 20 04 	lds	r24, 0x0420
    243c:	88 23       	and	r24, r24
    243e:	11 f0       	breq	.+4      	; 0x2444 <TMRSRVC_tick+0x26>
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	08 95       	ret
    2444:	0e 94 9c 14 	call	0x2938	; 0x2938 <TMRSRVC_process>
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	e1 f3       	breq	.-8      	; 0x2444 <TMRSRVC_tick+0x26>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	08 95       	ret

00002450 <SPKR_beep_clk>:
    2450:	80 91 11 04 	lds	r24, 0x0411
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	11 f5       	brne	.+68     	; 0x249c <SPKR_beep_clk+0x4c>
    2458:	80 91 1a 04 	lds	r24, 0x041A
    245c:	90 91 1b 04 	lds	r25, 0x041B
    2460:	20 91 1c 04 	lds	r18, 0x041C
    2464:	30 91 1d 04 	lds	r19, 0x041D
    2468:	28 0f       	add	r18, r24
    246a:	39 1f       	adc	r19, r25
    246c:	30 93 1b 04 	sts	0x041B, r19
    2470:	20 93 1a 04 	sts	0x041A, r18
    2474:	80 91 1a 04 	lds	r24, 0x041A
    2478:	90 91 1b 04 	lds	r25, 0x041B
    247c:	88 5e       	subi	r24, 0xE8	; 232
    247e:	93 40       	sbci	r25, 0x03	; 3
    2480:	6c f0       	brlt	.+26     	; 0x249c <SPKR_beep_clk+0x4c>
    2482:	8b b1       	in	r24, 0x0b	; 11
    2484:	80 58       	subi	r24, 0x80	; 128
    2486:	8b b9       	out	0x0b, r24	; 11
    2488:	80 91 1a 04 	lds	r24, 0x041A
    248c:	90 91 1b 04 	lds	r25, 0x041B
    2490:	88 5e       	subi	r24, 0xE8	; 232
    2492:	93 40       	sbci	r25, 0x03	; 3
    2494:	90 93 1b 04 	sts	0x041B, r25
    2498:	80 93 1a 04 	sts	0x041A, r24
    249c:	08 95       	ret

0000249e <STEPPER_clk>:
    249e:	87 e0       	ldi	r24, 0x07	; 7
    24a0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SYS_get_state>
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	09 f0       	breq	.+2      	; 0x24aa <STEPPER_clk+0xc>
    24a8:	aa c0       	rjmp	.+340    	; 0x25fe <STEPPER_clk+0x160>
    24aa:	80 91 39 04 	lds	r24, 0x0439
    24ae:	90 91 3a 04 	lds	r25, 0x043A
    24b2:	89 2b       	or	r24, r25
    24b4:	09 f1       	breq	.+66     	; 0x24f8 <STEPPER_clk+0x5a>
    24b6:	80 91 5d 04 	lds	r24, 0x045D
    24ba:	90 91 5e 04 	lds	r25, 0x045E
    24be:	20 91 39 04 	lds	r18, 0x0439
    24c2:	30 91 3a 04 	lds	r19, 0x043A
    24c6:	82 0f       	add	r24, r18
    24c8:	93 1f       	adc	r25, r19
    24ca:	90 93 5e 04 	sts	0x045E, r25
    24ce:	80 93 5d 04 	sts	0x045D, r24
    24d2:	80 91 5d 04 	lds	r24, 0x045D
    24d6:	90 91 5e 04 	lds	r25, 0x045E
    24da:	88 5e       	subi	r24, 0xE8	; 232
    24dc:	93 40       	sbci	r25, 0x03	; 3
    24de:	a4 f0       	brlt	.+40     	; 0x2508 <STEPPER_clk+0x6a>
    24e0:	80 91 5d 04 	lds	r24, 0x045D
    24e4:	90 91 5e 04 	lds	r25, 0x045E
    24e8:	88 5e       	subi	r24, 0xE8	; 232
    24ea:	93 40       	sbci	r25, 0x03	; 3
    24ec:	90 93 5e 04 	sts	0x045E, r25
    24f0:	80 93 5d 04 	sts	0x045D, r24
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	09 c0       	rjmp	.+18     	; 0x250a <STEPPER_clk+0x6c>
    24f8:	80 91 31 04 	lds	r24, 0x0431
    24fc:	90 91 32 04 	lds	r25, 0x0432
    2500:	90 93 36 04 	sts	0x0436, r25
    2504:	80 93 35 04 	sts	0x0435, r24
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	80 91 3b 04 	lds	r24, 0x043B
    250e:	90 91 3c 04 	lds	r25, 0x043C
    2512:	89 2b       	or	r24, r25
    2514:	09 f1       	breq	.+66     	; 0x2558 <STEPPER_clk+0xba>
    2516:	80 91 5f 04 	lds	r24, 0x045F
    251a:	90 91 60 04 	lds	r25, 0x0460
    251e:	20 91 3b 04 	lds	r18, 0x043B
    2522:	30 91 3c 04 	lds	r19, 0x043C
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	90 93 60 04 	sts	0x0460, r25
    252e:	80 93 5f 04 	sts	0x045F, r24
    2532:	80 91 5f 04 	lds	r24, 0x045F
    2536:	90 91 60 04 	lds	r25, 0x0460
    253a:	88 5e       	subi	r24, 0xE8	; 232
    253c:	93 40       	sbci	r25, 0x03	; 3
    253e:	a4 f0       	brlt	.+40     	; 0x2568 <STEPPER_clk+0xca>
    2540:	80 91 5f 04 	lds	r24, 0x045F
    2544:	90 91 60 04 	lds	r25, 0x0460
    2548:	88 5e       	subi	r24, 0xE8	; 232
    254a:	93 40       	sbci	r25, 0x03	; 3
    254c:	90 93 60 04 	sts	0x0460, r25
    2550:	80 93 5f 04 	sts	0x045F, r24
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	09 c0       	rjmp	.+18     	; 0x256a <STEPPER_clk+0xcc>
    2558:	80 91 33 04 	lds	r24, 0x0433
    255c:	90 91 34 04 	lds	r25, 0x0434
    2560:	90 93 38 04 	sts	0x0438, r25
    2564:	80 93 37 04 	sts	0x0437, r24
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	84 2f       	mov	r24, r20
    256c:	0e 94 00 13 	call	0x2600	; 0x2600 <STEPPER_process_accel>
    2570:	80 91 59 04 	lds	r24, 0x0459
    2574:	90 91 5a 04 	lds	r25, 0x045A
    2578:	20 91 35 04 	lds	r18, 0x0435
    257c:	30 91 36 04 	lds	r19, 0x0436
    2580:	28 0f       	add	r18, r24
    2582:	39 1f       	adc	r19, r25
    2584:	30 93 5a 04 	sts	0x045A, r19
    2588:	20 93 59 04 	sts	0x0459, r18
    258c:	80 91 59 04 	lds	r24, 0x0459
    2590:	90 91 5a 04 	lds	r25, 0x045A
    2594:	88 5e       	subi	r24, 0xE8	; 232
    2596:	93 40       	sbci	r25, 0x03	; 3
    2598:	14 f4       	brge	.+4      	; 0x259e <STEPPER_clk+0x100>
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	0b c0       	rjmp	.+22     	; 0x25b4 <STEPPER_clk+0x116>
    259e:	80 91 59 04 	lds	r24, 0x0459
    25a2:	90 91 5a 04 	lds	r25, 0x045A
    25a6:	88 5e       	subi	r24, 0xE8	; 232
    25a8:	93 40       	sbci	r25, 0x03	; 3
    25aa:	90 93 5a 04 	sts	0x045A, r25
    25ae:	80 93 59 04 	sts	0x0459, r24
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	80 91 5b 04 	lds	r24, 0x045B
    25b8:	90 91 5c 04 	lds	r25, 0x045C
    25bc:	20 91 37 04 	lds	r18, 0x0437
    25c0:	30 91 38 04 	lds	r19, 0x0438
    25c4:	28 0f       	add	r18, r24
    25c6:	39 1f       	adc	r19, r25
    25c8:	30 93 5c 04 	sts	0x045C, r19
    25cc:	20 93 5b 04 	sts	0x045B, r18
    25d0:	80 91 5b 04 	lds	r24, 0x045B
    25d4:	90 91 5c 04 	lds	r25, 0x045C
    25d8:	88 5e       	subi	r24, 0xE8	; 232
    25da:	93 40       	sbci	r25, 0x03	; 3
    25dc:	14 f4       	brge	.+4      	; 0x25e2 <STEPPER_clk+0x144>
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	0b c0       	rjmp	.+22     	; 0x25f8 <STEPPER_clk+0x15a>
    25e2:	80 91 5b 04 	lds	r24, 0x045B
    25e6:	90 91 5c 04 	lds	r25, 0x045C
    25ea:	88 5e       	subi	r24, 0xE8	; 232
    25ec:	93 40       	sbci	r25, 0x03	; 3
    25ee:	90 93 5c 04 	sts	0x045C, r25
    25f2:	80 93 5b 04 	sts	0x045B, r24
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	84 2f       	mov	r24, r20
    25fa:	0e 94 45 13 	call	0x268a	; 0x268a <STEPPER_process_run_mode>
    25fe:	08 95       	ret

00002600 <STEPPER_process_accel>:
    2600:	88 23       	and	r24, r24
    2602:	f1 f0       	breq	.+60     	; 0x2640 <STEPPER_process_accel+0x40>
    2604:	20 91 31 04 	lds	r18, 0x0431
    2608:	30 91 32 04 	lds	r19, 0x0432
    260c:	80 91 35 04 	lds	r24, 0x0435
    2610:	90 91 36 04 	lds	r25, 0x0436
    2614:	28 1b       	sub	r18, r24
    2616:	39 0b       	sbc	r19, r25
    2618:	12 16       	cp	r1, r18
    261a:	13 06       	cpc	r1, r19
    261c:	34 f4       	brge	.+12     	; 0x262a <STEPPER_process_accel+0x2a>
    261e:	80 91 35 04 	lds	r24, 0x0435
    2622:	90 91 36 04 	lds	r25, 0x0436
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	07 c0       	rjmp	.+14     	; 0x2638 <STEPPER_process_accel+0x38>
    262a:	23 2b       	or	r18, r19
    262c:	49 f0       	breq	.+18     	; 0x2640 <STEPPER_process_accel+0x40>
    262e:	80 91 35 04 	lds	r24, 0x0435
    2632:	90 91 36 04 	lds	r25, 0x0436
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	90 93 36 04 	sts	0x0436, r25
    263c:	80 93 35 04 	sts	0x0435, r24
    2640:	66 23       	and	r22, r22
    2642:	11 f1       	breq	.+68     	; 0x2688 <STEPPER_process_accel+0x88>
    2644:	20 91 33 04 	lds	r18, 0x0433
    2648:	30 91 34 04 	lds	r19, 0x0434
    264c:	80 91 37 04 	lds	r24, 0x0437
    2650:	90 91 38 04 	lds	r25, 0x0438
    2654:	28 1b       	sub	r18, r24
    2656:	39 0b       	sbc	r19, r25
    2658:	12 16       	cp	r1, r18
    265a:	13 06       	cpc	r1, r19
    265c:	54 f4       	brge	.+20     	; 0x2672 <STEPPER_process_accel+0x72>
    265e:	80 91 37 04 	lds	r24, 0x0437
    2662:	90 91 38 04 	lds	r25, 0x0438
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	90 93 38 04 	sts	0x0438, r25
    266c:	80 93 37 04 	sts	0x0437, r24
    2670:	08 95       	ret
    2672:	23 2b       	or	r18, r19
    2674:	49 f0       	breq	.+18     	; 0x2688 <STEPPER_process_accel+0x88>
    2676:	80 91 37 04 	lds	r24, 0x0437
    267a:	90 91 38 04 	lds	r25, 0x0438
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	90 93 38 04 	sts	0x0438, r25
    2684:	80 93 37 04 	sts	0x0437, r24
    2688:	08 95       	ret

0000268a <STEPPER_process_run_mode>:
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	18 2f       	mov	r17, r24
    2690:	06 2f       	mov	r16, r22
    2692:	80 91 65 04 	lds	r24, 0x0465
    2696:	88 23       	and	r24, r24
    2698:	09 f0       	breq	.+2      	; 0x269c <STEPPER_process_run_mode+0x12>
    269a:	e7 c0       	rjmp	.+462    	; 0x286a <STEPPER_process_run_mode+0x1e0>
    269c:	80 91 4d 04 	lds	r24, 0x044D
    26a0:	88 23       	and	r24, r24
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <STEPPER_process_run_mode+0x1c>
    26a4:	5a c0       	rjmp	.+180    	; 0x275a <STEPPER_process_run_mode+0xd0>
    26a6:	80 91 35 04 	lds	r24, 0x0435
    26aa:	90 91 36 04 	lds	r25, 0x0436
    26ae:	89 2b       	or	r24, r25
    26b0:	e9 f4       	brne	.+58     	; 0x26ec <STEPPER_process_run_mode+0x62>
    26b2:	80 91 22 04 	lds	r24, 0x0422
    26b6:	83 7e       	andi	r24, 0xE3	; 227
    26b8:	80 93 22 04 	sts	0x0422, r24
    26bc:	10 92 56 04 	sts	0x0456, r1
    26c0:	80 91 61 04 	lds	r24, 0x0461
    26c4:	88 23       	and	r24, r24
    26c6:	09 f4       	brne	.+2      	; 0x26ca <STEPPER_process_run_mode+0x40>
    26c8:	5d c0       	rjmp	.+186    	; 0x2784 <STEPPER_process_run_mode+0xfa>
    26ca:	60 91 4f 04 	lds	r22, 0x044F
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	0e 94 0b 09 	call	0x1216	; 0x1216 <STEPPER_stop>
    26d4:	e0 91 63 04 	lds	r30, 0x0463
    26d8:	f0 91 64 04 	lds	r31, 0x0464
    26dc:	30 97       	sbiw	r30, 0x00	; 0
    26de:	09 f4       	brne	.+2      	; 0x26e2 <STEPPER_process_run_mode+0x58>
    26e0:	51 c0       	rjmp	.+162    	; 0x2784 <STEPPER_process_run_mode+0xfa>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 83       	st	Z, r24
    26e6:	10 92 61 04 	sts	0x0461, r1
    26ea:	4c c0       	rjmp	.+152    	; 0x2784 <STEPPER_process_run_mode+0xfa>
    26ec:	80 91 2f 04 	lds	r24, 0x042F
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	41 f4       	brne	.+16     	; 0x2704 <STEPPER_process_run_mode+0x7a>
    26f4:	80 91 41 04 	lds	r24, 0x0441
    26f8:	90 91 42 04 	lds	r25, 0x0442
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	11 f4       	brne	.+4      	; 0x2704 <STEPPER_process_run_mode+0x7a>
    2700:	11 e0       	ldi	r17, 0x01	; 1
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <STEPPER_process_run_mode+0x7e>
    2704:	11 23       	and	r17, r17
    2706:	f1 f1       	breq	.+124    	; 0x2784 <STEPPER_process_run_mode+0xfa>
    2708:	e0 91 54 04 	lds	r30, 0x0454
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	ef 5f       	subi	r30, 0xFF	; 255
    2710:	fe 4f       	sbci	r31, 0xFE	; 254
    2712:	90 91 22 04 	lds	r25, 0x0422
    2716:	93 7e       	andi	r25, 0xE3	; 227
    2718:	80 81       	ld	r24, Z
    271a:	89 2b       	or	r24, r25
    271c:	80 93 22 04 	sts	0x0422, r24
    2720:	80 91 52 04 	lds	r24, 0x0452
    2724:	88 23       	and	r24, r24
    2726:	21 f4       	brne	.+8      	; 0x2730 <STEPPER_process_run_mode+0xa6>
    2728:	80 91 54 04 	lds	r24, 0x0454
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <STEPPER_process_run_mode+0xac>
    2730:	80 91 54 04 	lds	r24, 0x0454
    2734:	81 50       	subi	r24, 0x01	; 1
    2736:	80 93 54 04 	sts	0x0454, r24
    273a:	80 91 54 04 	lds	r24, 0x0454
    273e:	83 70       	andi	r24, 0x03	; 3
    2740:	80 93 54 04 	sts	0x0454, r24
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	80 93 56 04 	sts	0x0456, r24
    274a:	80 91 2f 04 	lds	r24, 0x042F
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	c9 f4       	brne	.+50     	; 0x2784 <STEPPER_process_run_mode+0xfa>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 48 14 	call	0x2890	; 0x2890 <STEPPER_process_step_mode>
    2758:	15 c0       	rjmp	.+42     	; 0x2784 <STEPPER_process_run_mode+0xfa>
    275a:	90 91 22 04 	lds	r25, 0x0422
    275e:	93 7e       	andi	r25, 0xE3	; 227
    2760:	90 93 22 04 	sts	0x0422, r25
    2764:	e0 91 54 04 	lds	r30, 0x0454
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	ef 5f       	subi	r30, 0xFF	; 255
    276c:	fe 4f       	sbci	r31, 0xFE	; 254
    276e:	80 81       	ld	r24, Z
    2770:	89 2b       	or	r24, r25
    2772:	80 93 22 04 	sts	0x0422, r24
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	80 93 56 04 	sts	0x0456, r24
    277c:	10 92 36 04 	sts	0x0436, r1
    2780:	10 92 35 04 	sts	0x0435, r1
    2784:	80 91 4e 04 	lds	r24, 0x044E
    2788:	88 23       	and	r24, r24
    278a:	09 f0       	breq	.+2      	; 0x278e <STEPPER_process_run_mode+0x104>
    278c:	59 c0       	rjmp	.+178    	; 0x2840 <STEPPER_process_run_mode+0x1b6>
    278e:	80 91 37 04 	lds	r24, 0x0437
    2792:	90 91 38 04 	lds	r25, 0x0438
    2796:	89 2b       	or	r24, r25
    2798:	e9 f4       	brne	.+58     	; 0x27d4 <STEPPER_process_run_mode+0x14a>
    279a:	80 91 22 04 	lds	r24, 0x0422
    279e:	8f 71       	andi	r24, 0x1F	; 31
    27a0:	80 93 22 04 	sts	0x0422, r24
    27a4:	10 92 57 04 	sts	0x0457, r1
    27a8:	80 91 62 04 	lds	r24, 0x0462
    27ac:	88 23       	and	r24, r24
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <STEPPER_process_run_mode+0x128>
    27b0:	5c c0       	rjmp	.+184    	; 0x286a <STEPPER_process_run_mode+0x1e0>
    27b2:	60 91 50 04 	lds	r22, 0x0450
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	0e 94 0b 09 	call	0x1216	; 0x1216 <STEPPER_stop>
    27bc:	e0 91 63 04 	lds	r30, 0x0463
    27c0:	f0 91 64 04 	lds	r31, 0x0464
    27c4:	30 97       	sbiw	r30, 0x00	; 0
    27c6:	09 f4       	brne	.+2      	; 0x27ca <STEPPER_process_run_mode+0x140>
    27c8:	50 c0       	rjmp	.+160    	; 0x286a <STEPPER_process_run_mode+0x1e0>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	81 83       	std	Z+1, r24	; 0x01
    27ce:	10 92 62 04 	sts	0x0462, r1
    27d2:	4b c0       	rjmp	.+150    	; 0x286a <STEPPER_process_run_mode+0x1e0>
    27d4:	80 91 30 04 	lds	r24, 0x0430
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	41 f4       	brne	.+16     	; 0x27ec <STEPPER_process_run_mode+0x162>
    27dc:	80 91 43 04 	lds	r24, 0x0443
    27e0:	90 91 44 04 	lds	r25, 0x0444
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	11 f4       	brne	.+4      	; 0x27ec <STEPPER_process_run_mode+0x162>
    27e8:	01 e0       	ldi	r16, 0x01	; 1
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <STEPPER_process_run_mode+0x166>
    27ec:	00 23       	and	r16, r16
    27ee:	e9 f1       	breq	.+122    	; 0x286a <STEPPER_process_run_mode+0x1e0>
    27f0:	e0 91 55 04 	lds	r30, 0x0455
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	eb 5f       	subi	r30, 0xFB	; 251
    27f8:	fe 4f       	sbci	r31, 0xFE	; 254
    27fa:	90 91 22 04 	lds	r25, 0x0422
    27fe:	9f 71       	andi	r25, 0x1F	; 31
    2800:	80 81       	ld	r24, Z
    2802:	89 2b       	or	r24, r25
    2804:	80 93 22 04 	sts	0x0422, r24
    2808:	80 91 53 04 	lds	r24, 0x0453
    280c:	88 23       	and	r24, r24
    280e:	21 f4       	brne	.+8      	; 0x2818 <STEPPER_process_run_mode+0x18e>
    2810:	80 91 55 04 	lds	r24, 0x0455
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	03 c0       	rjmp	.+6      	; 0x281e <STEPPER_process_run_mode+0x194>
    2818:	80 91 55 04 	lds	r24, 0x0455
    281c:	81 50       	subi	r24, 0x01	; 1
    281e:	80 93 55 04 	sts	0x0455, r24
    2822:	80 91 55 04 	lds	r24, 0x0455
    2826:	83 70       	andi	r24, 0x03	; 3
    2828:	80 93 55 04 	sts	0x0455, r24
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 93 57 04 	sts	0x0457, r24
    2832:	80 91 30 04 	lds	r24, 0x0430
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	c1 f4       	brne	.+48     	; 0x286a <STEPPER_process_run_mode+0x1e0>
    283a:	0e 94 48 14 	call	0x2890	; 0x2890 <STEPPER_process_step_mode>
    283e:	15 c0       	rjmp	.+42     	; 0x286a <STEPPER_process_run_mode+0x1e0>
    2840:	90 91 22 04 	lds	r25, 0x0422
    2844:	9f 71       	andi	r25, 0x1F	; 31
    2846:	90 93 22 04 	sts	0x0422, r25
    284a:	e0 91 55 04 	lds	r30, 0x0455
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	eb 5f       	subi	r30, 0xFB	; 251
    2852:	fe 4f       	sbci	r31, 0xFE	; 254
    2854:	80 81       	ld	r24, Z
    2856:	89 2b       	or	r24, r25
    2858:	80 93 22 04 	sts	0x0422, r24
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	80 93 57 04 	sts	0x0457, r24
    2862:	10 92 38 04 	sts	0x0438, r1
    2866:	10 92 37 04 	sts	0x0437, r1
    286a:	80 91 58 04 	lds	r24, 0x0458
    286e:	88 23       	and	r24, r24
    2870:	31 f4       	brne	.+12     	; 0x287e <STEPPER_process_run_mode+0x1f4>
    2872:	82 e2       	ldi	r24, 0x22	; 34
    2874:	94 e0       	ldi	r25, 0x04	; 4
    2876:	61 2f       	mov	r22, r17
    2878:	40 2f       	mov	r20, r16
    287a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <STEPPER_process_pwm>
    287e:	88 b1       	in	r24, 0x08	; 8
    2880:	83 70       	andi	r24, 0x03	; 3
    2882:	90 91 22 04 	lds	r25, 0x0422
    2886:	89 2b       	or	r24, r25
    2888:	88 b9       	out	0x08, r24	; 8
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	08 95       	ret

00002890 <STEPPER_process_step_mode>:
    2890:	88 23       	and	r24, r24
    2892:	21 f0       	breq	.+8      	; 0x289c <STEPPER_process_step_mode+0xc>
    2894:	81 30       	cpi	r24, 0x01	; 1
    2896:	09 f0       	breq	.+2      	; 0x289a <STEPPER_process_step_mode+0xa>
    2898:	4e c0       	rjmp	.+156    	; 0x2936 <STEPPER_process_step_mode+0xa6>
    289a:	27 c0       	rjmp	.+78     	; 0x28ea <STEPPER_process_step_mode+0x5a>
    289c:	80 91 41 04 	lds	r24, 0x0441
    28a0:	90 91 42 04 	lds	r25, 0x0442
    28a4:	89 2b       	or	r24, r25
    28a6:	49 f0       	breq	.+18     	; 0x28ba <STEPPER_process_step_mode+0x2a>
    28a8:	80 91 41 04 	lds	r24, 0x0441
    28ac:	90 91 42 04 	lds	r25, 0x0442
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	90 93 42 04 	sts	0x0442, r25
    28b6:	80 93 41 04 	sts	0x0441, r24
    28ba:	80 91 61 04 	lds	r24, 0x0461
    28be:	88 23       	and	r24, r24
    28c0:	d1 f5       	brne	.+116    	; 0x2936 <STEPPER_process_step_mode+0xa6>
    28c2:	20 91 41 04 	lds	r18, 0x0441
    28c6:	30 91 42 04 	lds	r19, 0x0442
    28ca:	80 91 45 04 	lds	r24, 0x0445
    28ce:	90 91 46 04 	lds	r25, 0x0446
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	79 f5       	brne	.+94     	; 0x2936 <STEPPER_process_step_mode+0xa6>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	80 93 61 04 	sts	0x0461, r24
    28e8:	08 95       	ret
    28ea:	80 91 43 04 	lds	r24, 0x0443
    28ee:	90 91 44 04 	lds	r25, 0x0444
    28f2:	89 2b       	or	r24, r25
    28f4:	49 f0       	breq	.+18     	; 0x2908 <STEPPER_process_step_mode+0x78>
    28f6:	80 91 43 04 	lds	r24, 0x0443
    28fa:	90 91 44 04 	lds	r25, 0x0444
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	90 93 44 04 	sts	0x0444, r25
    2904:	80 93 43 04 	sts	0x0443, r24
    2908:	80 91 62 04 	lds	r24, 0x0462
    290c:	88 23       	and	r24, r24
    290e:	99 f4       	brne	.+38     	; 0x2936 <STEPPER_process_step_mode+0xa6>
    2910:	20 91 43 04 	lds	r18, 0x0443
    2914:	30 91 44 04 	lds	r19, 0x0444
    2918:	80 91 47 04 	lds	r24, 0x0447
    291c:	90 91 48 04 	lds	r25, 0x0448
    2920:	28 17       	cp	r18, r24
    2922:	39 07       	cpc	r19, r25
    2924:	41 f4       	brne	.+16     	; 0x2936 <STEPPER_process_step_mode+0xa6>
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <STEPPER_set_speed>
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 62 04 	sts	0x0462, r24
    2936:	08 95       	ret

00002938 <TMRSRVC_process>:
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	80 91 9f 04 	lds	r24, 0x049F
    2946:	88 23       	and	r24, r24
    2948:	09 f4       	brne	.+2      	; 0x294c <TMRSRVC_process+0x14>
    294a:	59 c0       	rjmp	.+178    	; 0x29fe <TMRSRVC_process+0xc6>
    294c:	00 91 a0 04 	lds	r16, 0x04A0
    2950:	10 91 a1 04 	lds	r17, 0x04A1
    2954:	f8 01       	movw	r30, r16
    2956:	c0 81       	ld	r28, Z
    2958:	d1 81       	ldd	r29, Z+1	; 0x01
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	9d 81       	ldd	r25, Y+5	; 0x05
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9d 83       	std	Y+5, r25	; 0x05
    2962:	8c 83       	std	Y+4, r24	; 0x04
    2964:	18 16       	cp	r1, r24
    2966:	19 06       	cpc	r1, r25
    2968:	0c f4       	brge	.+2      	; 0x296c <TMRSRVC_process+0x34>
    296a:	49 c0       	rjmp	.+146    	; 0x29fe <TMRSRVC_process+0xc6>
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	80 ff       	sbrs	r24, 0
    2970:	05 c0       	rjmp	.+10     	; 0x297c <TMRSRVC_process+0x44>
    2972:	8e 81       	ldd	r24, Y+6	; 0x06
    2974:	88 23       	and	r24, r24
    2976:	11 f4       	brne	.+4      	; 0x297c <TMRSRVC_process+0x44>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	8e 83       	std	Y+6, r24	; 0x06
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	81 ff       	sbrs	r24, 1
    2980:	03 c0       	rjmp	.+6      	; 0x2988 <TMRSRVC_process+0x50>
    2982:	ef 81       	ldd	r30, Y+7	; 0x07
    2984:	f8 85       	ldd	r31, Y+8	; 0x08
    2986:	09 95       	icall
    2988:	80 91 9f 04 	lds	r24, 0x049F
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	a8 f0       	brcs	.+42     	; 0x29ba <TMRSRVC_process+0x82>
    2990:	f8 01       	movw	r30, r16
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	90 93 a1 04 	sts	0x04A1, r25
    299a:	80 93 a0 04 	sts	0x04A0, r24
    299e:	13 82       	std	Z+3, r1	; 0x03
    29a0:	12 82       	std	Z+2, r1	; 0x02
    29a2:	e0 91 00 00 	lds	r30, 0x0000
    29a6:	f0 91 01 00 	lds	r31, 0x0001
    29aa:	84 81       	ldd	r24, Z+4	; 0x04
    29ac:	95 81       	ldd	r25, Z+5	; 0x05
    29ae:	18 16       	cp	r1, r24
    29b0:	19 06       	cpc	r1, r25
    29b2:	3c f0       	brlt	.+14     	; 0x29c2 <TMRSRVC_process+0x8a>
    29b4:	ff 24       	eor	r15, r15
    29b6:	f3 94       	inc	r15
    29b8:	05 c0       	rjmp	.+10     	; 0x29c4 <TMRSRVC_process+0x8c>
    29ba:	10 92 a1 04 	sts	0x04A1, r1
    29be:	10 92 a0 04 	sts	0x04A0, r1
    29c2:	ff 24       	eor	r15, r15
    29c4:	80 91 9f 04 	lds	r24, 0x049F
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	80 93 9f 04 	sts	0x049F, r24
    29ce:	80 91 9f 04 	lds	r24, 0x049F
    29d2:	88 23       	and	r24, r24
    29d4:	11 f4       	brne	.+4      	; 0x29da <TMRSRVC_process+0xa2>
    29d6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <TMRSRVC_stop>
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	82 ff       	sbrs	r24, 2
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <TMRSRVC_process+0xb8>
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	9d 83       	std	Y+5, r25	; 0x05
    29e6:	8c 83       	std	Y+4, r24	; 0x04
    29e8:	c8 01       	movw	r24, r16
    29ea:	0e 94 8e 10 	call	0x211c	; 0x211c <TMRSRVC_insert>
    29ee:	08 c0       	rjmp	.+16     	; 0x2a00 <TMRSRVC_process+0xc8>
    29f0:	c8 01       	movw	r24, r16
    29f2:	0e 94 2e 33 	call	0x665c	; 0x665c <free>
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	8f 7e       	andi	r24, 0xEF	; 239
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	01 c0       	rjmp	.+2      	; 0x2a00 <TMRSRVC_process+0xc8>
    29fe:	ff 24       	eor	r15, r15
    2a00:	8f 2d       	mov	r24, r15
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	08 95       	ret

00002a0e <TMRSRVC_stop>:
    2a0e:	10 92 21 04 	sts	0x0421, r1
    2a12:	08 95       	ret

00002a14 <STEPPER_process_pwm>:
    2a14:	fc 01       	movw	r30, r24
    2a16:	80 91 56 04 	lds	r24, 0x0456
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	69 f4       	brne	.+26     	; 0x2a38 <STEPPER_process_pwm+0x24>
    2a1e:	80 91 26 04 	lds	r24, 0x0426
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	89 27       	eor	r24, r25
    2a26:	80 93 26 04 	sts	0x0426, r24
    2a2a:	88 23       	and	r24, r24
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <STEPPER_process_pwm+0x1c>
    2a2e:	3e c0       	rjmp	.+124    	; 0x2aac <STEPPER_process_pwm+0x98>
    2a30:	80 81       	ld	r24, Z
    2a32:	83 7e       	andi	r24, 0xE3	; 227
    2a34:	80 83       	st	Z, r24
    2a36:	3a c0       	rjmp	.+116    	; 0x2aac <STEPPER_process_pwm+0x98>
    2a38:	80 91 35 04 	lds	r24, 0x0435
    2a3c:	90 91 36 04 	lds	r25, 0x0436
    2a40:	c3 97       	sbiw	r24, 0x33	; 51
    2a42:	a4 f5       	brge	.+104    	; 0x2aac <STEPPER_process_pwm+0x98>
    2a44:	66 23       	and	r22, r22
    2a46:	d1 f0       	breq	.+52     	; 0x2a7c <STEPPER_process_pwm+0x68>
    2a48:	20 91 35 04 	lds	r18, 0x0435
    2a4c:	30 91 36 04 	lds	r19, 0x0436
    2a50:	80 e6       	ldi	r24, 0x60	; 96
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	bc 01       	movw	r22, r24
    2a56:	26 9f       	mul	r18, r22
    2a58:	c0 01       	movw	r24, r0
    2a5a:	27 9f       	mul	r18, r23
    2a5c:	90 0d       	add	r25, r0
    2a5e:	36 9f       	mul	r19, r22
    2a60:	90 0d       	add	r25, r0
    2a62:	11 24       	eor	r1, r1
    2a64:	88 0f       	add	r24, r24
    2a66:	89 2f       	mov	r24, r25
    2a68:	88 1f       	adc	r24, r24
    2a6a:	99 0b       	sbc	r25, r25
    2a6c:	90 93 4a 04 	sts	0x044A, r25
    2a70:	80 93 49 04 	sts	0x0449, r24
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	80 93 24 04 	sts	0x0424, r24
    2a7a:	18 c0       	rjmp	.+48     	; 0x2aac <STEPPER_process_pwm+0x98>
    2a7c:	80 91 24 04 	lds	r24, 0x0424
    2a80:	88 23       	and	r24, r24
    2a82:	a1 f0       	breq	.+40     	; 0x2aac <STEPPER_process_pwm+0x98>
    2a84:	80 91 49 04 	lds	r24, 0x0449
    2a88:	90 91 4a 04 	lds	r25, 0x044A
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	90 93 4a 04 	sts	0x044A, r25
    2a92:	80 93 49 04 	sts	0x0449, r24
    2a96:	80 91 49 04 	lds	r24, 0x0449
    2a9a:	90 91 4a 04 	lds	r25, 0x044A
    2a9e:	89 2b       	or	r24, r25
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <STEPPER_process_pwm+0x98>
    2aa2:	80 81       	ld	r24, Z
    2aa4:	83 7e       	andi	r24, 0xE3	; 227
    2aa6:	80 83       	st	Z, r24
    2aa8:	10 92 24 04 	sts	0x0424, r1
    2aac:	80 91 57 04 	lds	r24, 0x0457
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	69 f4       	brne	.+26     	; 0x2ace <STEPPER_process_pwm+0xba>
    2ab4:	80 91 25 04 	lds	r24, 0x0425
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	89 27       	eor	r24, r25
    2abc:	80 93 25 04 	sts	0x0425, r24
    2ac0:	88 23       	and	r24, r24
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <STEPPER_process_pwm+0xb2>
    2ac4:	3e c0       	rjmp	.+124    	; 0x2b42 <STEPPER_process_pwm+0x12e>
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8f 71       	andi	r24, 0x1F	; 31
    2aca:	80 83       	st	Z, r24
    2acc:	08 95       	ret
    2ace:	80 91 37 04 	lds	r24, 0x0437
    2ad2:	90 91 38 04 	lds	r25, 0x0438
    2ad6:	c3 97       	sbiw	r24, 0x33	; 51
    2ad8:	a4 f5       	brge	.+104    	; 0x2b42 <STEPPER_process_pwm+0x12e>
    2ada:	44 23       	and	r20, r20
    2adc:	d1 f0       	breq	.+52     	; 0x2b12 <STEPPER_process_pwm+0xfe>
    2ade:	20 91 37 04 	lds	r18, 0x0437
    2ae2:	30 91 38 04 	lds	r19, 0x0438
    2ae6:	80 e6       	ldi	r24, 0x60	; 96
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	ac 01       	movw	r20, r24
    2aec:	24 9f       	mul	r18, r20
    2aee:	c0 01       	movw	r24, r0
    2af0:	25 9f       	mul	r18, r21
    2af2:	90 0d       	add	r25, r0
    2af4:	34 9f       	mul	r19, r20
    2af6:	90 0d       	add	r25, r0
    2af8:	11 24       	eor	r1, r1
    2afa:	88 0f       	add	r24, r24
    2afc:	89 2f       	mov	r24, r25
    2afe:	88 1f       	adc	r24, r24
    2b00:	99 0b       	sbc	r25, r25
    2b02:	90 93 4c 04 	sts	0x044C, r25
    2b06:	80 93 4b 04 	sts	0x044B, r24
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	80 93 23 04 	sts	0x0423, r24
    2b10:	08 95       	ret
    2b12:	80 91 23 04 	lds	r24, 0x0423
    2b16:	88 23       	and	r24, r24
    2b18:	a1 f0       	breq	.+40     	; 0x2b42 <STEPPER_process_pwm+0x12e>
    2b1a:	80 91 4b 04 	lds	r24, 0x044B
    2b1e:	90 91 4c 04 	lds	r25, 0x044C
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	90 93 4c 04 	sts	0x044C, r25
    2b28:	80 93 4b 04 	sts	0x044B, r24
    2b2c:	80 91 4b 04 	lds	r24, 0x044B
    2b30:	90 91 4c 04 	lds	r25, 0x044C
    2b34:	89 2b       	or	r24, r25
    2b36:	29 f4       	brne	.+10     	; 0x2b42 <STEPPER_process_pwm+0x12e>
    2b38:	80 81       	ld	r24, Z
    2b3a:	8f 71       	andi	r24, 0x1F	; 31
    2b3c:	80 83       	st	Z, r24
    2b3e:	10 92 23 04 	sts	0x0423, r1
    2b42:	08 95       	ret

00002b44 <pseudo_Stepper_Step>:
void pseudo_Stepper_Step(float Right_Wheel_Speed, float Left_Wheel_Speed, float Duration){
    2b44:	4f 92       	push	r4
    2b46:	5f 92       	push	r5
    2b48:	6f 92       	push	r6
    2b4a:	7f 92       	push	r7
    2b4c:	8f 92       	push	r8
    2b4e:	9f 92       	push	r9
    2b50:	af 92       	push	r10
    2b52:	bf 92       	push	r11
    2b54:	cf 92       	push	r12
    2b56:	df 92       	push	r13
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <pseudo_Stepper_Step+0x22>
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <pseudo_Stepper_Step+0x24>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	4b 01       	movw	r8, r22
    2b6e:	5c 01       	movw	r10, r24
    2b70:	29 01       	movw	r4, r18
    2b72:	3a 01       	movw	r6, r20
    2b74:	67 01       	movw	r12, r14
    2b76:	78 01       	movw	r14, r16
	STEPPER_open();
    2b78:	0e 94 a3 07 	call	0xf46	; 0xf46 <STEPPER_open>
	STEPPER_move_stwt(STEPPER_BOTH,
    2b7c:	c3 01       	movw	r24, r6
    2b7e:	b2 01       	movw	r22, r4
    2b80:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    2b84:	69 83       	std	Y+1, r22	; 0x01
    2b86:	7a 83       	std	Y+2, r23	; 0x02
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	a7 01       	movw	r20, r14
    2b8e:	96 01       	movw	r18, r12
    2b90:	c3 01       	movw	r24, r6
    2b92:	b2 01       	movw	r22, r4
    2b94:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    2b98:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    2b9c:	2b 01       	movw	r4, r22
    2b9e:	3c 01       	movw	r6, r24
    2ba0:	1f 92       	push	r1
    2ba2:	1f 92       	push	r1
    2ba4:	1f 92       	push	r1
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	8f 93       	push	r24
    2baa:	80 e9       	ldi	r24, 0x90	; 144
    2bac:	8f 93       	push	r24
    2bae:	c5 01       	movw	r24, r10
    2bb0:	b4 01       	movw	r22, r8
    2bb2:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    2bb6:	7f 93       	push	r23
    2bb8:	6f 93       	push	r22
    2bba:	a7 01       	movw	r20, r14
    2bbc:	96 01       	movw	r18, r12
    2bbe:	c5 01       	movw	r24, r10
    2bc0:	b4 01       	movw	r22, r8
    2bc2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    2bc6:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    2bca:	7f 93       	push	r23
    2bcc:	6f 93       	push	r22
    2bce:	81 2c       	mov	r8, r1
    2bd0:	a1 2c       	mov	r10, r1
    2bd2:	b1 2c       	mov	r11, r1
    2bd4:	c1 2c       	mov	r12, r1
    2bd6:	0f 2e       	mov	r0, r31
    2bd8:	f0 e9       	ldi	r31, 0x90	; 144
    2bda:	ef 2e       	mov	r14, r31
    2bdc:	ff 24       	eor	r15, r15
    2bde:	f3 94       	inc	r15
    2be0:	f0 2d       	mov	r31, r0
    2be2:	09 81       	ldd	r16, Y+1	; 0x01
    2be4:	1a 81       	ldd	r17, Y+2	; 0x02
    2be6:	92 01       	movw	r18, r4
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
			STEPPER_FWD, (Left_Wheel_Speed*Duration), Left_Wheel_Speed, 400, STEPPER_BRK_OFF,	//Left wheel
			STEPPER_FWD, (Right_Wheel_Speed*Duration), Right_Wheel_Speed, 400, STEPPER_BRK_OFF);	// Right wheel
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	ff 90       	pop	r15
    2c0e:	ef 90       	pop	r14
    2c10:	df 90       	pop	r13
    2c12:	cf 90       	pop	r12
    2c14:	bf 90       	pop	r11
    2c16:	af 90       	pop	r10
    2c18:	9f 90       	pop	r9
    2c1a:	8f 90       	pop	r8
    2c1c:	7f 90       	pop	r7
    2c1e:	6f 90       	pop	r6
    2c20:	5f 90       	pop	r5
    2c22:	4f 90       	pop	r4
    2c24:	08 95       	ret

00002c26 <Tar_vs_Cur_Angle>:

float Tar_vs_Cur_Angle(int Tar_X, int Tar_Y, int X, int Y){
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	8b 01       	movw	r16, r22
    2c38:	e9 01       	movw	r28, r18
	int deltaX, deltaY, Angle;
	deltaX = X - Tar_X;
    2c3a:	ba 01       	movw	r22, r20
    2c3c:	68 1b       	sub	r22, r24
    2c3e:	79 0b       	sbc	r23, r25
	deltaY = Y - Tar_Y;
	Angle = atan2(deltaY,deltaX)*180/M_PI;
    2c40:	88 27       	eor	r24, r24
    2c42:	77 fd       	sbrc	r23, 7
    2c44:	80 95       	com	r24
    2c46:	98 2f       	mov	r25, r24
    2c48:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__floatsisf>
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
}

float Tar_vs_Cur_Angle(int Tar_X, int Tar_Y, int X, int Y){
	int deltaX, deltaY, Angle;
	deltaX = X - Tar_X;
	deltaY = Y - Tar_Y;
    2c50:	be 01       	movw	r22, r28
    2c52:	60 1b       	sub	r22, r16
    2c54:	71 0b       	sbc	r23, r17
	Angle = atan2(deltaY,deltaX)*180/M_PI;
    2c56:	88 27       	eor	r24, r24
    2c58:	77 fd       	sbrc	r23, 7
    2c5a:	80 95       	com	r24
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__floatsisf>
    2c62:	a7 01       	movw	r20, r14
    2c64:	96 01       	movw	r18, r12
    2c66:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <atan2>
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	44 e3       	ldi	r20, 0x34	; 52
    2c70:	53 e4       	ldi	r21, 0x43	; 67
    2c72:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    2c76:	2b ed       	ldi	r18, 0xDB	; 219
    2c78:	3f e0       	ldi	r19, 0x0F	; 15
    2c7a:	49 e4       	ldi	r20, 0x49	; 73
    2c7c:	50 e4       	ldi	r21, 0x40	; 64
    2c7e:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    2c82:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
	return Angle;
    2c86:	88 27       	eor	r24, r24
    2c88:	77 fd       	sbrc	r23, 7
    2c8a:	80 95       	com	r24
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__floatsisf>
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	08 95       	ret

00002ca4 <Random_Wanderer>:
// Alexandre van der Ven de Freitas
// Peter Richard Olejnik
// December 18, 2014

// Random wanderer function
void Random_Wanderer(){
    2ca4:	8f 92       	push	r8
    2ca6:	af 92       	push	r10
    2ca8:	bf 92       	push	r11
    2caa:	cf 92       	push	r12
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	0f 93       	push	r16
    2cb2:	1f 93       	push	r17
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
	char RightWheelSpeed;
	char LeftWheelSpeed;
	
	// Randomly select speed of wheels
	RightWheelSpeed = rand() % 201;
    2cb8:	0e 94 0b 34 	call	0x6816	; 0x6816 <rand>
    2cbc:	ec 01       	movw	r28, r24
	LeftWheelSpeed = rand() % 201;
    2cbe:	0e 94 0b 34 	call	0x6816	; 0x6816 <rand>
    2cc2:	29 ec       	ldi	r18, 0xC9	; 201
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
    2ccc:	8c 01       	movw	r16, r24
    2cce:	11 27       	eor	r17, r17

	STEPPER_move_rn(STEPPER_BOTH,
    2cd0:	1f 92       	push	r1
    2cd2:	1f 92       	push	r1
    2cd4:	1f 92       	push	r1
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	8f 93       	push	r24
    2cda:	80 e9       	ldi	r24, 0x90	; 144
    2cdc:	8f 93       	push	r24
void Random_Wanderer(){
	char RightWheelSpeed;
	char LeftWheelSpeed;
	
	// Randomly select speed of wheels
	RightWheelSpeed = rand() % 201;
    2cde:	ce 01       	movw	r24, r28
    2ce0:	b9 01       	movw	r22, r18
    2ce2:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
    2ce6:	99 27       	eor	r25, r25
	LeftWheelSpeed = rand() % 201;

	STEPPER_move_rn(STEPPER_BOTH,
    2ce8:	9f 93       	push	r25
    2cea:	8f 93       	push	r24
    2cec:	1f 92       	push	r1
    2cee:	1f 92       	push	r1
    2cf0:	81 2c       	mov	r8, r1
    2cf2:	a1 2c       	mov	r10, r1
    2cf4:	b1 2c       	mov	r11, r1
    2cf6:	c1 2c       	mov	r12, r1
    2cf8:	0f 2e       	mov	r0, r31
    2cfa:	f0 e9       	ldi	r31, 0x90	; 144
    2cfc:	ef 2e       	mov	r14, r31
    2cfe:	ff 24       	eor	r15, r15
    2d00:	f3 94       	inc	r15
    2d02:	f0 2d       	mov	r31, r0
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	62 e0       	ldi	r22, 0x02	; 2
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
		STEPPER_FWD, LeftWheelSpeed, 400,	//Left
		STEPPER_FWD, RightWheelSpeed, 400);	//Right
	TMRSRVC_delay(500); // 0.5 Sec duration
    2d12:	84 ef       	ldi	r24, 0xF4	; 244
    2d14:	91 e0       	ldi	r25, 0x01	; 1
    2d16:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
    2d1a:	8d b7       	in	r24, 0x3d	; 61
    2d1c:	9e b7       	in	r25, 0x3e	; 62
    2d1e:	09 96       	adiw	r24, 0x09	; 9
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	9e bf       	out	0x3e, r25	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	8d bf       	out	0x3d, r24	; 61
	}
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	cf 90       	pop	r12
    2d38:	bf 90       	pop	r11
    2d3a:	af 90       	pop	r10
    2d3c:	8f 90       	pop	r8
    2d3e:	08 95       	ret

00002d40 <getLeftIR>:
	//float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	0e 94 a1 03 	call	0x742	; 0x742 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
    2d4c:	0e 94 84 03 	call	0x708	; 0x708 <ADC_sample>
	//LCD_printf( "ADC: %i\n",adcsample);
	// Convert to meaningful voltage value.
	//voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
    2d50:	bc 01       	movw	r22, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__floatunsisf>
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 ea       	ldi	r20, 0xA0	; 160
    2d60:	50 e4       	ldi	r21, 0x40	; 64
    2d62:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    2d66:	9b 01       	movw	r18, r22
    2d68:	ac 01       	movw	r20, r24
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	70 e2       	ldi	r23, 0x20	; 32
    2d6e:	86 e3       	ldi	r24, 0x36	; 54
    2d70:	95 e4       	ldi	r25, 0x45	; 69
    2d72:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
	//Convert distance to inches
	dist = distance*0.3937;
    2d82:	2c e0       	ldi	r18, 0x0C	; 12
    2d84:	33 e9       	ldi	r19, 0x93	; 147
    2d86:	49 ec       	ldi	r20, 0xC9	; 201
    2d88:	5e e3       	ldi	r21, 0x3E	; 62
    2d8a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
	return dist;
}
    2d8e:	08 95       	ret

00002d90 <getRightIR>:
	//float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	0e 94 a1 03 	call	0x742	; 0x742 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
    2d9c:	0e 94 84 03 	call	0x708	; 0x708 <ADC_sample>
	// Convert to meaningful voltage value.
	//voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
    2da0:	bc 01       	movw	r22, r24
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__floatunsisf>
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 ea       	ldi	r20, 0xA0	; 160
    2db0:	50 e4       	ldi	r21, 0x40	; 64
    2db2:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    2db6:	9b 01       	movw	r18, r22
    2db8:	ac 01       	movw	r20, r24
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e2       	ldi	r23, 0x20	; 32
    2dbe:	86 e3       	ldi	r24, 0x36	; 54
    2dc0:	95 e4       	ldi	r25, 0x45	; 69
    2dc2:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
	//Convert distance to inches
	dist = distance*0.3937;
    2dd2:	2c e0       	ldi	r18, 0x0C	; 12
    2dd4:	33 e9       	ldi	r19, 0x93	; 147
    2dd6:	49 ec       	ldi	r20, 0xC9	; 201
    2dd8:	5e e3       	ldi	r21, 0x3E	; 62
    2dda:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
	return dist;
}
    2dde:	08 95       	ret

00002de0 <getFrontIR>:
	//float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel(IRFRONT_CHAN);
    2de6:	87 e0       	ldi	r24, 0x07	; 7
    2de8:	0e 94 a1 03 	call	0x742	; 0x742 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
    2dec:	0e 94 84 03 	call	0x708	; 0x708 <ADC_sample>
	// Convert to meaningful voltage value.
	//voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
    2df0:	bc 01       	movw	r22, r24
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 94 65 2b 	call	0x56ca	; 0x56ca <__floatunsisf>
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 ea       	ldi	r20, 0xA0	; 160
    2e00:	50 e4       	ldi	r21, 0x40	; 64
    2e02:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    2e06:	9b 01       	movw	r18, r22
    2e08:	ac 01       	movw	r20, r24
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e2       	ldi	r23, 0x20	; 32
    2e0e:	86 e3       	ldi	r24, 0x36	; 54
    2e10:	95 e4       	ldi	r25, 0x45	; 69
    2e12:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e8       	ldi	r20, 0x80	; 128
    2e1c:	5f e3       	ldi	r21, 0x3F	; 63
    2e1e:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
	//Convert distance to inches
	dist = distance*0.3937;
    2e22:	2c e0       	ldi	r18, 0x0C	; 12
    2e24:	33 e9       	ldi	r19, 0x93	; 147
    2e26:	49 ec       	ldi	r20, 0xC9	; 201
    2e28:	5e e3       	ldi	r21, 0x3E	; 62
    2e2a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
	return dist;
}
    2e2e:	08 95       	ret

00002e30 <moveForward>:
float xo = 0;
float yo = 0;
short thetao = 0;

// Moves the robot forward for a given number of steps.
void moveForward(int steps, int speed){
    2e30:	8f 92       	push	r8
    2e32:	af 92       	push	r10
    2e34:	bf 92       	push	r11
    2e36:	cf 92       	push	r12
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	d8 2f       	mov	r29, r24
    2e46:	c9 2f       	mov	r28, r25
    2e48:	06 2f       	mov	r16, r22
    2e4a:	17 2f       	mov	r17, r23
	// Performs the same error detection procedure for the Stepper subsystem as it was performed with ATTINY.
	SUBSYS_OPENSTAT openStepper;
	
	// Stepper subsystem is opened.
	openStepper = STEPPER_open();
    2e4c:	0e 94 a3 07 	call	0xf46	; 0xf46 <STEPPER_open>
	
	// Displays an error message if the returned value for the opened stepper subsystem is unexpected.
	if (openStepper.state != SUBSYS_OPEN){
    2e50:	91 30       	cpi	r25, 0x01	; 1
    2e52:	41 f0       	breq	.+16     	; 0x2e64 <moveForward+0x34>
		LCD_printf("\nError when opening STEPPER subsystem!");
    2e54:	4f eb       	ldi	r20, 0xBF	; 191
    2e56:	51 e0       	ldi	r21, 0x01	; 1
    2e58:	5f 93       	push	r21
    2e5a:	4f 93       	push	r20
    2e5c:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
	}
	
	// Moving both wheels forward.
	STEPPER_move_stwt(STEPPER_BOTH,
    2e64:	1f 92       	push	r1
    2e66:	1f 92       	push	r1
    2e68:	1f 92       	push	r1
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	8f 93       	push	r24
    2e6e:	80 e9       	ldi	r24, 0x90	; 144
    2e70:	8f 93       	push	r24
    2e72:	1f 93       	push	r17
    2e74:	0f 93       	push	r16
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	81 2c       	mov	r8, r1
    2e7c:	a1 2c       	mov	r10, r1
    2e7e:	b1 2c       	mov	r11, r1
    2e80:	c1 2c       	mov	r12, r1
    2e82:	0f 2e       	mov	r0, r31
    2e84:	f0 e9       	ldi	r31, 0x90	; 144
    2e86:	ef 2e       	mov	r14, r31
    2e88:	ff 24       	eor	r15, r15
    2e8a:	f3 94       	inc	r15
    2e8c:	f0 2d       	mov	r31, r0
    2e8e:	2d 2f       	mov	r18, r29
    2e90:	3c 2f       	mov	r19, r28
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	62 e0       	ldi	r22, 0x02	; 2
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
    2e9c:	8d b7       	in	r24, 0x3d	; 61
    2e9e:	9e b7       	in	r25, 0x3e	; 62
    2ea0:	09 96       	adiw	r24, 0x09	; 9
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	9e bf       	out	0x3e, r25	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	8d bf       	out	0x3d, r24	; 61
		STEPPER_FWD, steps, speed, 400, STEPPER_BRK_OFF,	//Left wheel
		STEPPER_FWD, steps, speed, 400, STEPPER_BRK_OFF);	//Right wheel
}
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	cf 90       	pop	r12
    2eba:	bf 90       	pop	r11
    2ebc:	af 90       	pop	r10
    2ebe:	8f 90       	pop	r8
    2ec0:	08 95       	ret

00002ec2 <sTurnLeft>:
	yo = y;
	thetao = theta;
}

// Given an angle and a speed, this function makes the robot turn/spin to the left.
void sTurnLeft(int angle, int speed){
    2ec2:	8f 92       	push	r8
    2ec4:	af 92       	push	r10
    2ec6:	bf 92       	push	r11
    2ec8:	cf 92       	push	r12
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	ec 01       	movw	r28, r24
    2ed8:	06 2f       	mov	r16, r22
    2eda:	17 2f       	mov	r17, r23
	
	// Performs the same error detection procedure for the Stepper subsystem as it was performed with ATTINY.
	SUBSYS_OPENSTAT openStepper;
	
	// Stepper subsystem is opened.
	openStepper = STEPPER_open();
    2edc:	0e 94 a3 07 	call	0xf46	; 0xf46 <STEPPER_open>
	
	// Displays an error message if the returned value for the opened stepper subsystem is unexpected.
	if (openStepper.state != SUBSYS_OPEN){
    2ee0:	91 30       	cpi	r25, 0x01	; 1
    2ee2:	41 f0       	breq	.+16     	; 0x2ef4 <sTurnLeft+0x32>
		LCD_printf("\nError when opening STEPPER subsystem!");
    2ee4:	8f eb       	ldi	r24, 0xBF	; 191
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	9f 93       	push	r25
    2eea:	8f 93       	push	r24
    2eec:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
	}
	
	steps = angle*130/90;
    2ef4:	22 e8       	ldi	r18, 0x82	; 130
    2ef6:	2c 9f       	mul	r18, r28
    2ef8:	c0 01       	movw	r24, r0
    2efa:	2d 9f       	mul	r18, r29
    2efc:	90 0d       	add	r25, r0
    2efe:	11 24       	eor	r1, r1
    2f00:	6a e5       	ldi	r22, 0x5A	; 90
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
    2f08:	26 2f       	mov	r18, r22
    2f0a:	37 2f       	mov	r19, r23
	STEPPER_move_stwt(STEPPER_BOTH,
    2f0c:	1f 92       	push	r1
    2f0e:	1f 92       	push	r1
    2f10:	1f 92       	push	r1
    2f12:	83 e0       	ldi	r24, 0x03	; 3
    2f14:	8f 93       	push	r24
    2f16:	80 e2       	ldi	r24, 0x20	; 32
    2f18:	8f 93       	push	r24
    2f1a:	1f 93       	push	r17
    2f1c:	0f 93       	push	r16
    2f1e:	7f 93       	push	r23
    2f20:	6f 93       	push	r22
    2f22:	81 2c       	mov	r8, r1
    2f24:	a1 2c       	mov	r10, r1
    2f26:	b1 2c       	mov	r11, r1
    2f28:	c1 2c       	mov	r12, r1
    2f2a:	0f 2e       	mov	r0, r31
    2f2c:	f0 e2       	ldi	r31, 0x20	; 32
    2f2e:	ef 2e       	mov	r14, r31
    2f30:	f3 e0       	ldi	r31, 0x03	; 3
    2f32:	ff 2e       	mov	r15, r31
    2f34:	f0 2d       	mov	r31, r0
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	62 e0       	ldi	r22, 0x02	; 2
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
		STEPPER_REV, steps, speed, 800, STEPPER_BRK_OFF,	//Left wheel
		STEPPER_FWD, steps, speed, 800, STEPPER_BRK_OFF);	//Right wheel
		
	STEPPER_close();
    2f40:	0e 94 31 06 	call	0xc62	; 0xc62 <STEPPER_close>
    2f44:	8d b7       	in	r24, 0x3d	; 61
    2f46:	9e b7       	in	r25, 0x3e	; 62
    2f48:	09 96       	adiw	r24, 0x09	; 9
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	9e bf       	out	0x3e, r25	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	8d bf       	out	0x3d, r24	; 61
}
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	cf 90       	pop	r12
    2f62:	bf 90       	pop	r11
    2f64:	af 90       	pop	r10
    2f66:	8f 90       	pop	r8
    2f68:	08 95       	ret

00002f6a <sTurnRight>:

// Given an angle and a speed, this function makes the robot turn/spin to the right.
void sTurnRight(int angle, int speed){
    2f6a:	8f 92       	push	r8
    2f6c:	af 92       	push	r10
    2f6e:	bf 92       	push	r11
    2f70:	cf 92       	push	r12
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	ec 01       	movw	r28, r24
    2f80:	06 2f       	mov	r16, r22
    2f82:	17 2f       	mov	r17, r23
	
	// Performs the same error detection procedure for the Stepper subsystem as it was performed with ATTINY.
	SUBSYS_OPENSTAT openStepper;
	
	// Stepper subsystem is opened.
	openStepper = STEPPER_open();
    2f84:	0e 94 a3 07 	call	0xf46	; 0xf46 <STEPPER_open>
	
	// Displays an error message if the returned value for the opened stepper subsystem is unexpected.
	if (openStepper.state != SUBSYS_OPEN){
    2f88:	91 30       	cpi	r25, 0x01	; 1
    2f8a:	41 f0       	breq	.+16     	; 0x2f9c <sTurnRight+0x32>
		LCD_printf("\nError when opening STEPPER subsystem!");
    2f8c:	8f eb       	ldi	r24, 0xBF	; 191
    2f8e:	91 e0       	ldi	r25, 0x01	; 1
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
	}
	
	steps = angle*130/90;
    2f9c:	22 e8       	ldi	r18, 0x82	; 130
    2f9e:	2c 9f       	mul	r18, r28
    2fa0:	c0 01       	movw	r24, r0
    2fa2:	2d 9f       	mul	r18, r29
    2fa4:	90 0d       	add	r25, r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	6a e5       	ldi	r22, 0x5A	; 90
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
    2fb0:	26 2f       	mov	r18, r22
    2fb2:	37 2f       	mov	r19, r23
	STEPPER_move_stwt(STEPPER_BOTH,
    2fb4:	1f 92       	push	r1
    2fb6:	1f 92       	push	r1
    2fb8:	1f 92       	push	r1
    2fba:	83 e0       	ldi	r24, 0x03	; 3
    2fbc:	8f 93       	push	r24
    2fbe:	80 e2       	ldi	r24, 0x20	; 32
    2fc0:	8f 93       	push	r24
    2fc2:	1f 93       	push	r17
    2fc4:	0f 93       	push	r16
    2fc6:	7f 93       	push	r23
    2fc8:	6f 93       	push	r22
    2fca:	88 24       	eor	r8, r8
    2fcc:	83 94       	inc	r8
    2fce:	a1 2c       	mov	r10, r1
    2fd0:	b1 2c       	mov	r11, r1
    2fd2:	c1 2c       	mov	r12, r1
    2fd4:	0f 2e       	mov	r0, r31
    2fd6:	f0 e2       	ldi	r31, 0x20	; 32
    2fd8:	ef 2e       	mov	r14, r31
    2fda:	f3 e0       	ldi	r31, 0x03	; 3
    2fdc:	ff 2e       	mov	r15, r31
    2fde:	f0 2d       	mov	r31, r0
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	62 e0       	ldi	r22, 0x02	; 2
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
		STEPPER_FWD, steps, speed, 800, STEPPER_BRK_OFF,	//Left wheel
		STEPPER_REV, steps, speed, 800, STEPPER_BRK_OFF);	//Right wheel
		
	STEPPER_close();
    2fea:	0e 94 31 06 	call	0xc62	; 0xc62 <STEPPER_close>
    2fee:	8d b7       	in	r24, 0x3d	; 61
    2ff0:	9e b7       	in	r25, 0x3e	; 62
    2ff2:	09 96       	adiw	r24, 0x09	; 9
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	9e bf       	out	0x3e, r25	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	8d bf       	out	0x3d, r24	; 61
}
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	ff 90       	pop	r15
    3008:	ef 90       	pop	r14
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	8f 90       	pop	r8
    3012:	08 95       	ret

00003014 <go2Angle>:
		STEPPER_FWD, steps, speed, 400, STEPPER_BRK_OFF,	//Left wheel
		STEPPER_FWD, steps, speed, 400, STEPPER_BRK_OFF);	//Right wheel
}

// Rotates the robot to the required functions.
void go2Angle(int angle){
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
	
	// If the angle is positive, rotate the robot in a certain angle that is converted in steps to the left.
	if (angle > 0){
    3018:	18 16       	cp	r1, r24
    301a:	19 06       	cpc	r1, r25
    301c:	dc f4       	brge	.+54     	; 0x3054 <go2Angle+0x40>
		if (angle <= 180){
    301e:	85 3b       	cpi	r24, 0xB5	; 181
    3020:	91 05       	cpc	r25, r1
    3022:	2c f4       	brge	.+10     	; 0x302e <go2Angle+0x1a>
			sTurnLeft(angle, 400);
    3024:	60 e9       	ldi	r22, 0x90	; 144
    3026:	71 e0       	ldi	r23, 0x01	; 1
    3028:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <sTurnLeft>
    302c:	32 c0       	rjmp	.+100    	; 0x3092 <go2Angle+0x7e>
		}else if(angle > 180){
			angle = angle/2;
    302e:	9c 01       	movw	r18, r24
    3030:	99 23       	and	r25, r25
    3032:	14 f4       	brge	.+4      	; 0x3038 <go2Angle+0x24>
    3034:	2f 5f       	subi	r18, 0xFF	; 255
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	e9 01       	movw	r28, r18
    303a:	d5 95       	asr	r29
    303c:	c7 95       	ror	r28
			sTurnLeft(angle, 400);
    303e:	60 e9       	ldi	r22, 0x90	; 144
    3040:	71 e0       	ldi	r23, 0x01	; 1
    3042:	ce 01       	movw	r24, r28
    3044:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <sTurnLeft>
			sTurnLeft(angle, 400);
    3048:	60 e9       	ldi	r22, 0x90	; 144
    304a:	71 e0       	ldi	r23, 0x01	; 1
    304c:	ce 01       	movw	r24, r28
    304e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <sTurnLeft>
    3052:	1f c0       	rjmp	.+62     	; 0x3092 <go2Angle+0x7e>
		}
	// If the angle is negative, rotate the robot in a certain angle that is converted in steps to the right.
	}else if(angle < 0){
    3054:	99 23       	and	r25, r25
    3056:	ec f4       	brge	.+58     	; 0x3092 <go2Angle+0x7e>
		angle = angle * (-1); //Make the angle positive to calculate the amount of steps.
    3058:	91 95       	neg	r25
    305a:	81 95       	neg	r24
    305c:	91 09       	sbc	r25, r1
		if (angle <= 180){
    305e:	85 3b       	cpi	r24, 0xB5	; 181
    3060:	91 05       	cpc	r25, r1
    3062:	2c f4       	brge	.+10     	; 0x306e <go2Angle+0x5a>
			sTurnRight(angle, 400);
    3064:	60 e9       	ldi	r22, 0x90	; 144
    3066:	71 e0       	ldi	r23, 0x01	; 1
    3068:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <sTurnRight>
    306c:	12 c0       	rjmp	.+36     	; 0x3092 <go2Angle+0x7e>
		}else if (angle > 180){
			angle = angle/2;
    306e:	9c 01       	movw	r18, r24
    3070:	99 23       	and	r25, r25
    3072:	14 f4       	brge	.+4      	; 0x3078 <go2Angle+0x64>
    3074:	2f 5f       	subi	r18, 0xFF	; 255
    3076:	3f 4f       	sbci	r19, 0xFF	; 255
    3078:	e9 01       	movw	r28, r18
    307a:	d5 95       	asr	r29
    307c:	c7 95       	ror	r28
			sTurnRight(angle, 400);
    307e:	60 e9       	ldi	r22, 0x90	; 144
    3080:	71 e0       	ldi	r23, 0x01	; 1
    3082:	ce 01       	movw	r24, r28
    3084:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <sTurnRight>
			sTurnRight(angle, 400);
    3088:	60 e9       	ldi	r22, 0x90	; 144
    308a:	71 e0       	ldi	r23, 0x01	; 1
    308c:	ce 01       	movw	r24, r28
    308e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <sTurnRight>
		}
	}else{
		// does nothing
	}
}
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <go2ContAngle>:
		STEPPER_REV, steps, speed, 800, STEPPER_BRK_OFF);	//Right wheel
		
	STEPPER_close();
}

void go2ContAngle(float angle, short speed){
    3098:	8f 92       	push	r8
    309a:	9f 92       	push	r9
    309c:	af 92       	push	r10
    309e:	bf 92       	push	r11
    30a0:	cf 92       	push	r12
    30a2:	df 92       	push	r13
    30a4:	ef 92       	push	r14
    30a6:	ff 92       	push	r15
    30a8:	0f 93       	push	r16
    30aa:	1f 93       	push	r17
    30ac:	cf 93       	push	r28
    30ae:	df 93       	push	r29
    30b0:	6b 01       	movw	r12, r22
    30b2:	7c 01       	movw	r14, r24
    30b4:	04 2f       	mov	r16, r20
    30b6:	15 2f       	mov	r17, r21
	unsigned const short timeMultiplier = 500;
	
	if(angle > 0){
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	a9 01       	movw	r20, r18
    30be:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	0c f0       	brlt	.+2      	; 0x30c8 <go2ContAngle+0x30>
    30c6:	4d c0       	rjmp	.+154    	; 0x3162 <go2ContAngle+0xca>
		
		//angle = angle * (-1);
		angle = (timeMultiplier*angle)/45;
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a ef       	ldi	r20, 0xFA	; 250
    30ce:	53 e4       	ldi	r21, 0x43	; 67
    30d0:	c7 01       	movw	r24, r14
    30d2:	b6 01       	movw	r22, r12
    30d4:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	44 e3       	ldi	r20, 0x34	; 52
    30de:	52 e4       	ldi	r21, 0x42	; 66
    30e0:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    30e4:	96 2e       	mov	r9, r22
    30e6:	d7 2f       	mov	r29, r23
    30e8:	c8 2f       	mov	r28, r24
    30ea:	d9 2e       	mov	r13, r25
		LCD_clear();
    30ec:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
		LCD_printf("%f", angle);
    30f0:	df 92       	push	r13
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	9f 92       	push	r9
    30f8:	27 e1       	ldi	r18, 0x17	; 23
    30fa:	32 e0       	ldi	r19, 0x02	; 2
    30fc:	3f 93       	push	r19
    30fe:	2f 93       	push	r18
    3100:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
	
		STEPPER_move_rn(STEPPER_BOTH,
    3104:	1f 92       	push	r1
    3106:	1f 92       	push	r1
    3108:	1f 92       	push	r1
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	8f 93       	push	r24
    310e:	80 e9       	ldi	r24, 0x90	; 144
    3110:	8f 93       	push	r24
    3112:	1f 93       	push	r17
    3114:	0f 93       	push	r16
    3116:	1f 92       	push	r1
    3118:	1f 92       	push	r1
    311a:	88 24       	eor	r8, r8
    311c:	83 94       	inc	r8
    311e:	a1 2c       	mov	r10, r1
    3120:	b1 2c       	mov	r11, r1
    3122:	c1 2c       	mov	r12, r1
    3124:	0f 2e       	mov	r0, r31
    3126:	f0 e9       	ldi	r31, 0x90	; 144
    3128:	ef 2e       	mov	r14, r31
    312a:	ff 24       	eor	r15, r15
    312c:	f3 94       	inc	r15
    312e:	f0 2d       	mov	r31, r0
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
			STEPPER_FWD, speed, 400,	//Left
			STEPPER_REV, speed, 400);	//Right
		TMRSRVC_delay(angle);
    313e:	69 2d       	mov	r22, r9
    3140:	7d 2f       	mov	r23, r29
    3142:	8c 2f       	mov	r24, r28
    3144:	9d 2d       	mov	r25, r13
    3146:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    314a:	cb 01       	movw	r24, r22
    314c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
    3150:	8d b7       	in	r24, 0x3d	; 61
    3152:	9e b7       	in	r25, 0x3e	; 62
    3154:	0f 96       	adiw	r24, 0x0f	; 15
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	9e bf       	out	0x3e, r25	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	8d bf       	out	0x3d, r24	; 61
    3160:	4c c0       	rjmp	.+152    	; 0x31fa <go2ContAngle+0x162>
	}else{
		angle = angle * (-1);
    3162:	c7 01       	movw	r24, r14
    3164:	b6 01       	movw	r22, r12
    3166:	90 58       	subi	r25, 0x80	; 128
		angle = (timeMultiplier*angle)/45;
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a ef       	ldi	r20, 0xFA	; 250
    316e:	53 e4       	ldi	r21, 0x43	; 67
    3170:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	44 e3       	ldi	r20, 0x34	; 52
    317a:	52 e4       	ldi	r21, 0x42	; 66
    317c:	0e 94 cc 2a 	call	0x5598	; 0x5598 <__divsf3>
    3180:	96 2e       	mov	r9, r22
    3182:	d7 2e       	mov	r13, r23
    3184:	d8 2f       	mov	r29, r24
    3186:	c9 2f       	mov	r28, r25
		LCD_clear();
    3188:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
		LCD_printf("%f", angle);
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	df 92       	push	r13
    3192:	9f 92       	push	r9
    3194:	27 e1       	ldi	r18, 0x17	; 23
    3196:	32 e0       	ldi	r19, 0x02	; 2
    3198:	3f 93       	push	r19
    319a:	2f 93       	push	r18
    319c:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
	
		STEPPER_move_rn(STEPPER_BOTH,
    31a0:	1f 92       	push	r1
    31a2:	1f 92       	push	r1
    31a4:	1f 92       	push	r1
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	8f 93       	push	r24
    31aa:	80 e9       	ldi	r24, 0x90	; 144
    31ac:	8f 93       	push	r24
    31ae:	1f 93       	push	r17
    31b0:	0f 93       	push	r16
    31b2:	1f 92       	push	r1
    31b4:	1f 92       	push	r1
    31b6:	81 2c       	mov	r8, r1
    31b8:	a1 2c       	mov	r10, r1
    31ba:	b1 2c       	mov	r11, r1
    31bc:	c1 2c       	mov	r12, r1
    31be:	0f 2e       	mov	r0, r31
    31c0:	f0 e9       	ldi	r31, 0x90	; 144
    31c2:	ef 2e       	mov	r14, r31
    31c4:	ff 24       	eor	r15, r15
    31c6:	f3 94       	inc	r15
    31c8:	f0 2d       	mov	r31, r0
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	62 e0       	ldi	r22, 0x02	; 2
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
			STEPPER_REV, speed, 400,	//Left
			STEPPER_FWD, speed, 400);	//Right
		TMRSRVC_delay(angle);
    31d8:	69 2d       	mov	r22, r9
    31da:	7d 2d       	mov	r23, r13
    31dc:	8d 2f       	mov	r24, r29
    31de:	9c 2f       	mov	r25, r28
    31e0:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    31e4:	cb 01       	movw	r24, r22
    31e6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
    31ea:	8d b7       	in	r24, 0x3d	; 61
    31ec:	9e b7       	in	r25, 0x3e	; 62
    31ee:	0f 96       	adiw	r24, 0x0f	; 15
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	9e bf       	out	0x3e, r25	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	8d bf       	out	0x3d, r24	; 61
	}
	STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <STEPPER_stop>
}
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	9f 90       	pop	r9
    3218:	8f 90       	pop	r8
    321a:	08 95       	ret

0000321c <rightFollow>:
void rightFollow(void){
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	00 d0       	rcall	.+0      	; 0x3222 <rightFollow+0x6>
    3222:	00 d0       	rcall	.+0      	; 0x3224 <rightFollow+0x8>
    3224:	1f 92       	push	r1
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR;
	float oLWS = 0;
	float oRWS = 0;
    322a:	21 2c       	mov	r2, r1
    322c:	31 2c       	mov	r3, r1
    322e:	1a 82       	std	Y+2, r1	; 0x02
    3230:	1b 82       	std	Y+3, r1	; 0x03
	// code that powers the right wall following routine
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR;
	float oLWS = 0;
    3232:	91 2c       	mov	r9, r1
    3234:	19 82       	std	Y+1, r1	; 0x01
    3236:	1d 82       	std	Y+5, r1	; 0x05
    3238:	1c 82       	std	Y+4, r1	; 0x04
	char KP = 1.5;
	char KI = 0.75;
	char KD = 0;

	while(1){
		frontIR = getFrontIR();
    323a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    323e:	2b 01       	movw	r4, r22
    3240:	3c 01       	movw	r6, r24
		rightIR = getRightIR();
    3242:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    3246:	6b 01       	movw	r12, r22
    3248:	7c 01       	movw	r14, r24
		leftIR = getLeftIR();
    324a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
		if((frontIR > ICT) && (rightIR < ICT)){ // Condition for simple wall following
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e4       	ldi	r20, 0x40	; 64
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	c3 01       	movw	r24, r6
    3258:	b2 01       	movw	r22, r4
    325a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    325e:	18 16       	cp	r1, r24
    3260:	0c f0       	brlt	.+2      	; 0x3264 <rightFollow+0x48>
    3262:	fe c0       	rjmp	.+508    	; 0x3460 <rightFollow+0x244>
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e4       	ldi	r20, 0x40	; 64
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	c7 01       	movw	r24, r14
    326e:	b6 01       	movw	r22, r12
    3270:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3274:	88 23       	and	r24, r24
    3276:	0c f0       	brlt	.+2      	; 0x327a <rightFollow+0x5e>
    3278:	f3 c0       	rjmp	.+486    	; 0x3460 <rightFollow+0x244>
			if (rightIR < lowerLimit){ // Too close to wall
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e8       	ldi	r20, 0x80	; 128
    3280:	50 e4       	ldi	r21, 0x40	; 64
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    328a:	88 23       	and	r24, r24
    328c:	e4 f4       	brge	.+56     	; 0x32c6 <rightFollow+0xaa>
				LCD_clear();
    328e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    3292:	8a e1       	ldi	r24, 0x1A	; 26
    3294:	92 e0       	ldi	r25, 0x02	; 2
    3296:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Inside Target\n");
    329a:	87 e2       	ldi	r24, 0x27	; 39
    329c:	92 e0       	ldi	r25, 0x02	; 2
    329e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    32a2:	85 e3       	ldi	r24, 0x35	; 53
    32a4:	92 e0       	ldi	r25, 0x02	; 2
    32a6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = lowerLimit - rightIR;
    32aa:	a7 01       	movw	r20, r14
    32ac:	96 01       	movw	r18, r12
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	90 e4       	ldi	r25, 0x40	; 64
    32b6:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    32ba:	2b 01       	movw	r4, r22
    32bc:	3c 01       	movw	r6, r24
				LCD_clear();
				LCD_printf("Right Follow\n");
				LCD_printf("Inside Target\n");
				LCD_printf("Range\n");

				LP = 0;
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	cb 01       	movw	r24, r22
    32c4:	37 c0       	rjmp	.+110    	; 0x3334 <rightFollow+0x118>
				RP = lowerLimit - rightIR;
				LI = 0;
				RI = RI++;
			}else if(rightIR > higherLimit){ // Too far from wall
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 ea       	ldi	r20, 0xA0	; 160
    32cc:	50 e4       	ldi	r21, 0x40	; 64
    32ce:	c7 01       	movw	r24, r14
    32d0:	b6 01       	movw	r22, r12
    32d2:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	d4 f4       	brge	.+52     	; 0x330e <rightFollow+0xf2>
				LCD_clear();
    32da:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    32de:	8a e1       	ldi	r24, 0x1A	; 26
    32e0:	92 e0       	ldi	r25, 0x02	; 2
    32e2:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Outside Target\n");
    32e6:	8b e3       	ldi	r24, 0x3B	; 59
    32e8:	92 e0       	ldi	r25, 0x02	; 2
    32ea:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    32ee:	85 e3       	ldi	r24, 0x35	; 53
    32f0:	92 e0       	ldi	r25, 0x02	; 2
    32f2:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = rightIR - higherLimit;
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 ea       	ldi	r20, 0xA0	; 160
    32fc:	50 e4       	ldi	r21, 0x40	; 64
    32fe:	c7 01       	movw	r24, r14
    3300:	b6 01       	movw	r22, r12
    3302:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
				RP = 0;
    3306:	41 2c       	mov	r4, r1
    3308:	51 2c       	mov	r5, r1
    330a:	32 01       	movw	r6, r4
    330c:	13 c0       	rjmp	.+38     	; 0x3334 <rightFollow+0x118>
				LI = LI++;
				RI = 0;
			}else{ // Proper range from wall
				LCD_clear();
    330e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    3312:	8a e1       	ldi	r24, 0x1A	; 26
    3314:	92 e0       	ldi	r25, 0x02	; 2
    3316:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("At Target\n");
    331a:	8a e4       	ldi	r24, 0x4A	; 74
    331c:	92 e0       	ldi	r25, 0x02	; 2
    331e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    3322:	85 e3       	ldi	r24, 0x35	; 53
    3324:	92 e0       	ldi	r25, 0x02	; 2
    3326:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = 0;
    332a:	41 2c       	mov	r4, r1
    332c:	51 2c       	mov	r5, r1
    332e:	32 01       	movw	r6, r4
				LCD_clear();
				LCD_printf("Right Follow\n");
				LCD_printf("At Target\n");
				LCD_printf("Range\n");

				LP = 0;
    3330:	c3 01       	movw	r24, r6
    3332:	b2 01       	movw	r22, r4
				RI = 0;
			}

			// PID lopp

			LWS = KP*LP + KI*LI + base; // Proportinal and Integral
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	a9 01       	movw	r20, r18
    333a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 ef       	ldi	r20, 0xF0	; 240
    3344:	52 e4       	ldi	r21, 0x42	; 66
    3346:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    334a:	e6 2e       	mov	r14, r22
    334c:	f7 2e       	mov	r15, r23
    334e:	08 2f       	mov	r16, r24
    3350:	19 2f       	mov	r17, r25
			RWS = KP*RP + KI*RI + base;
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	a9 01       	movw	r20, r18
    3358:	c3 01       	movw	r24, r6
    335a:	b2 01       	movw	r22, r4
    335c:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 ef       	ldi	r20, 0xF0	; 240
    3366:	52 e4       	ldi	r21, 0x42	; 66
    3368:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    336c:	46 2e       	mov	r4, r22
    336e:	57 2e       	mov	r5, r23
    3370:	68 2e       	mov	r6, r24
    3372:	79 2e       	mov	r7, r25
			if (oLWS == 0){ // Case to prevent weird stuff on first run
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	a9 01       	movw	r20, r18
    337a:	69 2d       	mov	r22, r9
    337c:	79 81       	ldd	r23, Y+1	; 0x01
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9c 81       	ldd	r25, Y+4	; 0x04
    3382:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3386:	81 11       	cpse	r24, r1
    3388:	08 c0       	rjmp	.+16     	; 0x339a <rightFollow+0x17e>
				oLWS = LWS;
				oRWS = RWS;
    338a:	24 2c       	mov	r2, r4
    338c:	35 2c       	mov	r3, r5
    338e:	6a 82       	std	Y+2, r6	; 0x02
    3390:	7b 82       	std	Y+3, r7	; 0x03
			// PID lopp

			LWS = KP*LP + KI*LI + base; // Proportinal and Integral
			RWS = KP*RP + KI*RI + base;
			if (oLWS == 0){ // Case to prevent weird stuff on first run
				oLWS = LWS;
    3392:	9e 2c       	mov	r9, r14
    3394:	f9 82       	std	Y+1, r15	; 0x01
    3396:	0d 83       	std	Y+5, r16	; 0x05
    3398:	1c 83       	std	Y+4, r17	; 0x04
				oRWS = RWS;
			}
			LWS = LWS + KD*(oLWS-LWS); // Derivative component
    339a:	2e 2d       	mov	r18, r14
    339c:	3f 2d       	mov	r19, r15
    339e:	40 2f       	mov	r20, r16
    33a0:	51 2f       	mov	r21, r17
    33a2:	69 2d       	mov	r22, r9
    33a4:	79 81       	ldd	r23, Y+1	; 0x01
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	a9 01       	movw	r20, r18
    33b4:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    33b8:	2e 2d       	mov	r18, r14
    33ba:	3f 2d       	mov	r19, r15
    33bc:	40 2f       	mov	r20, r16
    33be:	51 2f       	mov	r21, r17
    33c0:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    33c4:	96 2e       	mov	r9, r22
    33c6:	79 83       	std	Y+1, r23	; 0x01
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	9c 83       	std	Y+4, r25	; 0x04
			RWS = RWS + KD*(oRWS-RWS);
    33cc:	24 2d       	mov	r18, r4
    33ce:	35 2d       	mov	r19, r5
    33d0:	46 2d       	mov	r20, r6
    33d2:	57 2d       	mov	r21, r7
    33d4:	62 2d       	mov	r22, r2
    33d6:	73 2d       	mov	r23, r3
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	9b 81       	ldd	r25, Y+3	; 0x03
    33dc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	a9 01       	movw	r20, r18
    33e6:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    33ea:	24 2d       	mov	r18, r4
    33ec:	35 2d       	mov	r19, r5
    33ee:	46 2d       	mov	r20, r6
    33f0:	57 2d       	mov	r21, r7
    33f2:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    33f6:	26 2e       	mov	r2, r22
    33f8:	37 2e       	mov	r3, r23
    33fa:	8a 83       	std	Y+2, r24	; 0x02
    33fc:	9b 83       	std	Y+3, r25	; 0x03

			STEPPER_move_rn(STEPPER_BOTH, // Forward Movement based on input speeds
    33fe:	69 2d       	mov	r22, r9
    3400:	79 81       	ldd	r23, Y+1	; 0x01
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    340a:	2b 01       	movw	r4, r22
    340c:	3c 01       	movw	r6, r24
    340e:	1f 92       	push	r1
    3410:	1f 92       	push	r1
    3412:	1f 92       	push	r1
    3414:	21 e0       	ldi	r18, 0x01	; 1
    3416:	2f 93       	push	r18
    3418:	30 e9       	ldi	r19, 0x90	; 144
    341a:	3f 93       	push	r19
    341c:	62 2d       	mov	r22, r2
    341e:	73 2d       	mov	r23, r3
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    3428:	7f 93       	push	r23
    342a:	6f 93       	push	r22
    342c:	1f 92       	push	r1
    342e:	1f 92       	push	r1
    3430:	81 2c       	mov	r8, r1
    3432:	a1 2c       	mov	r10, r1
    3434:	b1 2c       	mov	r11, r1
    3436:	c1 2c       	mov	r12, r1
    3438:	0f 2e       	mov	r0, r31
    343a:	f0 e9       	ldi	r31, 0x90	; 144
    343c:	ef 2e       	mov	r14, r31
    343e:	ff 24       	eor	r15, r15
    3440:	f3 94       	inc	r15
    3442:	f0 2d       	mov	r31, r0
    3444:	82 01       	movw	r16, r4
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, LWS, 400,	//Left
					STEPPER_FWD, RWS, 400);	//Right

			oLWS = LWS; // Remember previous speeds for derivative component
			oRWS = RWS;
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	ed ce       	rjmp	.-550    	; 0x323a <rightFollow+0x1e>

		}else if((frontIR < ICT) && (rightIR < ICT)){ // Condition for if wall is in front
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e4       	ldi	r20, 0x40	; 64
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	c3 01       	movw	r24, r6
    346a:	b2 01       	movw	r22, r4
    346c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3470:	88 23       	and	r24, r24
    3472:	0c f0       	brlt	.+2      	; 0x3476 <rightFollow+0x25a>
    3474:	4a c0       	rjmp	.+148    	; 0x350a <rightFollow+0x2ee>
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e4       	ldi	r20, 0x40	; 64
    347c:	51 e4       	ldi	r21, 0x41	; 65
    347e:	c7 01       	movw	r24, r14
    3480:	b6 01       	movw	r22, r12
    3482:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3486:	88 23       	and	r24, r24
    3488:	0c f0       	brlt	.+2      	; 0x348c <rightFollow+0x270>
    348a:	3f c0       	rjmp	.+126    	; 0x350a <rightFollow+0x2ee>
			LCD_clear();
    348c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Right Follow\n");
    3490:	8a e1       	ldi	r24, 0x1A	; 26
    3492:	92 e0       	ldi	r25, 0x02	; 2
    3494:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Wall in Front\n");
    3498:	84 e5       	ldi	r24, 0x54	; 84
    349a:	92 e0       	ldi	r25, 0x02	; 2
    349c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Left\n");
    34a0:	82 e6       	ldi	r24, 0x62	; 98
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    34a8:	1f 92       	push	r1
    34aa:	1f 92       	push	r1
    34ac:	1f 92       	push	r1
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	9f 93       	push	r25
    34b2:	e0 e9       	ldi	r30, 0x90	; 144
    34b4:	ef 93       	push	r30
    34b6:	1f 92       	push	r1
    34b8:	f6 e9       	ldi	r31, 0x96	; 150
    34ba:	ff 93       	push	r31
    34bc:	1f 92       	push	r1
    34be:	1f 92       	push	r1
    34c0:	81 2c       	mov	r8, r1
    34c2:	a1 2c       	mov	r10, r1
    34c4:	b1 2c       	mov	r11, r1
    34c6:	c1 2c       	mov	r12, r1
    34c8:	0f 2e       	mov	r0, r31
    34ca:	f0 e9       	ldi	r31, 0x90	; 144
    34cc:	ef 2e       	mov	r14, r31
    34ce:	ff 24       	eor	r15, r15
    34d0:	f3 94       	inc	r15
    34d2:	f0 2d       	mov	r31, r0
    34d4:	06 e9       	ldi	r16, 0x96	; 150
    34d6:	10 e0       	ldi	r17, 0x00	; 0
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	62 e0       	ldi	r22, 0x02	; 2
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, 150, 400,	//Left
					STEPPER_FWD, 150, 400);	//Right
			TMRSRVC_delay(500); // 0.5 sec delay
    34e6:	84 ef       	ldi	r24, 0xF4	; 244
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
			go2ContAngle(-90, 100); // Left 90 Turn
    34ee:	44 e6       	ldi	r20, 0x64	; 100
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	84 eb       	ldi	r24, 0xB4	; 180
    34f8:	92 ec       	ldi	r25, 0xC2	; 194
    34fa:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
			LP = 0;
			RP = 0;
			LI = 0;
			RI = 0;
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	98 ce       	rjmp	.-720    	; 0x323a <rightFollow+0x1e>
		}else if((frontIR > ICT) && (rightIR > ICT)){ // Condition for is no wall to follow or in front
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e4       	ldi	r20, 0x40	; 64
    3510:	51 e4       	ldi	r21, 0x41	; 65
    3512:	c3 01       	movw	r24, r6
    3514:	b2 01       	movw	r22, r4
    3516:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    351a:	18 16       	cp	r1, r24
    351c:	0c f0       	brlt	.+2      	; 0x3520 <rightFollow+0x304>
    351e:	8d ce       	rjmp	.-742    	; 0x323a <rightFollow+0x1e>
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e4       	ldi	r20, 0x40	; 64
    3526:	51 e4       	ldi	r21, 0x41	; 65
    3528:	c7 01       	movw	r24, r14
    352a:	b6 01       	movw	r22, r12
    352c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3530:	18 16       	cp	r1, r24
    3532:	0c f0       	brlt	.+2      	; 0x3536 <rightFollow+0x31a>
    3534:	82 ce       	rjmp	.-764    	; 0x323a <rightFollow+0x1e>
			LCD_clear();
    3536:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Right Follow\n");
    353a:	8a e1       	ldi	r24, 0x1A	; 26
    353c:	92 e0       	ldi	r25, 0x02	; 2
    353e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Lack of Wall\n");
    3542:	8f e6       	ldi	r24, 0x6F	; 111
    3544:	92 e0       	ldi	r25, 0x02	; 2
    3546:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Right\n");
    354a:	8c e7       	ldi	r24, 0x7C	; 124
    354c:	92 e0       	ldi	r25, 0x02	; 2
    354e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    3552:	1f 92       	push	r1
    3554:	1f 92       	push	r1
    3556:	1f 92       	push	r1
    3558:	31 e0       	ldi	r19, 0x01	; 1
    355a:	3f 93       	push	r19
    355c:	80 e9       	ldi	r24, 0x90	; 144
    355e:	8f 93       	push	r24
    3560:	1f 92       	push	r1
    3562:	96 e9       	ldi	r25, 0x96	; 150
    3564:	9f 93       	push	r25
    3566:	1f 92       	push	r1
    3568:	1f 92       	push	r1
    356a:	81 2c       	mov	r8, r1
    356c:	a1 2c       	mov	r10, r1
    356e:	b1 2c       	mov	r11, r1
    3570:	c1 2c       	mov	r12, r1
    3572:	0f 2e       	mov	r0, r31
    3574:	f0 e9       	ldi	r31, 0x90	; 144
    3576:	ef 2e       	mov	r14, r31
    3578:	ff 24       	eor	r15, r15
    357a:	f3 94       	inc	r15
    357c:	f0 2d       	mov	r31, r0
    357e:	06 e9       	ldi	r16, 0x96	; 150
    3580:	10 e0       	ldi	r17, 0x00	; 0
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	62 e0       	ldi	r22, 0x02	; 2
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, 150, 400,	//Left
					STEPPER_FWD, 150, 400);	//Right
			TMRSRVC_delay(500); // 0.5 Sec delay
    3590:	84 ef       	ldi	r24, 0xF4	; 244
    3592:	91 e0       	ldi	r25, 0x01	; 1
    3594:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
			rightIR = getRightIR();
    3598:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
			if ((frontIR > ICT) && (rightIR > ICT)){
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e4       	ldi	r20, 0x40	; 64
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	0c f0       	brlt	.+2      	; 0x35b8 <rightFollow+0x39c>
    35b6:	41 ce       	rjmp	.-894    	; 0x323a <rightFollow+0x1e>
				go2ContAngle(90, 100); // Right 90 Turn
    35b8:	44 e6       	ldi	r20, 0x64	; 100
    35ba:	50 e0       	ldi	r21, 0x00	; 0
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	70 e0       	ldi	r23, 0x00	; 0
    35c0:	84 eb       	ldi	r24, 0xB4	; 180
    35c2:	92 e4       	ldi	r25, 0x42	; 66
    35c4:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
				STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    35c8:	1f 92       	push	r1
    35ca:	1f 92       	push	r1
    35cc:	1f 92       	push	r1
    35ce:	f1 e0       	ldi	r31, 0x01	; 1
    35d0:	ff 93       	push	r31
    35d2:	20 e9       	ldi	r18, 0x90	; 144
    35d4:	2f 93       	push	r18
    35d6:	1f 92       	push	r1
    35d8:	36 e9       	ldi	r19, 0x96	; 150
    35da:	3f 93       	push	r19
    35dc:	1f 92       	push	r1
    35de:	1f 92       	push	r1
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	62 e0       	ldi	r22, 0x02	; 2
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
						STEPPER_FWD, 150, 400,	//Left
						STEPPER_FWD, 150, 400);	//Right
				rightIR = getRightIR();
    35ee:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
				while(rightIR > ICT){
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e4       	ldi	r20, 0x40	; 64
    3602:	51 e4       	ldi	r21, 0x41	; 65
    3604:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3608:	18 16       	cp	r1, r24
    360a:	0c f0       	brlt	.+2      	; 0x360e <rightFollow+0x3f2>
    360c:	16 ce       	rjmp	.-980    	; 0x323a <rightFollow+0x1e>
					TMRSRVC_delay(100); // 0.1 sec delay
    360e:	84 e6       	ldi	r24, 0x64	; 100
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
					rightIR = getRightIR();
    3616:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
				go2ContAngle(90, 100); // Right 90 Turn
				STEPPER_move_rn(STEPPER_BOTH, // Forward movement
						STEPPER_FWD, 150, 400,	//Left
						STEPPER_FWD, 150, 400);	//Right
				rightIR = getRightIR();
				while(rightIR > ICT){
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e4       	ldi	r20, 0x40	; 64
    3620:	51 e4       	ldi	r21, 0x41	; 65
    3622:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3626:	18 16       	cp	r1, r24
    3628:	94 f3       	brlt	.-28     	; 0x360e <rightFollow+0x3f2>
    362a:	07 ce       	rjmp	.-1010   	; 0x323a <rightFollow+0x1e>

0000362c <leftFollow>:
			}
		}
	}
}

void leftFollow(void){
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	00 d0       	rcall	.+0      	; 0x3632 <leftFollow+0x6>
    3632:	00 d0       	rcall	.+0      	; 0x3634 <leftFollow+0x8>
    3634:	1f 92       	push	r1
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR;
	float oLWS = 0;
	float oRWS = 0;
    363a:	21 2c       	mov	r2, r1
    363c:	31 2c       	mov	r3, r1
    363e:	1a 82       	std	Y+2, r1	; 0x02
    3640:	1b 82       	std	Y+3, r1	; 0x03
	// code that powers the left wall following routine
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR;
	float oLWS = 0;
    3642:	91 2c       	mov	r9, r1
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	1d 82       	std	Y+5, r1	; 0x05
    3648:	1c 82       	std	Y+4, r1	; 0x04
	char KP = 1.5;
	char KI = 0.75;
	char KD = 0;

	while(1){
		frontIR = getFrontIR();
    364a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    364e:	2b 01       	movw	r4, r22
    3650:	3c 01       	movw	r6, r24
		rightIR = getRightIR();
    3652:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
		leftIR = getLeftIR();
    3656:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    365a:	6b 01       	movw	r12, r22
    365c:	7c 01       	movw	r14, r24
		if((frontIR > ICT) && (leftIR < ICT)){ // Condition for simple wall following
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e4       	ldi	r20, 0x40	; 64
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	c3 01       	movw	r24, r6
    3668:	b2 01       	movw	r22, r4
    366a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    366e:	18 16       	cp	r1, r24
    3670:	0c f0       	brlt	.+2      	; 0x3674 <leftFollow+0x48>
    3672:	fe c0       	rjmp	.+508    	; 0x3870 <leftFollow+0x244>
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e4       	ldi	r20, 0x40	; 64
    367a:	51 e4       	ldi	r21, 0x41	; 65
    367c:	c7 01       	movw	r24, r14
    367e:	b6 01       	movw	r22, r12
    3680:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3684:	88 23       	and	r24, r24
    3686:	0c f0       	brlt	.+2      	; 0x368a <leftFollow+0x5e>
    3688:	f3 c0       	rjmp	.+486    	; 0x3870 <leftFollow+0x244>
			if (leftIR < lowerLimit){ // Too close to wall
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	50 e4       	ldi	r21, 0x40	; 64
    3692:	c7 01       	movw	r24, r14
    3694:	b6 01       	movw	r22, r12
    3696:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    369a:	88 23       	and	r24, r24
    369c:	d4 f4       	brge	.+52     	; 0x36d2 <leftFollow+0xa6>
				LCD_clear();
    369e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    36a2:	8a e8       	ldi	r24, 0x8A	; 138
    36a4:	92 e0       	ldi	r25, 0x02	; 2
    36a6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Inside Target\n");
    36aa:	87 e2       	ldi	r24, 0x27	; 39
    36ac:	92 e0       	ldi	r25, 0x02	; 2
    36ae:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    36b2:	85 e3       	ldi	r24, 0x35	; 53
    36b4:	92 e0       	ldi	r25, 0x02	; 2
    36b6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = lowerLimit - leftIR;
    36ba:	a7 01       	movw	r20, r14
    36bc:	96 01       	movw	r18, r12
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	80 e8       	ldi	r24, 0x80	; 128
    36c4:	90 e4       	ldi	r25, 0x40	; 64
    36c6:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
				RP = 0;
    36ca:	41 2c       	mov	r4, r1
    36cc:	51 2c       	mov	r5, r1
    36ce:	32 01       	movw	r6, r4
    36d0:	39 c0       	rjmp	.+114    	; 0x3744 <leftFollow+0x118>
				LI = LI++;
				RI = 0;
			}else if(leftIR > higherLimit){ // Too far from wall
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	40 ea       	ldi	r20, 0xA0	; 160
    36d8:	50 e4       	ldi	r21, 0x40	; 64
    36da:	c7 01       	movw	r24, r14
    36dc:	b6 01       	movw	r22, r12
    36de:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    36e2:	18 16       	cp	r1, r24
    36e4:	e4 f4       	brge	.+56     	; 0x371e <leftFollow+0xf2>
				LCD_clear();
    36e6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    36ea:	8a e8       	ldi	r24, 0x8A	; 138
    36ec:	92 e0       	ldi	r25, 0x02	; 2
    36ee:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Outside Target\n");
    36f2:	8b e3       	ldi	r24, 0x3B	; 59
    36f4:	92 e0       	ldi	r25, 0x02	; 2
    36f6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    36fa:	85 e3       	ldi	r24, 0x35	; 53
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = leftIR - higherLimit;
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 ea       	ldi	r20, 0xA0	; 160
    3708:	50 e4       	ldi	r21, 0x40	; 64
    370a:	c7 01       	movw	r24, r14
    370c:	b6 01       	movw	r22, r12
    370e:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3712:	2b 01       	movw	r4, r22
    3714:	3c 01       	movw	r6, r24
				LCD_clear();
				LCD_printf("Left Follow\n");
				LCD_printf("Outside Target\n");
				LCD_printf("Range\n");

				LP = 0;
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	70 e0       	ldi	r23, 0x00	; 0
    371a:	cb 01       	movw	r24, r22
    371c:	13 c0       	rjmp	.+38     	; 0x3744 <leftFollow+0x118>
				RP = leftIR - higherLimit;
				LI = 0;
				RI = RI++;
			}else{ // Proper range from wall
				LCD_clear();
    371e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    3722:	8a e8       	ldi	r24, 0x8A	; 138
    3724:	92 e0       	ldi	r25, 0x02	; 2
    3726:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("At Target\n");
    372a:	8a e4       	ldi	r24, 0x4A	; 74
    372c:	92 e0       	ldi	r25, 0x02	; 2
    372e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    3732:	85 e3       	ldi	r24, 0x35	; 53
    3734:	92 e0       	ldi	r25, 0x02	; 2
    3736:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = 0;
    373a:	41 2c       	mov	r4, r1
    373c:	51 2c       	mov	r5, r1
    373e:	32 01       	movw	r6, r4
				LCD_clear();
				LCD_printf("Left Follow\n");
				LCD_printf("At Target\n");
				LCD_printf("Range\n");

				LP = 0;
    3740:	c3 01       	movw	r24, r6
    3742:	b2 01       	movw	r22, r4
				RI = 0;
			}

			// PID lopp

			LWS = KP*LP + KI*LI + base; // Proportinal and Integral
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	a9 01       	movw	r20, r18
    374a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 ef       	ldi	r20, 0xF0	; 240
    3754:	52 e4       	ldi	r21, 0x42	; 66
    3756:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    375a:	e6 2e       	mov	r14, r22
    375c:	f7 2e       	mov	r15, r23
    375e:	08 2f       	mov	r16, r24
    3760:	19 2f       	mov	r17, r25
			RWS = KP*RP + KI*RI + base;
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	a9 01       	movw	r20, r18
    3768:	c3 01       	movw	r24, r6
    376a:	b2 01       	movw	r22, r4
    376c:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 ef       	ldi	r20, 0xF0	; 240
    3776:	52 e4       	ldi	r21, 0x42	; 66
    3778:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    377c:	46 2e       	mov	r4, r22
    377e:	57 2e       	mov	r5, r23
    3780:	68 2e       	mov	r6, r24
    3782:	79 2e       	mov	r7, r25
			if (oLWS == 0){ // Case to prevent weird stuff on first run
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a9 01       	movw	r20, r18
    378a:	69 2d       	mov	r22, r9
    378c:	79 81       	ldd	r23, Y+1	; 0x01
    378e:	8d 81       	ldd	r24, Y+5	; 0x05
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3796:	81 11       	cpse	r24, r1
    3798:	08 c0       	rjmp	.+16     	; 0x37aa <leftFollow+0x17e>
				oLWS = LWS;
				oRWS = RWS;
    379a:	24 2c       	mov	r2, r4
    379c:	35 2c       	mov	r3, r5
    379e:	6a 82       	std	Y+2, r6	; 0x02
    37a0:	7b 82       	std	Y+3, r7	; 0x03
			// PID lopp

			LWS = KP*LP + KI*LI + base; // Proportinal and Integral
			RWS = KP*RP + KI*RI + base;
			if (oLWS == 0){ // Case to prevent weird stuff on first run
				oLWS = LWS;
    37a2:	9e 2c       	mov	r9, r14
    37a4:	f9 82       	std	Y+1, r15	; 0x01
    37a6:	0d 83       	std	Y+5, r16	; 0x05
    37a8:	1c 83       	std	Y+4, r17	; 0x04
				oRWS = RWS;
			}
			LWS = LWS + KD*(oLWS-LWS); // Derivative component
    37aa:	2e 2d       	mov	r18, r14
    37ac:	3f 2d       	mov	r19, r15
    37ae:	40 2f       	mov	r20, r16
    37b0:	51 2f       	mov	r21, r17
    37b2:	69 2d       	mov	r22, r9
    37b4:	79 81       	ldd	r23, Y+1	; 0x01
    37b6:	8d 81       	ldd	r24, Y+5	; 0x05
    37b8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ba:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	a9 01       	movw	r20, r18
    37c4:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    37c8:	2e 2d       	mov	r18, r14
    37ca:	3f 2d       	mov	r19, r15
    37cc:	40 2f       	mov	r20, r16
    37ce:	51 2f       	mov	r21, r17
    37d0:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    37d4:	96 2e       	mov	r9, r22
    37d6:	79 83       	std	Y+1, r23	; 0x01
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	9c 83       	std	Y+4, r25	; 0x04
			RWS = RWS + KD*(oRWS-RWS);
    37dc:	24 2d       	mov	r18, r4
    37de:	35 2d       	mov	r19, r5
    37e0:	46 2d       	mov	r20, r6
    37e2:	57 2d       	mov	r21, r7
    37e4:	62 2d       	mov	r22, r2
    37e6:	73 2d       	mov	r23, r3
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	9b 81       	ldd	r25, Y+3	; 0x03
    37ec:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	a9 01       	movw	r20, r18
    37f6:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    37fa:	24 2d       	mov	r18, r4
    37fc:	35 2d       	mov	r19, r5
    37fe:	46 2d       	mov	r20, r6
    3800:	57 2d       	mov	r21, r7
    3802:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3806:	26 2e       	mov	r2, r22
    3808:	37 2e       	mov	r3, r23
    380a:	8a 83       	std	Y+2, r24	; 0x02
    380c:	9b 83       	std	Y+3, r25	; 0x03

			STEPPER_move_rn(STEPPER_BOTH, // Forward Movement based on input speeds
    380e:	69 2d       	mov	r22, r9
    3810:	79 81       	ldd	r23, Y+1	; 0x01
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9c 81       	ldd	r25, Y+4	; 0x04
    3816:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    381a:	2b 01       	movw	r4, r22
    381c:	3c 01       	movw	r6, r24
    381e:	1f 92       	push	r1
    3820:	1f 92       	push	r1
    3822:	1f 92       	push	r1
    3824:	21 e0       	ldi	r18, 0x01	; 1
    3826:	2f 93       	push	r18
    3828:	30 e9       	ldi	r19, 0x90	; 144
    382a:	3f 93       	push	r19
    382c:	62 2d       	mov	r22, r2
    382e:	73 2d       	mov	r23, r3
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    3838:	7f 93       	push	r23
    383a:	6f 93       	push	r22
    383c:	1f 92       	push	r1
    383e:	1f 92       	push	r1
    3840:	81 2c       	mov	r8, r1
    3842:	a1 2c       	mov	r10, r1
    3844:	b1 2c       	mov	r11, r1
    3846:	c1 2c       	mov	r12, r1
    3848:	0f 2e       	mov	r0, r31
    384a:	f0 e9       	ldi	r31, 0x90	; 144
    384c:	ef 2e       	mov	r14, r31
    384e:	ff 24       	eor	r15, r15
    3850:	f3 94       	inc	r15
    3852:	f0 2d       	mov	r31, r0
    3854:	82 01       	movw	r16, r4
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	62 e0       	ldi	r22, 0x02	; 2
    385e:	82 e0       	ldi	r24, 0x02	; 2
    3860:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, LWS, 400,	//Left
					STEPPER_FWD, RWS, 400);	//Right

			oLWS = LWS; // Remember previous speeds for derivative component
			oRWS = RWS;
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	ed ce       	rjmp	.-550    	; 0x364a <leftFollow+0x1e>

		}else if((frontIR < ICT) && (leftIR < ICT)){ // Condition for if wall is in front
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e4       	ldi	r20, 0x40	; 64
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	c3 01       	movw	r24, r6
    387a:	b2 01       	movw	r22, r4
    387c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3880:	88 23       	and	r24, r24
    3882:	0c f0       	brlt	.+2      	; 0x3886 <leftFollow+0x25a>
    3884:	4a c0       	rjmp	.+148    	; 0x391a <leftFollow+0x2ee>
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	40 e4       	ldi	r20, 0x40	; 64
    388c:	51 e4       	ldi	r21, 0x41	; 65
    388e:	c7 01       	movw	r24, r14
    3890:	b6 01       	movw	r22, r12
    3892:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3896:	88 23       	and	r24, r24
    3898:	0c f0       	brlt	.+2      	; 0x389c <leftFollow+0x270>
    389a:	3f c0       	rjmp	.+126    	; 0x391a <leftFollow+0x2ee>
			LCD_clear();
    389c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Left Follow\n");
    38a0:	8a e8       	ldi	r24, 0x8A	; 138
    38a2:	92 e0       	ldi	r25, 0x02	; 2
    38a4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Wall in Front\n");
    38a8:	84 e5       	ldi	r24, 0x54	; 84
    38aa:	92 e0       	ldi	r25, 0x02	; 2
    38ac:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Right\n");
    38b0:	8c e7       	ldi	r24, 0x7C	; 124
    38b2:	92 e0       	ldi	r25, 0x02	; 2
    38b4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    38b8:	1f 92       	push	r1
    38ba:	1f 92       	push	r1
    38bc:	1f 92       	push	r1
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	9f 93       	push	r25
    38c2:	e0 e9       	ldi	r30, 0x90	; 144
    38c4:	ef 93       	push	r30
    38c6:	1f 92       	push	r1
    38c8:	f6 e9       	ldi	r31, 0x96	; 150
    38ca:	ff 93       	push	r31
    38cc:	1f 92       	push	r1
    38ce:	1f 92       	push	r1
    38d0:	81 2c       	mov	r8, r1
    38d2:	a1 2c       	mov	r10, r1
    38d4:	b1 2c       	mov	r11, r1
    38d6:	c1 2c       	mov	r12, r1
    38d8:	0f 2e       	mov	r0, r31
    38da:	f0 e9       	ldi	r31, 0x90	; 144
    38dc:	ef 2e       	mov	r14, r31
    38de:	ff 24       	eor	r15, r15
    38e0:	f3 94       	inc	r15
    38e2:	f0 2d       	mov	r31, r0
    38e4:	06 e9       	ldi	r16, 0x96	; 150
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e0       	ldi	r20, 0x00	; 0
    38ee:	62 e0       	ldi	r22, 0x02	; 2
    38f0:	82 e0       	ldi	r24, 0x02	; 2
    38f2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, 150, 400,	//Left
					STEPPER_FWD, 150, 400);	//Right
			TMRSRVC_delay(500); // 0.5 sec delay
    38f6:	84 ef       	ldi	r24, 0xF4	; 244
    38f8:	91 e0       	ldi	r25, 0x01	; 1
    38fa:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
			go2ContAngle(90, 100); // Right 90 Turn
    38fe:	44 e6       	ldi	r20, 0x64	; 100
    3900:	50 e0       	ldi	r21, 0x00	; 0
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	84 eb       	ldi	r24, 0xB4	; 180
    3908:	92 e4       	ldi	r25, 0x42	; 66
    390a:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
			LP = 0;
			RP = 0;
			LI = 0;
			RI = 0;	
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	98 ce       	rjmp	.-720    	; 0x364a <leftFollow+0x1e>
		}else if((frontIR > ICT) && (leftIR > ICT)){ // Condition for is no wall to follow or in front
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e4       	ldi	r20, 0x40	; 64
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	c3 01       	movw	r24, r6
    3924:	b2 01       	movw	r22, r4
    3926:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    392a:	18 16       	cp	r1, r24
    392c:	0c f0       	brlt	.+2      	; 0x3930 <leftFollow+0x304>
    392e:	8d ce       	rjmp	.-742    	; 0x364a <leftFollow+0x1e>
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e4       	ldi	r20, 0x40	; 64
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	c7 01       	movw	r24, r14
    393a:	b6 01       	movw	r22, r12
    393c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3940:	18 16       	cp	r1, r24
    3942:	0c f0       	brlt	.+2      	; 0x3946 <leftFollow+0x31a>
    3944:	82 ce       	rjmp	.-764    	; 0x364a <leftFollow+0x1e>
			LCD_clear();
    3946:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Left Follow\n");
    394a:	8a e8       	ldi	r24, 0x8A	; 138
    394c:	92 e0       	ldi	r25, 0x02	; 2
    394e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Lack of Wall\n");
    3952:	8f e6       	ldi	r24, 0x6F	; 111
    3954:	92 e0       	ldi	r25, 0x02	; 2
    3956:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Left\n");
    395a:	82 e6       	ldi	r24, 0x62	; 98
    395c:	92 e0       	ldi	r25, 0x02	; 2
    395e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    3962:	1f 92       	push	r1
    3964:	1f 92       	push	r1
    3966:	1f 92       	push	r1
    3968:	31 e0       	ldi	r19, 0x01	; 1
    396a:	3f 93       	push	r19
    396c:	80 e9       	ldi	r24, 0x90	; 144
    396e:	8f 93       	push	r24
    3970:	1f 92       	push	r1
    3972:	96 e9       	ldi	r25, 0x96	; 150
    3974:	9f 93       	push	r25
    3976:	1f 92       	push	r1
    3978:	1f 92       	push	r1
    397a:	81 2c       	mov	r8, r1
    397c:	a1 2c       	mov	r10, r1
    397e:	b1 2c       	mov	r11, r1
    3980:	c1 2c       	mov	r12, r1
    3982:	0f 2e       	mov	r0, r31
    3984:	f0 e9       	ldi	r31, 0x90	; 144
    3986:	ef 2e       	mov	r14, r31
    3988:	ff 24       	eor	r15, r15
    398a:	f3 94       	inc	r15
    398c:	f0 2d       	mov	r31, r0
    398e:	06 e9       	ldi	r16, 0x96	; 150
    3990:	10 e0       	ldi	r17, 0x00	; 0
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 e0       	ldi	r20, 0x00	; 0
    3998:	62 e0       	ldi	r22, 0x02	; 2
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
					STEPPER_FWD, 150, 400,	//Left
					STEPPER_FWD, 150, 400);	//Right
			TMRSRVC_delay(500); // 0.5 sec delay
    39a0:	84 ef       	ldi	r24, 0xF4	; 244
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
			leftIR = getLeftIR();
    39a8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
			if ((frontIR > ICT) && (leftIR > ICT)){
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e4       	ldi	r20, 0x40	; 64
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    39c2:	18 16       	cp	r1, r24
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <leftFollow+0x39c>
    39c6:	41 ce       	rjmp	.-894    	; 0x364a <leftFollow+0x1e>
				go2ContAngle(-90, 100); // Left 90 Turn
    39c8:	44 e6       	ldi	r20, 0x64	; 100
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	70 e0       	ldi	r23, 0x00	; 0
    39d0:	84 eb       	ldi	r24, 0xB4	; 180
    39d2:	92 ec       	ldi	r25, 0xC2	; 194
    39d4:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
				STEPPER_move_rn(STEPPER_BOTH, // Forward movement
    39d8:	1f 92       	push	r1
    39da:	1f 92       	push	r1
    39dc:	1f 92       	push	r1
    39de:	f1 e0       	ldi	r31, 0x01	; 1
    39e0:	ff 93       	push	r31
    39e2:	20 e9       	ldi	r18, 0x90	; 144
    39e4:	2f 93       	push	r18
    39e6:	1f 92       	push	r1
    39e8:	36 e9       	ldi	r19, 0x96	; 150
    39ea:	3f 93       	push	r19
    39ec:	1f 92       	push	r1
    39ee:	1f 92       	push	r1
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	62 e0       	ldi	r22, 0x02	; 2
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
						STEPPER_FWD, 150, 400,	//Left
						STEPPER_FWD, 150, 400);	//Right
				leftIR = getLeftIR();
    39fe:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
				while(leftIR > ICT){
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e4       	ldi	r20, 0x40	; 64
    3a12:	51 e4       	ldi	r21, 0x41	; 65
    3a14:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	0c f0       	brlt	.+2      	; 0x3a1e <leftFollow+0x3f2>
    3a1c:	16 ce       	rjmp	.-980    	; 0x364a <leftFollow+0x1e>
					TMRSRVC_delay(100); // 0.1 sec delay
    3a1e:	84 e6       	ldi	r24, 0x64	; 100
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
					leftIR = getLeftIR();
    3a26:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
				go2ContAngle(-90, 100); // Left 90 Turn
				STEPPER_move_rn(STEPPER_BOTH, // Forward movement
						STEPPER_FWD, 150, 400,	//Left
						STEPPER_FWD, 150, 400);	//Right
				leftIR = getLeftIR();
				while(leftIR > ICT){
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e4       	ldi	r20, 0x40	; 64
    3a30:	51 e4       	ldi	r21, 0x41	; 65
    3a32:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	94 f3       	brlt	.-28     	; 0x3a1e <leftFollow+0x3f2>
    3a3a:	07 ce       	rjmp	.-1010   	; 0x364a <leftFollow+0x1e>

00003a3c <centerFollow>:
				RI = 0;	
			}
		}
	}
}
void centerFollow(void){
    3a3c:	2f 92       	push	r2
    3a3e:	3f 92       	push	r3
    3a40:	4f 92       	push	r4
    3a42:	5f 92       	push	r5
    3a44:	6f 92       	push	r6
    3a46:	7f 92       	push	r7
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	2f 97       	sbiw	r28, 0x0f	; 15
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61

	char KP = 1.5;
	char KI = 0.75;
	char KD = 0;

	rightIR = getRightIR();
    3a70:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    3a74:	6b 01       	movw	r12, r22
    3a76:	7c 01       	movw	r14, r24
	leftIR = getLeftIR();
    3a78:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
	while ((leftIR < ICT) && (rightIR < ICT)){ // If between two walls
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e4       	ldi	r20, 0x40	; 64
    3a82:	51 e4       	ldi	r21, 0x41	; 65
    3a84:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3a88:	88 23       	and	r24, r24
    3a8a:	0c f0       	brlt	.+2      	; 0x3a8e <centerFollow+0x52>
    3a8c:	5d c1       	rjmp	.+698    	; 0x3d48 <centerFollow+0x30c>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e4       	ldi	r20, 0x40	; 64
    3a94:	51 e4       	ldi	r21, 0x41	; 65
    3a96:	c7 01       	movw	r24, r14
    3a98:	b6 01       	movw	r22, r12
    3a9a:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3a9e:	88 23       	and	r24, r24
    3aa0:	0c f0       	brlt	.+2      	; 0x3aa4 <centerFollow+0x68>
    3aa2:	52 c1       	rjmp	.+676    	; 0x3d48 <centerFollow+0x30c>
void centerFollow(void){
	// Code that powers the center follower
	char tollerance_band = 0;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, avrageIR;
	float oLWS = 0;
	float oRWS = 0;
    3aa4:	1d 82       	std	Y+5, r1	; 0x05
    3aa6:	1e 82       	std	Y+6, r1	; 0x06
    3aa8:	1f 82       	std	Y+7, r1	; 0x07
    3aaa:	18 86       	std	Y+8, r1	; 0x08
}
void centerFollow(void){
	// Code that powers the center follower
	char tollerance_band = 0;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, avrageIR;
	float oLWS = 0;
    3aac:	31 2c       	mov	r3, r1
    3aae:	21 2c       	mov	r2, r1
    3ab0:	00 e0       	ldi	r16, 0x00	; 0
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
			oRWS = RWS;
		}
		LWS = LWS + KD*(oLWS-LWS); // Derivative Control
		RWS = RWS + KD*(oRWS-RWS);

		STEPPER_move_rn(STEPPER_BOTH, // Forward Movement based on input speeds
    3ab4:	0e 87       	std	Y+14, r16	; 0x0e
    3ab6:	1f 87       	std	Y+15, r17	; 0x0f
	char KD = 0;

	rightIR = getRightIR();
	leftIR = getLeftIR();
	while ((leftIR < ICT) && (rightIR < ICT)){ // If between two walls
		rightIR = getRightIR();
    3ab8:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    3abc:	2b 01       	movw	r4, r22
    3abe:	3c 01       	movw	r6, r24
		leftIR = getLeftIR();
    3ac0:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    3ac4:	6a 87       	std	Y+10, r22	; 0x0a
    3ac6:	7b 87       	std	Y+11, r23	; 0x0b
    3ac8:	8c 87       	std	Y+12, r24	; 0x0c
    3aca:	9d 87       	std	Y+13, r25	; 0x0d
		avrageIR = (rightIR + leftIR)/2;
    3acc:	9b 01       	movw	r18, r22
    3ace:	ac 01       	movw	r20, r24
    3ad0:	c3 01       	movw	r24, r6
    3ad2:	b2 01       	movw	r22, r4
    3ad4:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	5f e3       	ldi	r21, 0x3F	; 63
    3ae0:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3ae4:	4b 01       	movw	r8, r22
    3ae6:	5c 01       	movw	r10, r24
		if ((rightIR - avrageIR) > tollerance_band){
    3ae8:	9b 01       	movw	r18, r22
    3aea:	ac 01       	movw	r20, r24
    3aec:	c3 01       	movw	r24, r6
    3aee:	b2 01       	movw	r22, r4
    3af0:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3af4:	6b 01       	movw	r12, r22
    3af6:	7c 01       	movw	r14, r24
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	a9 01       	movw	r20, r18
    3afe:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3b02:	18 16       	cp	r1, r24
    3b04:	94 f4       	brge	.+36     	; 0x3b2a <centerFollow+0xee>
			//means left of center
			LCD_clear();
    3b06:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Center Follow\n");
    3b0a:	86 e9       	ldi	r24, 0x96	; 150
    3b0c:	92 e0       	ldi	r25, 0x02	; 2
    3b0e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Left of\n");
    3b12:	84 ea       	ldi	r24, 0xA4	; 164
    3b14:	92 e0       	ldi	r25, 0x02	; 2
    3b16:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Center\n");
    3b1a:	8c ea       	ldi	r24, 0xAC	; 172
    3b1c:	92 e0       	ldi	r25, 0x02	; 2
    3b1e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			LP = rightIR - avrageIR;
			RP = 0;
    3b22:	81 2c       	mov	r8, r1
    3b24:	91 2c       	mov	r9, r1
    3b26:	54 01       	movw	r10, r8
    3b28:	3c c0       	rjmp	.+120    	; 0x3ba2 <centerFollow+0x166>
			LI = LI++;
			RI = 0;
		} else if ((avrageIR - rightIR) > (tollerance_band)) {
    3b2a:	a3 01       	movw	r20, r6
    3b2c:	92 01       	movw	r18, r4
    3b2e:	c5 01       	movw	r24, r10
    3b30:	b4 01       	movw	r22, r8
    3b32:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	a9 01       	movw	r20, r18
    3b3c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3b40:	18 16       	cp	r1, r24
    3b42:	e4 f4       	brge	.+56     	; 0x3b7c <centerFollow+0x140>
			//means right of center
			LCD_clear();
    3b44:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Center Follow\n");
    3b48:	86 e9       	ldi	r24, 0x96	; 150
    3b4a:	92 e0       	ldi	r25, 0x02	; 2
    3b4c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Right of\n");
    3b50:	83 eb       	ldi	r24, 0xB3	; 179
    3b52:	92 e0       	ldi	r25, 0x02	; 2
    3b54:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Center\n");
    3b58:	8c ea       	ldi	r24, 0xAC	; 172
    3b5a:	92 e0       	ldi	r25, 0x02	; 2
    3b5c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			LP = 0;
			RP = leftIR - avrageIR;
    3b60:	a5 01       	movw	r20, r10
    3b62:	94 01       	movw	r18, r8
    3b64:	6a 85       	ldd	r22, Y+10	; 0x0a
    3b66:	7b 85       	ldd	r23, Y+11	; 0x0b
    3b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b6c:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3b70:	4b 01       	movw	r8, r22
    3b72:	5c 01       	movw	r10, r24
			LCD_clear();
			LCD_printf("Center Follow\n");
			LCD_printf("Right of\n");
			LCD_printf("Center\n");

			LP = 0;
    3b74:	c1 2c       	mov	r12, r1
    3b76:	d1 2c       	mov	r13, r1
    3b78:	76 01       	movw	r14, r12
    3b7a:	13 c0       	rjmp	.+38     	; 0x3ba2 <centerFollow+0x166>
			RP = leftIR - avrageIR;
			LI = 0;
			RI = RI++;
		} else {
			//means center of center
			LCD_clear();
    3b7c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("I shall\n");
    3b80:	8c eb       	ldi	r24, 0xBC	; 188
    3b82:	92 e0       	ldi	r25, 0x02	; 2
    3b84:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("fear no\n");
    3b88:	84 ec       	ldi	r24, 0xC4	; 196
    3b8a:	92 e0       	ldi	r25, 0x02	; 2
    3b8c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("evil\n");
    3b90:	8c ec       	ldi	r24, 0xCC	; 204
    3b92:	92 e0       	ldi	r25, 0x02	; 2
    3b94:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			LP = 0;
			RP = 0;
    3b98:	81 2c       	mov	r8, r1
    3b9a:	91 2c       	mov	r9, r1
    3b9c:	54 01       	movw	r10, r8
			LCD_clear();
			LCD_printf("I shall\n");
			LCD_printf("fear no\n");
			LCD_printf("evil\n");

			LP = 0;
    3b9e:	75 01       	movw	r14, r10
    3ba0:	64 01       	movw	r12, r8
			RI = 0;
		}

		// PID lopp

		LWS = KP*LP + KI*LI + KD*oLWS + base; // Proportinal and Integral Control
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	a9 01       	movw	r20, r18
    3ba8:	c7 01       	movw	r24, r14
    3baa:	b6 01       	movw	r22, r12
    3bac:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3bb0:	6b 01       	movw	r12, r22
    3bb2:	7c 01       	movw	r14, r24
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	a9 01       	movw	r20, r18
    3bba:	63 2d       	mov	r22, r3
    3bbc:	72 2d       	mov	r23, r2
    3bbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bc2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3bc6:	9b 01       	movw	r18, r22
    3bc8:	ac 01       	movw	r20, r24
    3bca:	c7 01       	movw	r24, r14
    3bcc:	b6 01       	movw	r22, r12
    3bce:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 ef       	ldi	r20, 0xF0	; 240
    3bd8:	52 e4       	ldi	r21, 0x42	; 66
    3bda:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3bde:	69 83       	std	Y+1, r22	; 0x01
    3be0:	79 87       	std	Y+9, r23	; 0x09
    3be2:	18 2f       	mov	r17, r24
    3be4:	09 2f       	mov	r16, r25
		RWS = KP*RP + KI*RI + KD*oRWS + base;
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	a9 01       	movw	r20, r18
    3bec:	c5 01       	movw	r24, r10
    3bee:	b4 01       	movw	r22, r8
    3bf0:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3bf4:	6b 01       	movw	r12, r22
    3bf6:	7c 01       	movw	r14, r24
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	a9 01       	movw	r20, r18
    3bfe:	6d 81       	ldd	r22, Y+5	; 0x05
    3c00:	7e 81       	ldd	r23, Y+6	; 0x06
    3c02:	8f 81       	ldd	r24, Y+7	; 0x07
    3c04:	98 85       	ldd	r25, Y+8	; 0x08
    3c06:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3c0a:	9b 01       	movw	r18, r22
    3c0c:	ac 01       	movw	r20, r24
    3c0e:	c7 01       	movw	r24, r14
    3c10:	b6 01       	movw	r22, r12
    3c12:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 ef       	ldi	r20, 0xF0	; 240
    3c1c:	52 e4       	ldi	r21, 0x42	; 66
    3c1e:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3c22:	c6 2e       	mov	r12, r22
    3c24:	d7 2e       	mov	r13, r23
    3c26:	e8 2e       	mov	r14, r24
    3c28:	f9 2e       	mov	r15, r25
		if (oLWS == 0){ // For first case
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	a9 01       	movw	r20, r18
    3c30:	63 2d       	mov	r22, r3
    3c32:	72 2d       	mov	r23, r2
    3c34:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c36:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c38:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	08 c0       	rjmp	.+16     	; 0x3c50 <centerFollow+0x214>
			oLWS = LWS;
			oRWS = RWS;
    3c40:	cd 82       	std	Y+5, r12	; 0x05
    3c42:	de 82       	std	Y+6, r13	; 0x06
    3c44:	ef 82       	std	Y+7, r14	; 0x07
    3c46:	f8 86       	std	Y+8, r15	; 0x08
		// PID lopp

		LWS = KP*LP + KI*LI + KD*oLWS + base; // Proportinal and Integral Control
		RWS = KP*RP + KI*RI + KD*oRWS + base;
		if (oLWS == 0){ // For first case
			oLWS = LWS;
    3c48:	39 80       	ldd	r3, Y+1	; 0x01
    3c4a:	29 84       	ldd	r2, Y+9	; 0x09
    3c4c:	1e 87       	std	Y+14, r17	; 0x0e
    3c4e:	0f 87       	std	Y+15, r16	; 0x0f
			oRWS = RWS;
		}
		LWS = LWS + KD*(oLWS-LWS); // Derivative Control
    3c50:	29 81       	ldd	r18, Y+1	; 0x01
    3c52:	39 85       	ldd	r19, Y+9	; 0x09
    3c54:	41 2f       	mov	r20, r17
    3c56:	50 2f       	mov	r21, r16
    3c58:	63 2d       	mov	r22, r3
    3c5a:	72 2d       	mov	r23, r2
    3c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c60:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	a9 01       	movw	r20, r18
    3c6a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3c6e:	29 81       	ldd	r18, Y+1	; 0x01
    3c70:	39 85       	ldd	r19, Y+9	; 0x09
    3c72:	41 2f       	mov	r20, r17
    3c74:	50 2f       	mov	r21, r16
    3c76:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3c7a:	36 2e       	mov	r3, r22
    3c7c:	27 2e       	mov	r2, r23
    3c7e:	8e 87       	std	Y+14, r24	; 0x0e
    3c80:	9f 87       	std	Y+15, r25	; 0x0f
		RWS = RWS + KD*(oRWS-RWS);
    3c82:	2c 2d       	mov	r18, r12
    3c84:	3d 2d       	mov	r19, r13
    3c86:	4e 2d       	mov	r20, r14
    3c88:	5f 2d       	mov	r21, r15
    3c8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c8c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c90:	98 85       	ldd	r25, Y+8	; 0x08
    3c92:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	a9 01       	movw	r20, r18
    3c9c:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3ca0:	2c 2d       	mov	r18, r12
    3ca2:	3d 2d       	mov	r19, r13
    3ca4:	4e 2d       	mov	r20, r14
    3ca6:	5f 2d       	mov	r21, r15
    3ca8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3cac:	6d 83       	std	Y+5, r22	; 0x05
    3cae:	7e 83       	std	Y+6, r23	; 0x06
    3cb0:	8f 83       	std	Y+7, r24	; 0x07
    3cb2:	98 87       	std	Y+8, r25	; 0x08

		STEPPER_move_rn(STEPPER_BOTH, // Forward Movement based on input speeds
    3cb4:	63 2d       	mov	r22, r3
    3cb6:	72 2d       	mov	r23, r2
    3cb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cba:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cbc:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    3cc0:	69 83       	std	Y+1, r22	; 0x01
    3cc2:	7a 83       	std	Y+2, r23	; 0x02
    3cc4:	8b 83       	std	Y+3, r24	; 0x03
    3cc6:	9c 83       	std	Y+4, r25	; 0x04
    3cc8:	1f 92       	push	r1
    3cca:	1f 92       	push	r1
    3ccc:	1f 92       	push	r1
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	8f 93       	push	r24
    3cd2:	90 e9       	ldi	r25, 0x90	; 144
    3cd4:	9f 93       	push	r25
    3cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    3cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    3cda:	8f 81       	ldd	r24, Y+7	; 0x07
    3cdc:	98 85       	ldd	r25, Y+8	; 0x08
    3cde:	0e 94 39 2b 	call	0x5672	; 0x5672 <__fixunssfsi>
    3ce2:	7f 93       	push	r23
    3ce4:	6f 93       	push	r22
    3ce6:	1f 92       	push	r1
    3ce8:	1f 92       	push	r1
    3cea:	81 2c       	mov	r8, r1
    3cec:	a1 2c       	mov	r10, r1
    3cee:	b1 2c       	mov	r11, r1
    3cf0:	c1 2c       	mov	r12, r1
    3cf2:	0f 2e       	mov	r0, r31
    3cf4:	f0 e9       	ldi	r31, 0x90	; 144
    3cf6:	ef 2e       	mov	r14, r31
    3cf8:	ff 24       	eor	r15, r15
    3cfa:	f3 94       	inc	r15
    3cfc:	f0 2d       	mov	r31, r0
    3cfe:	09 81       	ldd	r16, Y+1	; 0x01
    3d00:	1a 81       	ldd	r17, Y+2	; 0x02
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	62 e0       	ldi	r22, 0x02	; 2
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
    3d0c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
	char KI = 0.75;
	char KD = 0;

	rightIR = getRightIR();
	leftIR = getLeftIR();
	while ((leftIR < ICT) && (rightIR < ICT)){ // If between two walls
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	f8 94       	cli
    3d14:	de bf       	out	0x3e, r29	; 62
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e4       	ldi	r20, 0x40	; 64
    3d20:	51 e4       	ldi	r21, 0x41	; 65
    3d22:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d24:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d26:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d28:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d2a:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3d2e:	88 23       	and	r24, r24
    3d30:	5c f4       	brge	.+22     	; 0x3d48 <centerFollow+0x30c>
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e4       	ldi	r20, 0x40	; 64
    3d38:	51 e4       	ldi	r21, 0x41	; 65
    3d3a:	c3 01       	movw	r24, r6
    3d3c:	b2 01       	movw	r22, r4
    3d3e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3d42:	88 23       	and	r24, r24
    3d44:	0c f4       	brge	.+2      	; 0x3d48 <centerFollow+0x30c>
    3d46:	b8 ce       	rjmp	.-656    	; 0x3ab8 <centerFollow+0x7c>
				STEPPER_FWD, RWS, 400);	//Right

		oLWS = LWS;
		oRWS = RWS;
	}	
}
    3d48:	2f 96       	adiw	r28, 0x0f	; 15
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	bf 90       	pop	r11
    3d66:	af 90       	pop	r10
    3d68:	9f 90       	pop	r9
    3d6a:	8f 90       	pop	r8
    3d6c:	7f 90       	pop	r7
    3d6e:	6f 90       	pop	r6
    3d70:	5f 90       	pop	r5
    3d72:	4f 90       	pop	r4
    3d74:	3f 90       	pop	r3
    3d76:	2f 90       	pop	r2
    3d78:	08 95       	ret

00003d7a <rightStepFollow>:
//
/* ---------------- Underneath are functions that use stepping: ---------------- */
//
//

void rightStepFollow(float* X, float* Y, float* orientation, float X_tar, float Y_tar){// Feed the addresses of X, Y and current orientation
    3d7a:	2f 92       	push	r2
    3d7c:	3f 92       	push	r3
    3d7e:	4f 92       	push	r4
    3d80:	5f 92       	push	r5
    3d82:	6f 92       	push	r6
    3d84:	7f 92       	push	r7
    3d86:	8f 92       	push	r8
    3d88:	9f 92       	push	r9
    3d8a:	af 92       	push	r10
    3d8c:	bf 92       	push	r11
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	64 97       	sbiw	r28, 0x14	; 20
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
    3db2:	7e 83       	std	Y+6, r23	; 0x06
    3db4:	6d 83       	std	Y+5, r22	; 0x05
    3db6:	3a 01       	movw	r6, r20
    3db8:	0b 87       	std	Y+11, r16	; 0x0b
    3dba:	1c 87       	std	Y+12, r17	; 0x0c
    3dbc:	2d 87       	std	Y+13, r18	; 0x0d
    3dbe:	3e 87       	std	Y+14, r19	; 0x0e
    3dc0:	cf 86       	std	Y+15, r12	; 0x0f
    3dc2:	d8 8a       	std	Y+16, r13	; 0x10
    3dc4:	e9 8a       	std	Y+17, r14	; 0x11
    3dc6:	fa 8a       	std	Y+18, r15	; 0x12
	char lowerLimit = 5;
	char higherLimit = 5;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, cur_Angle;
	float oLWS = 0;
	float oRWS = 0;
    3dc8:	19 82       	std	Y+1, r1	; 0x01
    3dca:	1a 82       	std	Y+2, r1	; 0x02
    3dcc:	41 2c       	mov	r4, r1
    3dce:	51 2c       	mov	r5, r1
void rightStepFollow(float* X, float* Y, float* orientation, float X_tar, float Y_tar){// Feed the addresses of X, Y and current orientation
	char lowerLimit = 5;
	char higherLimit = 5;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, cur_Angle;
	float oLWS = 0;
    3dd0:	e1 2c       	mov	r14, r1
    3dd2:	f1 2c       	mov	r15, r1
    3dd4:	31 2c       	mov	r3, r1
    3dd6:	21 2c       	mov	r2, r1
    3dd8:	ec 8a       	std	Y+20, r14	; 0x14
    3dda:	fb 8a       	std	Y+19, r15	; 0x13
	char KI = 0;
	char KD = 0;
	char break_condition = 0;

	while(break_condition == 0){
		frontIR = getFrontIR();
    3ddc:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    3de0:	6b 01       	movw	r12, r22
    3de2:	7c 01       	movw	r14, r24
		rightIR = getRightIR();
    3de4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    3de8:	4b 01       	movw	r8, r22
    3dea:	5c 01       	movw	r10, r24
		leftIR = getLeftIR();
    3dec:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
		if((frontIR > ICT) && (rightIR < ICT)){
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	40 e4       	ldi	r20, 0x40	; 64
    3df6:	51 e4       	ldi	r21, 0x41	; 65
    3df8:	c7 01       	movw	r24, r14
    3dfa:	b6 01       	movw	r22, r12
    3dfc:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3e00:	18 16       	cp	r1, r24
    3e02:	0c f0       	brlt	.+2      	; 0x3e06 <rightStepFollow+0x8c>
    3e04:	33 c1       	rjmp	.+614    	; 0x406c <rightStepFollow+0x2f2>
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e4       	ldi	r20, 0x40	; 64
    3e0c:	51 e4       	ldi	r21, 0x41	; 65
    3e0e:	c5 01       	movw	r24, r10
    3e10:	b4 01       	movw	r22, r8
    3e12:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3e16:	88 23       	and	r24, r24
    3e18:	0c f0       	brlt	.+2      	; 0x3e1c <rightStepFollow+0xa2>
    3e1a:	28 c1       	rjmp	.+592    	; 0x406c <rightStepFollow+0x2f2>
			if (rightIR < lowerLimit){
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 ea       	ldi	r20, 0xA0	; 160
    3e22:	50 e4       	ldi	r21, 0x40	; 64
    3e24:	c5 01       	movw	r24, r10
    3e26:	b4 01       	movw	r22, r8
    3e28:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3e2c:	88 23       	and	r24, r24
    3e2e:	e4 f4       	brge	.+56     	; 0x3e68 <rightStepFollow+0xee>
				LCD_clear();
    3e30:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    3e34:	8a e1       	ldi	r24, 0x1A	; 26
    3e36:	92 e0       	ldi	r25, 0x02	; 2
    3e38:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Inside Target\n");
    3e3c:	87 e2       	ldi	r24, 0x27	; 39
    3e3e:	92 e0       	ldi	r25, 0x02	; 2
    3e40:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    3e44:	85 e3       	ldi	r24, 0x35	; 53
    3e46:	92 e0       	ldi	r25, 0x02	; 2
    3e48:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = lowerLimit - rightIR;
    3e4c:	a5 01       	movw	r20, r10
    3e4e:	94 01       	movw	r18, r8
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	70 e0       	ldi	r23, 0x00	; 0
    3e54:	80 ea       	ldi	r24, 0xA0	; 160
    3e56:	90 e4       	ldi	r25, 0x40	; 64
    3e58:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3e5c:	6b 01       	movw	r12, r22
    3e5e:	7c 01       	movw	r14, r24
				LCD_clear();
				LCD_printf("Right Follow\n");
				LCD_printf("Inside Target\n");
				LCD_printf("Range\n");

				LP = 0;
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	cb 01       	movw	r24, r22
    3e66:	37 c0       	rjmp	.+110    	; 0x3ed6 <rightStepFollow+0x15c>
				RP = lowerLimit - rightIR;
				LI = 0;
				RI = RI++;
			}else if(rightIR > higherLimit){
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 ea       	ldi	r20, 0xA0	; 160
    3e6e:	50 e4       	ldi	r21, 0x40	; 64
    3e70:	c5 01       	movw	r24, r10
    3e72:	b4 01       	movw	r22, r8
    3e74:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	d4 f4       	brge	.+52     	; 0x3eb0 <rightStepFollow+0x136>
				LCD_clear();
    3e7c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    3e80:	8a e1       	ldi	r24, 0x1A	; 26
    3e82:	92 e0       	ldi	r25, 0x02	; 2
    3e84:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Outside Target\n");
    3e88:	8b e3       	ldi	r24, 0x3B	; 59
    3e8a:	92 e0       	ldi	r25, 0x02	; 2
    3e8c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    3e90:	85 e3       	ldi	r24, 0x35	; 53
    3e92:	92 e0       	ldi	r25, 0x02	; 2
    3e94:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = rightIR - higherLimit;
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	40 ea       	ldi	r20, 0xA0	; 160
    3e9e:	50 e4       	ldi	r21, 0x40	; 64
    3ea0:	c5 01       	movw	r24, r10
    3ea2:	b4 01       	movw	r22, r8
    3ea4:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
				RP = 0;
    3ea8:	c1 2c       	mov	r12, r1
    3eaa:	d1 2c       	mov	r13, r1
    3eac:	76 01       	movw	r14, r12
    3eae:	13 c0       	rjmp	.+38     	; 0x3ed6 <rightStepFollow+0x15c>
				LI = LI++;
				RI = 0;
			}else{
				LCD_clear();
    3eb0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Right Follow\n");
    3eb4:	8a e1       	ldi	r24, 0x1A	; 26
    3eb6:	92 e0       	ldi	r25, 0x02	; 2
    3eb8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("At Target\n");
    3ebc:	8a e4       	ldi	r24, 0x4A	; 74
    3ebe:	92 e0       	ldi	r25, 0x02	; 2
    3ec0:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    3ec4:	85 e3       	ldi	r24, 0x35	; 53
    3ec6:	92 e0       	ldi	r25, 0x02	; 2
    3ec8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = 0;
    3ecc:	c1 2c       	mov	r12, r1
    3ece:	d1 2c       	mov	r13, r1
    3ed0:	76 01       	movw	r14, r12
				LCD_clear();
				LCD_printf("Right Follow\n");
				LCD_printf("At Target\n");
				LCD_printf("Range\n");

				LP = 0;
    3ed2:	c7 01       	movw	r24, r14
    3ed4:	b6 01       	movw	r22, r12
				RP = 0;
				LI = 0;
				RI = 0;
			}

			LWS = KP*LP + KI*LI + base;
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	a9 01       	movw	r20, r18
    3edc:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 ef       	ldi	r20, 0xF0	; 240
    3ee6:	52 e4       	ldi	r21, 0x42	; 66
    3ee8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3eec:	86 2e       	mov	r8, r22
    3eee:	97 2e       	mov	r9, r23
    3ef0:	a8 2e       	mov	r10, r24
    3ef2:	b9 2e       	mov	r11, r25
			RWS = KP*RP + KI*RI + base;
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	a9 01       	movw	r20, r18
    3efa:	c7 01       	movw	r24, r14
    3efc:	b6 01       	movw	r22, r12
    3efe:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 ef       	ldi	r20, 0xF0	; 240
    3f08:	52 e4       	ldi	r21, 0x42	; 66
    3f0a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3f0e:	c6 2e       	mov	r12, r22
    3f10:	d7 2e       	mov	r13, r23
    3f12:	e8 2e       	mov	r14, r24
    3f14:	f9 2e       	mov	r15, r25
			if (oLWS == 0){
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	a9 01       	movw	r20, r18
    3f1c:	6c 89       	ldd	r22, Y+20	; 0x14
    3f1e:	7b 89       	ldd	r23, Y+19	; 0x13
    3f20:	83 2d       	mov	r24, r3
    3f22:	92 2d       	mov	r25, r2
    3f24:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    3f28:	81 11       	cpse	r24, r1
    3f2a:	08 c0       	rjmp	.+16     	; 0x3f3c <rightStepFollow+0x1c2>
				oLWS = LWS;
				oRWS = RWS;
    3f2c:	c9 82       	std	Y+1, r12	; 0x01
    3f2e:	da 82       	std	Y+2, r13	; 0x02
    3f30:	5e 2c       	mov	r5, r14
    3f32:	4f 2c       	mov	r4, r15
			}

			LWS = KP*LP + KI*LI + base;
			RWS = KP*RP + KI*RI + base;
			if (oLWS == 0){
				oLWS = LWS;
    3f34:	8c 8a       	std	Y+20, r8	; 0x14
    3f36:	9b 8a       	std	Y+19, r9	; 0x13
    3f38:	3a 2c       	mov	r3, r10
    3f3a:	2b 2c       	mov	r2, r11
				oRWS = RWS;
			}
			LWS = LWS + KD*(oLWS-LWS);
    3f3c:	28 2d       	mov	r18, r8
    3f3e:	39 2d       	mov	r19, r9
    3f40:	4a 2d       	mov	r20, r10
    3f42:	5b 2d       	mov	r21, r11
    3f44:	6c 89       	ldd	r22, Y+20	; 0x14
    3f46:	7b 89       	ldd	r23, Y+19	; 0x13
    3f48:	83 2d       	mov	r24, r3
    3f4a:	92 2d       	mov	r25, r2
    3f4c:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	a9 01       	movw	r20, r18
    3f56:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3f5a:	28 2d       	mov	r18, r8
    3f5c:	39 2d       	mov	r19, r9
    3f5e:	4a 2d       	mov	r20, r10
    3f60:	5b 2d       	mov	r21, r11
    3f62:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3f66:	6c 8b       	std	Y+20, r22	; 0x14
    3f68:	7b 8b       	std	Y+19, r23	; 0x13
    3f6a:	38 2e       	mov	r3, r24
    3f6c:	29 2e       	mov	r2, r25
			RWS = RWS + KD*(oRWS-RWS);
    3f6e:	2c 2d       	mov	r18, r12
    3f70:	3d 2d       	mov	r19, r13
    3f72:	4e 2d       	mov	r20, r14
    3f74:	5f 2d       	mov	r21, r15
    3f76:	69 81       	ldd	r22, Y+1	; 0x01
    3f78:	7a 81       	ldd	r23, Y+2	; 0x02
    3f7a:	85 2d       	mov	r24, r5
    3f7c:	94 2d       	mov	r25, r4
    3f7e:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	a9 01       	movw	r20, r18
    3f88:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3f8c:	2c 2d       	mov	r18, r12
    3f8e:	3d 2d       	mov	r19, r13
    3f90:	4e 2d       	mov	r20, r14
    3f92:	5f 2d       	mov	r21, r15
    3f94:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3f98:	69 83       	std	Y+1, r22	; 0x01
    3f9a:	7a 83       	std	Y+2, r23	; 0x02
    3f9c:	58 2e       	mov	r5, r24
    3f9e:	49 2e       	mov	r4, r25
			

			pseudo_Stepper_Step(RWS, LWS, 0.1);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    3fa0:	1d ec       	ldi	r17, 0xCD	; 205
    3fa2:	e1 2e       	mov	r14, r17
    3fa4:	1c ec       	ldi	r17, 0xCC	; 204
    3fa6:	f1 2e       	mov	r15, r17
    3fa8:	0c ec       	ldi	r16, 0xCC	; 204
    3faa:	1d e3       	ldi	r17, 0x3D	; 61
    3fac:	2c 89       	ldd	r18, Y+20	; 0x14
    3fae:	3b 89       	ldd	r19, Y+19	; 0x13
    3fb0:	43 2d       	mov	r20, r3
    3fb2:	52 2d       	mov	r21, r2
    3fb4:	94 2d       	mov	r25, r4
    3fb6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			oLWS = LWS;
			oRWS = RWS;

			// Computations for position
			*X = cos((*orientation))*((RWS+LWS)*0.1*0.108/2) + (*X);
    3fba:	f3 01       	movw	r30, r6
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    3fc8:	4b 01       	movw	r8, r22
    3fca:	5c 01       	movw	r10, r24
    3fcc:	2c 89       	ldd	r18, Y+20	; 0x14
    3fce:	3b 89       	ldd	r19, Y+19	; 0x13
    3fd0:	43 2d       	mov	r20, r3
    3fd2:	52 2d       	mov	r21, r2
    3fd4:	69 81       	ldd	r22, Y+1	; 0x01
    3fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    3fd8:	85 2d       	mov	r24, r5
    3fda:	94 2d       	mov	r25, r4
    3fdc:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    3fe0:	a8 01       	movw	r20, r16
    3fe2:	97 01       	movw	r18, r14
    3fe4:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3fe8:	2b e1       	ldi	r18, 0x1B	; 27
    3fea:	3f e2       	ldi	r19, 0x2F	; 47
    3fec:	4d ed       	ldi	r20, 0xDD	; 221
    3fee:	5d e3       	ldi	r21, 0x3D	; 61
    3ff0:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	5f e3       	ldi	r21, 0x3F	; 63
    3ffc:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4000:	6b 01       	movw	r12, r22
    4002:	7c 01       	movw	r14, r24
    4004:	9b 01       	movw	r18, r22
    4006:	ac 01       	movw	r20, r24
    4008:	c5 01       	movw	r24, r10
    400a:	b4 01       	movw	r22, r8
    400c:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	eb 81       	ldd	r30, Y+3	; 0x03
    4016:	fc 81       	ldd	r31, Y+4	; 0x04
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4024:	eb 81       	ldd	r30, Y+3	; 0x03
    4026:	fc 81       	ldd	r31, Y+4	; 0x04
    4028:	60 83       	st	Z, r22
    402a:	71 83       	std	Z+1, r23	; 0x01
    402c:	82 83       	std	Z+2, r24	; 0x02
    402e:	93 83       	std	Z+3, r25	; 0x03
			*Y = sin((*orientation))*((RWS+LWS)*0.1*0.108/2) + (*Y);	
    4030:	f3 01       	movw	r30, r6
    4032:	60 81       	ld	r22, Z
    4034:	71 81       	ldd	r23, Z+1	; 0x01
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    403e:	9b 01       	movw	r18, r22
    4040:	ac 01       	movw	r20, r24
    4042:	c7 01       	movw	r24, r14
    4044:	b6 01       	movw	r22, r12
    4046:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    404a:	9b 01       	movw	r18, r22
    404c:	ac 01       	movw	r20, r24
    404e:	ed 81       	ldd	r30, Y+5	; 0x05
    4050:	fe 81       	ldd	r31, Y+6	; 0x06
    4052:	60 81       	ld	r22, Z
    4054:	71 81       	ldd	r23, Z+1	; 0x01
    4056:	82 81       	ldd	r24, Z+2	; 0x02
    4058:	93 81       	ldd	r25, Z+3	; 0x03
    405a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    405e:	ed 81       	ldd	r30, Y+5	; 0x05
    4060:	fe 81       	ldd	r31, Y+6	; 0x06
    4062:	60 83       	st	Z, r22
    4064:	71 83       	std	Z+1, r23	; 0x01
    4066:	82 83       	std	Z+2, r24	; 0x02
    4068:	93 83       	std	Z+3, r25	; 0x03
    406a:	b8 ce       	rjmp	.-656    	; 0x3ddc <rightStepFollow+0x62>
			//

		}else if((frontIR < ICT) && (rightIR < ICT)){
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e4       	ldi	r20, 0x40	; 64
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	c7 01       	movw	r24, r14
    4076:	b6 01       	movw	r22, r12
    4078:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    407c:	88 23       	and	r24, r24
    407e:	0c f0       	brlt	.+2      	; 0x4082 <rightStepFollow+0x308>
    4080:	94 c0       	rjmp	.+296    	; 0x41aa <rightStepFollow+0x430>
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	40 e4       	ldi	r20, 0x40	; 64
    4088:	51 e4       	ldi	r21, 0x41	; 65
    408a:	c5 01       	movw	r24, r10
    408c:	b4 01       	movw	r22, r8
    408e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4092:	88 23       	and	r24, r24
    4094:	0c f0       	brlt	.+2      	; 0x4098 <rightStepFollow+0x31e>
    4096:	89 c0       	rjmp	.+274    	; 0x41aa <rightStepFollow+0x430>
			LCD_clear();
    4098:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Right Follow\n");
    409c:	8a e1       	ldi	r24, 0x1A	; 26
    409e:	92 e0       	ldi	r25, 0x02	; 2
    40a0:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Wall in Front\n");
    40a4:	84 e5       	ldi	r24, 0x54	; 84
    40a6:	92 e0       	ldi	r25, 0x02	; 2
    40a8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Left\n");
    40ac:	82 e6       	ldi	r24, 0x62	; 98
    40ae:	92 e0       	ldi	r25, 0x02	; 2
    40b0:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			pseudo_Stepper_Step(150, 150, 0.5);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    40b4:	e1 2c       	mov	r14, r1
    40b6:	f1 2c       	mov	r15, r1
    40b8:	00 e0       	ldi	r16, 0x00	; 0
    40ba:	1f e3       	ldi	r17, 0x3F	; 63
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	46 e1       	ldi	r20, 0x16	; 22
    40c2:	53 e4       	ldi	r21, 0x43	; 67
    40c4:	ca 01       	movw	r24, r20
    40c6:	b9 01       	movw	r22, r18
    40c8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			cur_Angle = Tar_vs_Cur_Angle(X_tar, Y_tar, *X, *Y);
    40cc:	ed 81       	ldd	r30, Y+5	; 0x05
    40ce:	fe 81       	ldd	r31, Y+6	; 0x06
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	82 81       	ldd	r24, Z+2	; 0x02
    40d6:	93 81       	ldd	r25, Z+3	; 0x03
    40d8:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    40dc:	6b 01       	movw	r12, r22
    40de:	7c 01       	movw	r14, r24
    40e0:	eb 81       	ldd	r30, Y+3	; 0x03
    40e2:	fc 81       	ldd	r31, Y+4	; 0x04
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    40f0:	6f 83       	std	Y+7, r22	; 0x07
    40f2:	78 87       	std	Y+8, r23	; 0x08
    40f4:	89 87       	std	Y+9, r24	; 0x09
    40f6:	9a 87       	std	Y+10, r25	; 0x0a
    40f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    40fa:	78 89       	ldd	r23, Y+16	; 0x10
    40fc:	89 89       	ldd	r24, Y+17	; 0x11
    40fe:	9a 89       	ldd	r25, Y+18	; 0x12
    4100:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4104:	4b 01       	movw	r8, r22
    4106:	5c 01       	movw	r10, r24
    4108:	6b 85       	ldd	r22, Y+11	; 0x0b
    410a:	7c 85       	ldd	r23, Y+12	; 0x0c
    410c:	8d 85       	ldd	r24, Y+13	; 0x0d
    410e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4110:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	96 01       	movw	r18, r12
    411a:	4f 81       	ldd	r20, Y+7	; 0x07
    411c:	58 85       	ldd	r21, Y+8	; 0x08
    411e:	b4 01       	movw	r22, r8
    4120:	0e 94 13 16 	call	0x2c26	; 0x2c26 <Tar_vs_Cur_Angle>
    4124:	6b 01       	movw	r12, r22
    4126:	7c 01       	movw	r14, r24

			if ((cur_Angle >= (*orientation))&&(cur_Angle <= ((*orientation)+90))){
    4128:	f3 01       	movw	r30, r6
    412a:	80 80       	ld	r8, Z
    412c:	91 80       	ldd	r9, Z+1	; 0x01
    412e:	a2 80       	ldd	r10, Z+2	; 0x02
    4130:	b3 80       	ldd	r11, Z+3	; 0x03
    4132:	a5 01       	movw	r20, r10
    4134:	94 01       	movw	r18, r8
    4136:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    413a:	88 23       	and	r24, r24
    413c:	0c f1       	brlt	.+66     	; 0x4180 <rightStepFollow+0x406>
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	44 eb       	ldi	r20, 0xB4	; 180
    4144:	52 e4       	ldi	r21, 0x42	; 66
    4146:	c5 01       	movw	r24, r10
    4148:	b4 01       	movw	r22, r8
    414a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    414e:	9b 01       	movw	r18, r22
    4150:	ac 01       	movw	r20, r24
    4152:	c7 01       	movw	r24, r14
    4154:	b6 01       	movw	r22, r12
    4156:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    415a:	18 16       	cp	r1, r24
    415c:	8c f0       	brlt	.+34     	; 0x4180 <rightStepFollow+0x406>
				go2Angle(cur_Angle-(*orientation)); // + is left, - is right
    415e:	a5 01       	movw	r20, r10
    4160:	94 01       	movw	r18, r8
    4162:	c7 01       	movw	r24, r14
    4164:	b6 01       	movw	r22, r12
    4166:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    416a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    416e:	cb 01       	movw	r24, r22
    4170:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
				break_condition = 1;

				//Update Orientation
				*orientation = cur_Angle;
    4174:	f3 01       	movw	r30, r6
    4176:	c0 82       	st	Z, r12
    4178:	d1 82       	std	Z+1, r13	; 0x01
    417a:	e2 82       	std	Z+2, r14	; 0x02
    417c:	f3 82       	std	Z+3, r15	; 0x03
    417e:	5d c1       	rjmp	.+698    	; 0x443a <rightStepFollow+0x6c0>
				//

			}else{
				go2Angle(90); // + is left, - is right
    4180:	8a e5       	ldi	r24, 0x5A	; 90
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>

				//Update Orientation
				*orientation = (*orientation) + 90;
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	44 eb       	ldi	r20, 0xB4	; 180
    418e:	52 e4       	ldi	r21, 0x42	; 66
    4190:	f3 01       	movw	r30, r6
    4192:	60 81       	ld	r22, Z
    4194:	71 81       	ldd	r23, Z+1	; 0x01
    4196:	82 81       	ldd	r24, Z+2	; 0x02
    4198:	93 81       	ldd	r25, Z+3	; 0x03
    419a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    419e:	f3 01       	movw	r30, r6
    41a0:	60 83       	st	Z, r22
    41a2:	71 83       	std	Z+1, r23	; 0x01
    41a4:	82 83       	std	Z+2, r24	; 0x02
    41a6:	93 83       	std	Z+3, r25	; 0x03
    41a8:	19 ce       	rjmp	.-974    	; 0x3ddc <rightStepFollow+0x62>
			}
			LP = 0;
			RP = 0;
			LI = 0;
			RI = 0;
		}else if((frontIR > ICT) && (rightIR > ICT)){
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e4       	ldi	r20, 0x40	; 64
    41b0:	51 e4       	ldi	r21, 0x41	; 65
    41b2:	c7 01       	movw	r24, r14
    41b4:	b6 01       	movw	r22, r12
    41b6:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    41ba:	18 16       	cp	r1, r24
    41bc:	0c f0       	brlt	.+2      	; 0x41c0 <rightStepFollow+0x446>
    41be:	0e ce       	rjmp	.-996    	; 0x3ddc <rightStepFollow+0x62>
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e4       	ldi	r20, 0x40	; 64
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	c5 01       	movw	r24, r10
    41ca:	b4 01       	movw	r22, r8
    41cc:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    41d0:	18 16       	cp	r1, r24
    41d2:	0c f0       	brlt	.+2      	; 0x41d6 <rightStepFollow+0x45c>
    41d4:	03 ce       	rjmp	.-1018   	; 0x3ddc <rightStepFollow+0x62>
			LCD_clear();
    41d6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Right Follow\n");
    41da:	8a e1       	ldi	r24, 0x1A	; 26
    41dc:	92 e0       	ldi	r25, 0x02	; 2
    41de:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Lack of Wall\n");
    41e2:	8f e6       	ldi	r24, 0x6F	; 111
    41e4:	92 e0       	ldi	r25, 0x02	; 2
    41e6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Right\n");
    41ea:	8c e7       	ldi	r24, 0x7C	; 124
    41ec:	92 e0       	ldi	r25, 0x02	; 2
    41ee:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			pseudo_Stepper_Step(150, 150, 0.5);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    41f2:	e1 2c       	mov	r14, r1
    41f4:	f1 2c       	mov	r15, r1
    41f6:	00 e0       	ldi	r16, 0x00	; 0
    41f8:	1f e3       	ldi	r17, 0x3F	; 63
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	46 e1       	ldi	r20, 0x16	; 22
    4200:	53 e4       	ldi	r21, 0x43	; 67
    4202:	ca 01       	movw	r24, r20
    4204:	b9 01       	movw	r22, r18
    4206:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			// Computations for position
			*X = cos((*orientation))*(75*0.108) + (*X);
    420a:	f3 01       	movw	r30, r6
    420c:	60 81       	ld	r22, Z
    420e:	71 81       	ldd	r23, Z+1	; 0x01
    4210:	82 81       	ldd	r24, Z+2	; 0x02
    4212:	93 81       	ldd	r25, Z+3	; 0x03
    4214:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    4218:	2a e9       	ldi	r18, 0x9A	; 154
    421a:	39 e9       	ldi	r19, 0x99	; 153
    421c:	41 e0       	ldi	r20, 0x01	; 1
    421e:	51 e4       	ldi	r21, 0x41	; 65
    4220:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4224:	9b 01       	movw	r18, r22
    4226:	ac 01       	movw	r20, r24
    4228:	eb 81       	ldd	r30, Y+3	; 0x03
    422a:	fc 81       	ldd	r31, Y+4	; 0x04
    422c:	60 81       	ld	r22, Z
    422e:	71 81       	ldd	r23, Z+1	; 0x01
    4230:	82 81       	ldd	r24, Z+2	; 0x02
    4232:	93 81       	ldd	r25, Z+3	; 0x03
    4234:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4238:	eb 81       	ldd	r30, Y+3	; 0x03
    423a:	fc 81       	ldd	r31, Y+4	; 0x04
    423c:	60 83       	st	Z, r22
    423e:	71 83       	std	Z+1, r23	; 0x01
    4240:	82 83       	std	Z+2, r24	; 0x02
    4242:	93 83       	std	Z+3, r25	; 0x03
			*Y = sin((*orientation))*(75*0.108) + (*Y);	
    4244:	f3 01       	movw	r30, r6
    4246:	60 81       	ld	r22, Z
    4248:	71 81       	ldd	r23, Z+1	; 0x01
    424a:	82 81       	ldd	r24, Z+2	; 0x02
    424c:	93 81       	ldd	r25, Z+3	; 0x03
    424e:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    4252:	2a e9       	ldi	r18, 0x9A	; 154
    4254:	39 e9       	ldi	r19, 0x99	; 153
    4256:	41 e0       	ldi	r20, 0x01	; 1
    4258:	51 e4       	ldi	r21, 0x41	; 65
    425a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    425e:	9b 01       	movw	r18, r22
    4260:	ac 01       	movw	r20, r24
    4262:	ed 81       	ldd	r30, Y+5	; 0x05
    4264:	fe 81       	ldd	r31, Y+6	; 0x06
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4272:	ed 81       	ldd	r30, Y+5	; 0x05
    4274:	fe 81       	ldd	r31, Y+6	; 0x06
    4276:	60 83       	st	Z, r22
    4278:	71 83       	std	Z+1, r23	; 0x01
    427a:	82 83       	std	Z+2, r24	; 0x02
    427c:	93 83       	std	Z+3, r25	; 0x03
			//

			rightIR = getRightIR();
    427e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
			if ((frontIR > ICT) && (rightIR > ICT)){
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e4       	ldi	r20, 0x40	; 64
    4288:	51 e4       	ldi	r21, 0x41	; 65
    428a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    428e:	18 16       	cp	r1, r24
    4290:	0c f0       	brlt	.+2      	; 0x4294 <rightStepFollow+0x51a>
    4292:	a4 cd       	rjmp	.-1208   	; 0x3ddc <rightStepFollow+0x62>
				cur_Angle = Tar_vs_Cur_Angle(X_tar, Y_tar, *X, *Y);
    4294:	ed 81       	ldd	r30, Y+5	; 0x05
    4296:	fe 81       	ldd	r31, Y+6	; 0x06
    4298:	60 81       	ld	r22, Z
    429a:	71 81       	ldd	r23, Z+1	; 0x01
    429c:	82 81       	ldd	r24, Z+2	; 0x02
    429e:	93 81       	ldd	r25, Z+3	; 0x03
    42a0:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    42a4:	6b 01       	movw	r12, r22
    42a6:	7c 01       	movw	r14, r24
    42a8:	eb 81       	ldd	r30, Y+3	; 0x03
    42aa:	fc 81       	ldd	r31, Y+4	; 0x04
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    42b8:	6f 83       	std	Y+7, r22	; 0x07
    42ba:	78 87       	std	Y+8, r23	; 0x08
    42bc:	89 87       	std	Y+9, r24	; 0x09
    42be:	9a 87       	std	Y+10, r25	; 0x0a
    42c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    42c2:	78 89       	ldd	r23, Y+16	; 0x10
    42c4:	89 89       	ldd	r24, Y+17	; 0x11
    42c6:	9a 89       	ldd	r25, Y+18	; 0x12
    42c8:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    42cc:	4b 01       	movw	r8, r22
    42ce:	5c 01       	movw	r10, r24
    42d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42d8:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	96 01       	movw	r18, r12
    42e2:	4f 81       	ldd	r20, Y+7	; 0x07
    42e4:	58 85       	ldd	r21, Y+8	; 0x08
    42e6:	b4 01       	movw	r22, r8
    42e8:	0e 94 13 16 	call	0x2c26	; 0x2c26 <Tar_vs_Cur_Angle>
    42ec:	6b 01       	movw	r12, r22
    42ee:	7c 01       	movw	r14, r24

				if ((cur_Angle >= (*orientation)-90)&&(cur_Angle <= ((*orientation)))){
    42f0:	f3 01       	movw	r30, r6
    42f2:	80 80       	ld	r8, Z
    42f4:	91 80       	ldd	r9, Z+1	; 0x01
    42f6:	a2 80       	ldd	r10, Z+2	; 0x02
    42f8:	b3 80       	ldd	r11, Z+3	; 0x03
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	44 eb       	ldi	r20, 0xB4	; 180
    4300:	52 e4       	ldi	r21, 0x42	; 66
    4302:	c5 01       	movw	r24, r10
    4304:	b4 01       	movw	r22, r8
    4306:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    430a:	9b 01       	movw	r18, r22
    430c:	ac 01       	movw	r20, r24
    430e:	c7 01       	movw	r24, r14
    4310:	b6 01       	movw	r22, r12
    4312:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4316:	88 23       	and	r24, r24
    4318:	cc f0       	brlt	.+50     	; 0x434c <rightStepFollow+0x5d2>
    431a:	a5 01       	movw	r20, r10
    431c:	94 01       	movw	r18, r8
    431e:	c7 01       	movw	r24, r14
    4320:	b6 01       	movw	r22, r12
    4322:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4326:	18 16       	cp	r1, r24
    4328:	8c f0       	brlt	.+34     	; 0x434c <rightStepFollow+0x5d2>
					go2Angle(cur_Angle-(*orientation)); // + is left, - is right
    432a:	a5 01       	movw	r20, r10
    432c:	94 01       	movw	r18, r8
    432e:	c7 01       	movw	r24, r14
    4330:	b6 01       	movw	r22, r12
    4332:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4336:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    433a:	cb 01       	movw	r24, r22
    433c:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					break_condition = 1;

					//Update Orientation
					*orientation = cur_Angle;
    4340:	f3 01       	movw	r30, r6
    4342:	c0 82       	st	Z, r12
    4344:	d1 82       	std	Z+1, r13	; 0x01
    4346:	e2 82       	std	Z+2, r14	; 0x02
    4348:	f3 82       	std	Z+3, r15	; 0x03
    434a:	77 c0       	rjmp	.+238    	; 0x443a <rightStepFollow+0x6c0>
					//

				}else{
					go2Angle(-90); // + is left, - is right
    434c:	86 ea       	ldi	r24, 0xA6	; 166
    434e:	9f ef       	ldi	r25, 0xFF	; 255
    4350:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>

					//Update Orientation
					*orientation = (*orientation) - 90;
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	44 eb       	ldi	r20, 0xB4	; 180
    435a:	52 e4       	ldi	r21, 0x42	; 66
    435c:	f3 01       	movw	r30, r6
    435e:	60 81       	ld	r22, Z
    4360:	71 81       	ldd	r23, Z+1	; 0x01
    4362:	82 81       	ldd	r24, Z+2	; 0x02
    4364:	93 81       	ldd	r25, Z+3	; 0x03
    4366:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    436a:	f3 01       	movw	r30, r6
    436c:	60 83       	st	Z, r22
    436e:	71 83       	std	Z+1, r23	; 0x01
    4370:	82 83       	std	Z+2, r24	; 0x02
    4372:	93 83       	std	Z+3, r25	; 0x03
					//

					rightIR = getRightIR();
    4374:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
					while(rightIR > ICT){
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	40 e4       	ldi	r20, 0x40	; 64
    437e:	51 e4       	ldi	r21, 0x41	; 65
    4380:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4384:	18 16       	cp	r1, r24
    4386:	0c f0       	brlt	.+2      	; 0x438a <rightStepFollow+0x610>
    4388:	29 cd       	rjmp	.-1454   	; 0x3ddc <rightStepFollow+0x62>
    438a:	cd 80       	ldd	r12, Y+5	; 0x05
    438c:	de 80       	ldd	r13, Y+6	; 0x06
    438e:	bc 88       	ldd	r11, Y+20	; 0x14
    4390:	ab 88       	ldd	r10, Y+19	; 0x13
    4392:	8b 80       	ldd	r8, Y+3	; 0x03
    4394:	9c 80       	ldd	r9, Y+4	; 0x04
						
						pseudo_Stepper_Step(150, 150, 0.1);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    4396:	1d ec       	ldi	r17, 0xCD	; 205
    4398:	e1 2e       	mov	r14, r17
    439a:	1c ec       	ldi	r17, 0xCC	; 204
    439c:	f1 2e       	mov	r15, r17
    439e:	0c ec       	ldi	r16, 0xCC	; 204
    43a0:	1d e3       	ldi	r17, 0x3D	; 61
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	46 e1       	ldi	r20, 0x16	; 22
    43a8:	53 e4       	ldi	r21, 0x43	; 67
    43aa:	ca 01       	movw	r24, r20
    43ac:	b9 01       	movw	r22, r18
    43ae:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>
						// Computations for position
						*X = cos((*orientation))*(15*0.108) + (*X);
    43b2:	f3 01       	movw	r30, r6
    43b4:	60 81       	ld	r22, Z
    43b6:	71 81       	ldd	r23, Z+1	; 0x01
    43b8:	82 81       	ldd	r24, Z+2	; 0x02
    43ba:	93 81       	ldd	r25, Z+3	; 0x03
    43bc:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    43c0:	29 e2       	ldi	r18, 0x29	; 41
    43c2:	3c e5       	ldi	r19, 0x5C	; 92
    43c4:	4f ec       	ldi	r20, 0xCF	; 207
    43c6:	5f e3       	ldi	r21, 0x3F	; 63
    43c8:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    43cc:	9b 01       	movw	r18, r22
    43ce:	ac 01       	movw	r20, r24
    43d0:	f4 01       	movw	r30, r8
    43d2:	60 81       	ld	r22, Z
    43d4:	71 81       	ldd	r23, Z+1	; 0x01
    43d6:	82 81       	ldd	r24, Z+2	; 0x02
    43d8:	93 81       	ldd	r25, Z+3	; 0x03
    43da:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    43de:	f4 01       	movw	r30, r8
    43e0:	60 83       	st	Z, r22
    43e2:	71 83       	std	Z+1, r23	; 0x01
    43e4:	82 83       	std	Z+2, r24	; 0x02
    43e6:	93 83       	std	Z+3, r25	; 0x03
						*Y = sin((*orientation))*(15*0.108) + (*Y);	
    43e8:	f3 01       	movw	r30, r6
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    43f6:	29 e2       	ldi	r18, 0x29	; 41
    43f8:	3c e5       	ldi	r19, 0x5C	; 92
    43fa:	4f ec       	ldi	r20, 0xCF	; 207
    43fc:	5f e3       	ldi	r21, 0x3F	; 63
    43fe:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4402:	9b 01       	movw	r18, r22
    4404:	ac 01       	movw	r20, r24
    4406:	f6 01       	movw	r30, r12
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4414:	f6 01       	movw	r30, r12
    4416:	60 83       	st	Z, r22
    4418:	71 83       	std	Z+1, r23	; 0x01
    441a:	82 83       	std	Z+2, r24	; 0x02
    441c:	93 83       	std	Z+3, r25	; 0x03
						//
						rightIR = getRightIR();
    441e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
					//Update Orientation
					*orientation = (*orientation) - 90;
					//

					rightIR = getRightIR();
					while(rightIR > ICT){
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e4       	ldi	r20, 0x40	; 64
    4428:	51 e4       	ldi	r21, 0x41	; 65
    442a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    442e:	18 16       	cp	r1, r24
    4430:	0c f4       	brge	.+2      	; 0x4434 <rightStepFollow+0x6ba>
    4432:	b1 cf       	rjmp	.-158    	; 0x4396 <rightStepFollow+0x61c>
    4434:	bc 8a       	std	Y+20, r11	; 0x14
    4436:	ab 8a       	std	Y+19, r10	; 0x13
    4438:	d1 cc       	rjmp	.-1630   	; 0x3ddc <rightStepFollow+0x62>
					RI = 0;	
				}
			}
		}
	}
}
    443a:	64 96       	adiw	r28, 0x14	; 20
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	bf 90       	pop	r11
    4458:	af 90       	pop	r10
    445a:	9f 90       	pop	r9
    445c:	8f 90       	pop	r8
    445e:	7f 90       	pop	r7
    4460:	6f 90       	pop	r6
    4462:	5f 90       	pop	r5
    4464:	4f 90       	pop	r4
    4466:	3f 90       	pop	r3
    4468:	2f 90       	pop	r2
    446a:	08 95       	ret

0000446c <leftStepFollow>:

void leftStepFollow(float *X, float *Y, float* orientation, float X_tar, float Y_tar){
    446c:	2f 92       	push	r2
    446e:	3f 92       	push	r3
    4470:	4f 92       	push	r4
    4472:	5f 92       	push	r5
    4474:	6f 92       	push	r6
    4476:	7f 92       	push	r7
    4478:	8f 92       	push	r8
    447a:	9f 92       	push	r9
    447c:	af 92       	push	r10
    447e:	bf 92       	push	r11
    4480:	cf 92       	push	r12
    4482:	df 92       	push	r13
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	64 97       	sbiw	r28, 0x14	; 20
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	7e 83       	std	Y+6, r23	; 0x06
    44a2:	6d 83       	std	Y+5, r22	; 0x05
    44a4:	3a 01       	movw	r6, r20
    44a6:	0b 87       	std	Y+11, r16	; 0x0b
    44a8:	1c 87       	std	Y+12, r17	; 0x0c
    44aa:	2d 87       	std	Y+13, r18	; 0x0d
    44ac:	3e 87       	std	Y+14, r19	; 0x0e
    44ae:	cf 86       	std	Y+15, r12	; 0x0f
    44b0:	d8 8a       	std	Y+16, r13	; 0x10
    44b2:	e9 8a       	std	Y+17, r14	; 0x11
    44b4:	fa 8a       	std	Y+18, r15	; 0x12
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, cur_Angle;
	float oLWS = 0;
	float oRWS = 0;
    44b6:	1b 82       	std	Y+3, r1	; 0x03
    44b8:	1c 82       	std	Y+4, r1	; 0x04
    44ba:	41 2c       	mov	r4, r1
    44bc:	51 2c       	mov	r5, r1
void leftStepFollow(float *X, float *Y, float* orientation, float X_tar, float Y_tar){
	char lowerLimit = 4.75;
	char higherLimit = 5.25;
	char ICT = 12;
	float LP, RP, LWS, RWS, frontIR, rightIR, leftIR, cur_Angle;
	float oLWS = 0;
    44be:	19 82       	std	Y+1, r1	; 0x01
    44c0:	1a 82       	std	Y+2, r1	; 0x02
    44c2:	31 2c       	mov	r3, r1
    44c4:	21 2c       	mov	r2, r1
    44c6:	9c 8b       	std	Y+20, r25	; 0x14
    44c8:	8b 8b       	std	Y+19, r24	; 0x13
	TMRSRVC_delay(2000);
	LCD_printf("%f", *Y);
	TMRSRVC_delay(2000);*/

	while(break_condition == 0){
		frontIR = getFrontIR();
    44ca:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    44ce:	6b 01       	movw	r12, r22
    44d0:	7c 01       	movw	r14, r24
		rightIR = getRightIR();
    44d2:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
		leftIR = getLeftIR();
    44d6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    44da:	4b 01       	movw	r8, r22
    44dc:	5c 01       	movw	r10, r24
		if((frontIR > ICT) && (leftIR < ICT)){
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e4       	ldi	r20, 0x40	; 64
    44e4:	51 e4       	ldi	r21, 0x41	; 65
    44e6:	c7 01       	movw	r24, r14
    44e8:	b6 01       	movw	r22, r12
    44ea:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    44ee:	18 16       	cp	r1, r24
    44f0:	0c f0       	brlt	.+2      	; 0x44f4 <leftStepFollow+0x88>
    44f2:	33 c1       	rjmp	.+614    	; 0x475a <leftStepFollow+0x2ee>
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e4       	ldi	r20, 0x40	; 64
    44fa:	51 e4       	ldi	r21, 0x41	; 65
    44fc:	c5 01       	movw	r24, r10
    44fe:	b4 01       	movw	r22, r8
    4500:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4504:	88 23       	and	r24, r24
    4506:	0c f0       	brlt	.+2      	; 0x450a <leftStepFollow+0x9e>
    4508:	28 c1       	rjmp	.+592    	; 0x475a <leftStepFollow+0x2ee>
			if (leftIR < lowerLimit){
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e8       	ldi	r20, 0x80	; 128
    4510:	50 e4       	ldi	r21, 0x40	; 64
    4512:	c5 01       	movw	r24, r10
    4514:	b4 01       	movw	r22, r8
    4516:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    451a:	88 23       	and	r24, r24
    451c:	d4 f4       	brge	.+52     	; 0x4552 <leftStepFollow+0xe6>
				LCD_clear();
    451e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    4522:	8a e8       	ldi	r24, 0x8A	; 138
    4524:	92 e0       	ldi	r25, 0x02	; 2
    4526:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Inside Target\n");
    452a:	87 e2       	ldi	r24, 0x27	; 39
    452c:	92 e0       	ldi	r25, 0x02	; 2
    452e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    4532:	85 e3       	ldi	r24, 0x35	; 53
    4534:	92 e0       	ldi	r25, 0x02	; 2
    4536:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = lowerLimit - leftIR;
    453a:	a5 01       	movw	r20, r10
    453c:	94 01       	movw	r18, r8
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	80 e8       	ldi	r24, 0x80	; 128
    4544:	90 e4       	ldi	r25, 0x40	; 64
    4546:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
				RP = 0;
    454a:	c1 2c       	mov	r12, r1
    454c:	d1 2c       	mov	r13, r1
    454e:	76 01       	movw	r14, r12
    4550:	39 c0       	rjmp	.+114    	; 0x45c4 <leftStepFollow+0x158>
				LI = LI++;
				RI = 0;
			}else if(leftIR > higherLimit){
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	40 ea       	ldi	r20, 0xA0	; 160
    4558:	50 e4       	ldi	r21, 0x40	; 64
    455a:	c5 01       	movw	r24, r10
    455c:	b4 01       	movw	r22, r8
    455e:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4562:	18 16       	cp	r1, r24
    4564:	e4 f4       	brge	.+56     	; 0x459e <leftStepFollow+0x132>
				LCD_clear();
    4566:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    456a:	8a e8       	ldi	r24, 0x8A	; 138
    456c:	92 e0       	ldi	r25, 0x02	; 2
    456e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Outside Target\n");
    4572:	8b e3       	ldi	r24, 0x3B	; 59
    4574:	92 e0       	ldi	r25, 0x02	; 2
    4576:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    457a:	85 e3       	ldi	r24, 0x35	; 53
    457c:	92 e0       	ldi	r25, 0x02	; 2
    457e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = leftIR - higherLimit;
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	40 ea       	ldi	r20, 0xA0	; 160
    4588:	50 e4       	ldi	r21, 0x40	; 64
    458a:	c5 01       	movw	r24, r10
    458c:	b4 01       	movw	r22, r8
    458e:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4592:	6b 01       	movw	r12, r22
    4594:	7c 01       	movw	r14, r24
				LCD_clear();
				LCD_printf("Left Follow\n");
				LCD_printf("Outside Target\n");
				LCD_printf("Range\n");

				LP = 0;
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	cb 01       	movw	r24, r22
    459c:	13 c0       	rjmp	.+38     	; 0x45c4 <leftStepFollow+0x158>
				RP = leftIR - higherLimit;
				LI = 0;
				RI = RI++;
			}else{
				LCD_clear();
    459e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
				LCD_printf("Left Follow\n");
    45a2:	8a e8       	ldi	r24, 0x8A	; 138
    45a4:	92 e0       	ldi	r25, 0x02	; 2
    45a6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("At Target\n");
    45aa:	8a e4       	ldi	r24, 0x4A	; 74
    45ac:	92 e0       	ldi	r25, 0x02	; 2
    45ae:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
				LCD_printf("Range\n");
    45b2:	85 e3       	ldi	r24, 0x35	; 53
    45b4:	92 e0       	ldi	r25, 0x02	; 2
    45b6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

				LP = 0;
				RP = 0;
    45ba:	c1 2c       	mov	r12, r1
    45bc:	d1 2c       	mov	r13, r1
    45be:	76 01       	movw	r14, r12
				LCD_clear();
				LCD_printf("Left Follow\n");
				LCD_printf("At Target\n");
				LCD_printf("Range\n");

				LP = 0;
    45c0:	c7 01       	movw	r24, r14
    45c2:	b6 01       	movw	r22, r12
				RP = 0;
				LI = 0;
				RI = 0;
			}

			LWS = KP*LP + KI*LI + base;
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	a9 01       	movw	r20, r18
    45ca:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 ef       	ldi	r20, 0xF0	; 240
    45d4:	52 e4       	ldi	r21, 0x42	; 66
    45d6:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    45da:	86 2e       	mov	r8, r22
    45dc:	97 2e       	mov	r9, r23
    45de:	a8 2e       	mov	r10, r24
    45e0:	b9 2e       	mov	r11, r25
			RWS = KP*RP + KI*RI + base;
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	a9 01       	movw	r20, r18
    45e8:	c7 01       	movw	r24, r14
    45ea:	b6 01       	movw	r22, r12
    45ec:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 ef       	ldi	r20, 0xF0	; 240
    45f6:	52 e4       	ldi	r21, 0x42	; 66
    45f8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    45fc:	c6 2e       	mov	r12, r22
    45fe:	d7 2e       	mov	r13, r23
    4600:	e8 2e       	mov	r14, r24
    4602:	f9 2e       	mov	r15, r25
			if (oLWS == 0){
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	a9 01       	movw	r20, r18
    460a:	69 81       	ldd	r22, Y+1	; 0x01
    460c:	7a 81       	ldd	r23, Y+2	; 0x02
    460e:	83 2d       	mov	r24, r3
    4610:	92 2d       	mov	r25, r2
    4612:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4616:	81 11       	cpse	r24, r1
    4618:	08 c0       	rjmp	.+16     	; 0x462a <leftStepFollow+0x1be>
				oLWS = LWS;
				oRWS = RWS;
    461a:	cb 82       	std	Y+3, r12	; 0x03
    461c:	dc 82       	std	Y+4, r13	; 0x04
    461e:	4e 2c       	mov	r4, r14
    4620:	5f 2c       	mov	r5, r15
			}

			LWS = KP*LP + KI*LI + base;
			RWS = KP*RP + KI*RI + base;
			if (oLWS == 0){
				oLWS = LWS;
    4622:	89 82       	std	Y+1, r8	; 0x01
    4624:	9a 82       	std	Y+2, r9	; 0x02
    4626:	3a 2c       	mov	r3, r10
    4628:	2b 2c       	mov	r2, r11
				oRWS = RWS;
			}
			LWS = LWS + KD*(oLWS-LWS);
    462a:	28 2d       	mov	r18, r8
    462c:	39 2d       	mov	r19, r9
    462e:	4a 2d       	mov	r20, r10
    4630:	5b 2d       	mov	r21, r11
    4632:	69 81       	ldd	r22, Y+1	; 0x01
    4634:	7a 81       	ldd	r23, Y+2	; 0x02
    4636:	83 2d       	mov	r24, r3
    4638:	92 2d       	mov	r25, r2
    463a:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	a9 01       	movw	r20, r18
    4644:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4648:	28 2d       	mov	r18, r8
    464a:	39 2d       	mov	r19, r9
    464c:	4a 2d       	mov	r20, r10
    464e:	5b 2d       	mov	r21, r11
    4650:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4654:	69 83       	std	Y+1, r22	; 0x01
    4656:	7a 83       	std	Y+2, r23	; 0x02
    4658:	38 2e       	mov	r3, r24
    465a:	29 2e       	mov	r2, r25
			RWS = RWS + KD*(oRWS-RWS);
    465c:	2c 2d       	mov	r18, r12
    465e:	3d 2d       	mov	r19, r13
    4660:	4e 2d       	mov	r20, r14
    4662:	5f 2d       	mov	r21, r15
    4664:	6b 81       	ldd	r22, Y+3	; 0x03
    4666:	7c 81       	ldd	r23, Y+4	; 0x04
    4668:	84 2d       	mov	r24, r4
    466a:	95 2d       	mov	r25, r5
    466c:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	a9 01       	movw	r20, r18
    4676:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    467a:	2c 2d       	mov	r18, r12
    467c:	3d 2d       	mov	r19, r13
    467e:	4e 2d       	mov	r20, r14
    4680:	5f 2d       	mov	r21, r15
    4682:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4686:	6b 83       	std	Y+3, r22	; 0x03
    4688:	7c 83       	std	Y+4, r23	; 0x04
    468a:	48 2e       	mov	r4, r24
    468c:	59 2e       	mov	r5, r25

			pseudo_Stepper_Step(RWS, LWS, 0.1);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    468e:	1d ec       	ldi	r17, 0xCD	; 205
    4690:	e1 2e       	mov	r14, r17
    4692:	1c ec       	ldi	r17, 0xCC	; 204
    4694:	f1 2e       	mov	r15, r17
    4696:	0c ec       	ldi	r16, 0xCC	; 204
    4698:	1d e3       	ldi	r17, 0x3D	; 61
    469a:	29 81       	ldd	r18, Y+1	; 0x01
    469c:	3a 81       	ldd	r19, Y+2	; 0x02
    469e:	43 2d       	mov	r20, r3
    46a0:	52 2d       	mov	r21, r2
    46a2:	95 2d       	mov	r25, r5
    46a4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			oLWS = LWS;
			oRWS = RWS;

			// Computations for position
			*X = cos((*orientation))*((RWS+LWS)*0.1*0.108/2) + (*X);
    46a8:	f3 01       	movw	r30, r6
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    46b6:	4b 01       	movw	r8, r22
    46b8:	5c 01       	movw	r10, r24
    46ba:	29 81       	ldd	r18, Y+1	; 0x01
    46bc:	3a 81       	ldd	r19, Y+2	; 0x02
    46be:	43 2d       	mov	r20, r3
    46c0:	52 2d       	mov	r21, r2
    46c2:	6b 81       	ldd	r22, Y+3	; 0x03
    46c4:	7c 81       	ldd	r23, Y+4	; 0x04
    46c6:	84 2d       	mov	r24, r4
    46c8:	95 2d       	mov	r25, r5
    46ca:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    46ce:	a8 01       	movw	r20, r16
    46d0:	97 01       	movw	r18, r14
    46d2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    46d6:	2b e1       	ldi	r18, 0x1B	; 27
    46d8:	3f e2       	ldi	r19, 0x2F	; 47
    46da:	4d ed       	ldi	r20, 0xDD	; 221
    46dc:	5d e3       	ldi	r21, 0x3D	; 61
    46de:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	40 e0       	ldi	r20, 0x00	; 0
    46e8:	5f e3       	ldi	r21, 0x3F	; 63
    46ea:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    46ee:	6b 01       	movw	r12, r22
    46f0:	7c 01       	movw	r14, r24
    46f2:	9b 01       	movw	r18, r22
    46f4:	ac 01       	movw	r20, r24
    46f6:	c5 01       	movw	r24, r10
    46f8:	b4 01       	movw	r22, r8
    46fa:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    46fe:	9b 01       	movw	r18, r22
    4700:	ac 01       	movw	r20, r24
    4702:	eb 89       	ldd	r30, Y+19	; 0x13
    4704:	fc 89       	ldd	r31, Y+20	; 0x14
    4706:	60 81       	ld	r22, Z
    4708:	71 81       	ldd	r23, Z+1	; 0x01
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4712:	eb 89       	ldd	r30, Y+19	; 0x13
    4714:	fc 89       	ldd	r31, Y+20	; 0x14
    4716:	60 83       	st	Z, r22
    4718:	71 83       	std	Z+1, r23	; 0x01
    471a:	82 83       	std	Z+2, r24	; 0x02
    471c:	93 83       	std	Z+3, r25	; 0x03
			*Y = sin((*orientation))*((RWS+LWS)*0.1*0.108/2) + (*Y);	
    471e:	f3 01       	movw	r30, r6
    4720:	60 81       	ld	r22, Z
    4722:	71 81       	ldd	r23, Z+1	; 0x01
    4724:	82 81       	ldd	r24, Z+2	; 0x02
    4726:	93 81       	ldd	r25, Z+3	; 0x03
    4728:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    472c:	9b 01       	movw	r18, r22
    472e:	ac 01       	movw	r20, r24
    4730:	c7 01       	movw	r24, r14
    4732:	b6 01       	movw	r22, r12
    4734:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4738:	9b 01       	movw	r18, r22
    473a:	ac 01       	movw	r20, r24
    473c:	ed 81       	ldd	r30, Y+5	; 0x05
    473e:	fe 81       	ldd	r31, Y+6	; 0x06
    4740:	60 81       	ld	r22, Z
    4742:	71 81       	ldd	r23, Z+1	; 0x01
    4744:	82 81       	ldd	r24, Z+2	; 0x02
    4746:	93 81       	ldd	r25, Z+3	; 0x03
    4748:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    474c:	ed 81       	ldd	r30, Y+5	; 0x05
    474e:	fe 81       	ldd	r31, Y+6	; 0x06
    4750:	60 83       	st	Z, r22
    4752:	71 83       	std	Z+1, r23	; 0x01
    4754:	82 83       	std	Z+2, r24	; 0x02
    4756:	93 83       	std	Z+3, r25	; 0x03
    4758:	b8 ce       	rjmp	.-656    	; 0x44ca <leftStepFollow+0x5e>
			//

		}else if((frontIR < ICT) && (leftIR < ICT)){
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	40 e4       	ldi	r20, 0x40	; 64
    4760:	51 e4       	ldi	r21, 0x41	; 65
    4762:	c7 01       	movw	r24, r14
    4764:	b6 01       	movw	r22, r12
    4766:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    476a:	88 23       	and	r24, r24
    476c:	0c f0       	brlt	.+2      	; 0x4770 <leftStepFollow+0x304>
    476e:	c8 c0       	rjmp	.+400    	; 0x4900 <leftStepFollow+0x494>
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	40 e4       	ldi	r20, 0x40	; 64
    4776:	51 e4       	ldi	r21, 0x41	; 65
    4778:	c5 01       	movw	r24, r10
    477a:	b4 01       	movw	r22, r8
    477c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4780:	88 23       	and	r24, r24
    4782:	0c f0       	brlt	.+2      	; 0x4786 <leftStepFollow+0x31a>
    4784:	bd c0       	rjmp	.+378    	; 0x4900 <leftStepFollow+0x494>
			LCD_clear();
    4786:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Left Follow\n");
    478a:	8a e8       	ldi	r24, 0x8A	; 138
    478c:	92 e0       	ldi	r25, 0x02	; 2
    478e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Wall in Front\n");
    4792:	84 e5       	ldi	r24, 0x54	; 84
    4794:	92 e0       	ldi	r25, 0x02	; 2
    4796:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Right\n");
    479a:	8c e7       	ldi	r24, 0x7C	; 124
    479c:	92 e0       	ldi	r25, 0x02	; 2
    479e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			pseudo_Stepper_Step(150, 150, 0.5);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    47a2:	e1 2c       	mov	r14, r1
    47a4:	f1 2c       	mov	r15, r1
    47a6:	00 e0       	ldi	r16, 0x00	; 0
    47a8:	1f e3       	ldi	r17, 0x3F	; 63
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	46 e1       	ldi	r20, 0x16	; 22
    47b0:	53 e4       	ldi	r21, 0x43	; 67
    47b2:	ca 01       	movw	r24, r20
    47b4:	b9 01       	movw	r22, r18
    47b6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			// Computations for position
			*X = cos((*orientation))*(75*0.108) + (*X);
    47ba:	f3 01       	movw	r30, r6
    47bc:	60 81       	ld	r22, Z
    47be:	71 81       	ldd	r23, Z+1	; 0x01
    47c0:	82 81       	ldd	r24, Z+2	; 0x02
    47c2:	93 81       	ldd	r25, Z+3	; 0x03
    47c4:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    47c8:	2a e9       	ldi	r18, 0x9A	; 154
    47ca:	39 e9       	ldi	r19, 0x99	; 153
    47cc:	41 e0       	ldi	r20, 0x01	; 1
    47ce:	51 e4       	ldi	r21, 0x41	; 65
    47d0:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    47d4:	9b 01       	movw	r18, r22
    47d6:	ac 01       	movw	r20, r24
    47d8:	eb 89       	ldd	r30, Y+19	; 0x13
    47da:	fc 89       	ldd	r31, Y+20	; 0x14
    47dc:	60 81       	ld	r22, Z
    47de:	71 81       	ldd	r23, Z+1	; 0x01
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	93 81       	ldd	r25, Z+3	; 0x03
    47e4:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    47e8:	eb 89       	ldd	r30, Y+19	; 0x13
    47ea:	fc 89       	ldd	r31, Y+20	; 0x14
    47ec:	60 83       	st	Z, r22
    47ee:	71 83       	std	Z+1, r23	; 0x01
    47f0:	82 83       	std	Z+2, r24	; 0x02
    47f2:	93 83       	std	Z+3, r25	; 0x03
			*Y = sin((*orientation))*(75*0.108) + (*Y);	
    47f4:	f3 01       	movw	r30, r6
    47f6:	60 81       	ld	r22, Z
    47f8:	71 81       	ldd	r23, Z+1	; 0x01
    47fa:	82 81       	ldd	r24, Z+2	; 0x02
    47fc:	93 81       	ldd	r25, Z+3	; 0x03
    47fe:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    4802:	2a e9       	ldi	r18, 0x9A	; 154
    4804:	39 e9       	ldi	r19, 0x99	; 153
    4806:	41 e0       	ldi	r20, 0x01	; 1
    4808:	51 e4       	ldi	r21, 0x41	; 65
    480a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    480e:	ed 81       	ldd	r30, Y+5	; 0x05
    4810:	fe 81       	ldd	r31, Y+6	; 0x06
    4812:	20 81       	ld	r18, Z
    4814:	31 81       	ldd	r19, Z+1	; 0x01
    4816:	42 81       	ldd	r20, Z+2	; 0x02
    4818:	53 81       	ldd	r21, Z+3	; 0x03
    481a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    481e:	ed 81       	ldd	r30, Y+5	; 0x05
    4820:	fe 81       	ldd	r31, Y+6	; 0x06
    4822:	60 83       	st	Z, r22
    4824:	71 83       	std	Z+1, r23	; 0x01
    4826:	82 83       	std	Z+2, r24	; 0x02
    4828:	93 83       	std	Z+3, r25	; 0x03
			//
			cur_Angle = Tar_vs_Cur_Angle(X_tar, Y_tar, *X, *Y);
    482a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    482e:	6b 01       	movw	r12, r22
    4830:	7c 01       	movw	r14, r24
    4832:	eb 89       	ldd	r30, Y+19	; 0x13
    4834:	fc 89       	ldd	r31, Y+20	; 0x14
    4836:	60 81       	ld	r22, Z
    4838:	71 81       	ldd	r23, Z+1	; 0x01
    483a:	82 81       	ldd	r24, Z+2	; 0x02
    483c:	93 81       	ldd	r25, Z+3	; 0x03
    483e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4842:	6f 83       	std	Y+7, r22	; 0x07
    4844:	78 87       	std	Y+8, r23	; 0x08
    4846:	89 87       	std	Y+9, r24	; 0x09
    4848:	9a 87       	std	Y+10, r25	; 0x0a
    484a:	6f 85       	ldd	r22, Y+15	; 0x0f
    484c:	78 89       	ldd	r23, Y+16	; 0x10
    484e:	89 89       	ldd	r24, Y+17	; 0x11
    4850:	9a 89       	ldd	r25, Y+18	; 0x12
    4852:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4856:	4b 01       	movw	r8, r22
    4858:	5c 01       	movw	r10, r24
    485a:	6b 85       	ldd	r22, Y+11	; 0x0b
    485c:	7c 85       	ldd	r23, Y+12	; 0x0c
    485e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4860:	9e 85       	ldd	r25, Y+14	; 0x0e
    4862:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4866:	dc 01       	movw	r26, r24
    4868:	cb 01       	movw	r24, r22
    486a:	96 01       	movw	r18, r12
    486c:	4f 81       	ldd	r20, Y+7	; 0x07
    486e:	58 85       	ldd	r21, Y+8	; 0x08
    4870:	b4 01       	movw	r22, r8
    4872:	0e 94 13 16 	call	0x2c26	; 0x2c26 <Tar_vs_Cur_Angle>
    4876:	6b 01       	movw	r12, r22
    4878:	7c 01       	movw	r14, r24

			if ((cur_Angle >= (*orientation)-90)&&(cur_Angle <= ((*orientation)))){
    487a:	f3 01       	movw	r30, r6
    487c:	80 80       	ld	r8, Z
    487e:	91 80       	ldd	r9, Z+1	; 0x01
    4880:	a2 80       	ldd	r10, Z+2	; 0x02
    4882:	b3 80       	ldd	r11, Z+3	; 0x03
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	44 eb       	ldi	r20, 0xB4	; 180
    488a:	52 e4       	ldi	r21, 0x42	; 66
    488c:	c5 01       	movw	r24, r10
    488e:	b4 01       	movw	r22, r8
    4890:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4894:	9b 01       	movw	r18, r22
    4896:	ac 01       	movw	r20, r24
    4898:	c7 01       	movw	r24, r14
    489a:	b6 01       	movw	r22, r12
    489c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    48a0:	88 23       	and	r24, r24
    48a2:	cc f0       	brlt	.+50     	; 0x48d6 <leftStepFollow+0x46a>
    48a4:	a5 01       	movw	r20, r10
    48a6:	94 01       	movw	r18, r8
    48a8:	c7 01       	movw	r24, r14
    48aa:	b6 01       	movw	r22, r12
    48ac:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    48b0:	18 16       	cp	r1, r24
    48b2:	8c f0       	brlt	.+34     	; 0x48d6 <leftStepFollow+0x46a>
				go2Angle(cur_Angle-(*orientation)); // + is left, - is right
    48b4:	a5 01       	movw	r20, r10
    48b6:	94 01       	movw	r18, r8
    48b8:	c7 01       	movw	r24, r14
    48ba:	b6 01       	movw	r22, r12
    48bc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    48c0:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    48c4:	cb 01       	movw	r24, r22
    48c6:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
				break_condition = 1;

				//Update Orientation
				*orientation = cur_Angle;
    48ca:	f3 01       	movw	r30, r6
    48cc:	c0 82       	st	Z, r12
    48ce:	d1 82       	std	Z+1, r13	; 0x01
    48d0:	e2 82       	std	Z+2, r14	; 0x02
    48d2:	f3 82       	std	Z+3, r15	; 0x03
    48d4:	59 c1       	rjmp	.+690    	; 0x4b88 <leftStepFollow+0x71c>
				//

			}else{
				go2Angle(-90); // + is left, - is right
    48d6:	86 ea       	ldi	r24, 0xA6	; 166
    48d8:	9f ef       	ldi	r25, 0xFF	; 255
    48da:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>

				//Update Orientation
				*orientation = (*orientation) - 90;
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	44 eb       	ldi	r20, 0xB4	; 180
    48e4:	52 e4       	ldi	r21, 0x42	; 66
    48e6:	f3 01       	movw	r30, r6
    48e8:	60 81       	ld	r22, Z
    48ea:	71 81       	ldd	r23, Z+1	; 0x01
    48ec:	82 81       	ldd	r24, Z+2	; 0x02
    48ee:	93 81       	ldd	r25, Z+3	; 0x03
    48f0:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    48f4:	f3 01       	movw	r30, r6
    48f6:	60 83       	st	Z, r22
    48f8:	71 83       	std	Z+1, r23	; 0x01
    48fa:	82 83       	std	Z+2, r24	; 0x02
    48fc:	93 83       	std	Z+3, r25	; 0x03
    48fe:	e5 cd       	rjmp	.-1078   	; 0x44ca <leftStepFollow+0x5e>
			}
			LP = 0;
			RP = 0;
			LI = 0;
			RI = 0;	
		}else if((frontIR > ICT) && (leftIR > ICT)){
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	40 e4       	ldi	r20, 0x40	; 64
    4906:	51 e4       	ldi	r21, 0x41	; 65
    4908:	c7 01       	movw	r24, r14
    490a:	b6 01       	movw	r22, r12
    490c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4910:	18 16       	cp	r1, r24
    4912:	0c f0       	brlt	.+2      	; 0x4916 <leftStepFollow+0x4aa>
    4914:	da cd       	rjmp	.-1100   	; 0x44ca <leftStepFollow+0x5e>
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	40 e4       	ldi	r20, 0x40	; 64
    491c:	51 e4       	ldi	r21, 0x41	; 65
    491e:	c5 01       	movw	r24, r10
    4920:	b4 01       	movw	r22, r8
    4922:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4926:	18 16       	cp	r1, r24
    4928:	0c f0       	brlt	.+2      	; 0x492c <leftStepFollow+0x4c0>
    492a:	cf cd       	rjmp	.-1122   	; 0x44ca <leftStepFollow+0x5e>
			LCD_clear();
    492c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Left Follow\n");
    4930:	8a e8       	ldi	r24, 0x8A	; 138
    4932:	92 e0       	ldi	r25, 0x02	; 2
    4934:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Lack of Wall\n");
    4938:	8f e6       	ldi	r24, 0x6F	; 111
    493a:	92 e0       	ldi	r25, 0x02	; 2
    493c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
			LCD_printf("Turning Left\n");
    4940:	82 e6       	ldi	r24, 0x62	; 98
    4942:	92 e0       	ldi	r25, 0x02	; 2
    4944:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

			pseudo_Stepper_Step(150, 150, 0.5);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    4948:	e1 2c       	mov	r14, r1
    494a:	f1 2c       	mov	r15, r1
    494c:	00 e0       	ldi	r16, 0x00	; 0
    494e:	1f e3       	ldi	r17, 0x3F	; 63
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	46 e1       	ldi	r20, 0x16	; 22
    4956:	53 e4       	ldi	r21, 0x43	; 67
    4958:	ca 01       	movw	r24, r20
    495a:	b9 01       	movw	r22, r18
    495c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>

			// Computations for position
			*X = cos((*orientation))*(75*0.108) + (*X);
    4960:	f3 01       	movw	r30, r6
    4962:	60 81       	ld	r22, Z
    4964:	71 81       	ldd	r23, Z+1	; 0x01
    4966:	82 81       	ldd	r24, Z+2	; 0x02
    4968:	93 81       	ldd	r25, Z+3	; 0x03
    496a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    496e:	2a e9       	ldi	r18, 0x9A	; 154
    4970:	39 e9       	ldi	r19, 0x99	; 153
    4972:	41 e0       	ldi	r20, 0x01	; 1
    4974:	51 e4       	ldi	r21, 0x41	; 65
    4976:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    497a:	9b 01       	movw	r18, r22
    497c:	ac 01       	movw	r20, r24
    497e:	eb 89       	ldd	r30, Y+19	; 0x13
    4980:	fc 89       	ldd	r31, Y+20	; 0x14
    4982:	60 81       	ld	r22, Z
    4984:	71 81       	ldd	r23, Z+1	; 0x01
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    498e:	eb 89       	ldd	r30, Y+19	; 0x13
    4990:	fc 89       	ldd	r31, Y+20	; 0x14
    4992:	60 83       	st	Z, r22
    4994:	71 83       	std	Z+1, r23	; 0x01
    4996:	82 83       	std	Z+2, r24	; 0x02
    4998:	93 83       	std	Z+3, r25	; 0x03
			*Y = sin((*orientation))*(75*0.108) + (*Y);	
    499a:	f3 01       	movw	r30, r6
    499c:	60 81       	ld	r22, Z
    499e:	71 81       	ldd	r23, Z+1	; 0x01
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    49a8:	2a e9       	ldi	r18, 0x9A	; 154
    49aa:	39 e9       	ldi	r19, 0x99	; 153
    49ac:	41 e0       	ldi	r20, 0x01	; 1
    49ae:	51 e4       	ldi	r21, 0x41	; 65
    49b0:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    49b4:	9b 01       	movw	r18, r22
    49b6:	ac 01       	movw	r20, r24
    49b8:	ed 81       	ldd	r30, Y+5	; 0x05
    49ba:	fe 81       	ldd	r31, Y+6	; 0x06
    49bc:	60 81       	ld	r22, Z
    49be:	71 81       	ldd	r23, Z+1	; 0x01
    49c0:	82 81       	ldd	r24, Z+2	; 0x02
    49c2:	93 81       	ldd	r25, Z+3	; 0x03
    49c4:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    49c8:	ed 81       	ldd	r30, Y+5	; 0x05
    49ca:	fe 81       	ldd	r31, Y+6	; 0x06
    49cc:	60 83       	st	Z, r22
    49ce:	71 83       	std	Z+1, r23	; 0x01
    49d0:	82 83       	std	Z+2, r24	; 0x02
    49d2:	93 83       	std	Z+3, r25	; 0x03
			//

			leftIR = getLeftIR();
    49d4:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
			if ((frontIR > ICT) && (leftIR > ICT)){
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e4       	ldi	r20, 0x40	; 64
    49de:	51 e4       	ldi	r21, 0x41	; 65
    49e0:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    49e4:	18 16       	cp	r1, r24
    49e6:	0c f0       	brlt	.+2      	; 0x49ea <leftStepFollow+0x57e>
    49e8:	70 cd       	rjmp	.-1312   	; 0x44ca <leftStepFollow+0x5e>
				cur_Angle = Tar_vs_Cur_Angle(X_tar, Y_tar, *X, *Y);
    49ea:	ed 81       	ldd	r30, Y+5	; 0x05
    49ec:	fe 81       	ldd	r31, Y+6	; 0x06
    49ee:	60 81       	ld	r22, Z
    49f0:	71 81       	ldd	r23, Z+1	; 0x01
    49f2:	82 81       	ldd	r24, Z+2	; 0x02
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    49fa:	6b 01       	movw	r12, r22
    49fc:	7c 01       	movw	r14, r24
    49fe:	eb 89       	ldd	r30, Y+19	; 0x13
    4a00:	fc 89       	ldd	r31, Y+20	; 0x14
    4a02:	60 81       	ld	r22, Z
    4a04:	71 81       	ldd	r23, Z+1	; 0x01
    4a06:	82 81       	ldd	r24, Z+2	; 0x02
    4a08:	93 81       	ldd	r25, Z+3	; 0x03
    4a0a:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4a0e:	6f 83       	std	Y+7, r22	; 0x07
    4a10:	78 87       	std	Y+8, r23	; 0x08
    4a12:	89 87       	std	Y+9, r24	; 0x09
    4a14:	9a 87       	std	Y+10, r25	; 0x0a
    4a16:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a18:	78 89       	ldd	r23, Y+16	; 0x10
    4a1a:	89 89       	ldd	r24, Y+17	; 0x11
    4a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    4a1e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4a22:	4b 01       	movw	r8, r22
    4a24:	5c 01       	movw	r10, r24
    4a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a2e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	96 01       	movw	r18, r12
    4a38:	4f 81       	ldd	r20, Y+7	; 0x07
    4a3a:	58 85       	ldd	r21, Y+8	; 0x08
    4a3c:	b4 01       	movw	r22, r8
    4a3e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <Tar_vs_Cur_Angle>
    4a42:	6b 01       	movw	r12, r22
    4a44:	7c 01       	movw	r14, r24

				if ((cur_Angle >= (*orientation))&&(cur_Angle <= ((*orientation)+90))){
    4a46:	f3 01       	movw	r30, r6
    4a48:	80 80       	ld	r8, Z
    4a4a:	91 80       	ldd	r9, Z+1	; 0x01
    4a4c:	a2 80       	ldd	r10, Z+2	; 0x02
    4a4e:	b3 80       	ldd	r11, Z+3	; 0x03
    4a50:	a5 01       	movw	r20, r10
    4a52:	94 01       	movw	r18, r8
    4a54:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4a58:	88 23       	and	r24, r24
    4a5a:	0c f1       	brlt	.+66     	; 0x4a9e <leftStepFollow+0x632>
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	44 eb       	ldi	r20, 0xB4	; 180
    4a62:	52 e4       	ldi	r21, 0x42	; 66
    4a64:	c5 01       	movw	r24, r10
    4a66:	b4 01       	movw	r22, r8
    4a68:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4a6c:	9b 01       	movw	r18, r22
    4a6e:	ac 01       	movw	r20, r24
    4a70:	c7 01       	movw	r24, r14
    4a72:	b6 01       	movw	r22, r12
    4a74:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4a78:	18 16       	cp	r1, r24
    4a7a:	8c f0       	brlt	.+34     	; 0x4a9e <leftStepFollow+0x632>
					go2Angle(cur_Angle-(*orientation)); // + is left, - is right
    4a7c:	a5 01       	movw	r20, r10
    4a7e:	94 01       	movw	r18, r8
    4a80:	c7 01       	movw	r24, r14
    4a82:	b6 01       	movw	r22, r12
    4a84:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4a88:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fixsfsi>
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					break_condition = 1;

					//Update Orientation
					*orientation = cur_Angle;
    4a92:	f3 01       	movw	r30, r6
    4a94:	c0 82       	st	Z, r12
    4a96:	d1 82       	std	Z+1, r13	; 0x01
    4a98:	e2 82       	std	Z+2, r14	; 0x02
    4a9a:	f3 82       	std	Z+3, r15	; 0x03
    4a9c:	75 c0       	rjmp	.+234    	; 0x4b88 <leftStepFollow+0x71c>
					//

				}else{
					go2Angle(90); // + is left, - is right
    4a9e:	8a e5       	ldi	r24, 0x5A	; 90
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>

					//Update Orientation
					*orientation = (*orientation) + 90;
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	44 eb       	ldi	r20, 0xB4	; 180
    4aac:	52 e4       	ldi	r21, 0x42	; 66
    4aae:	f3 01       	movw	r30, r6
    4ab0:	60 81       	ld	r22, Z
    4ab2:	71 81       	ldd	r23, Z+1	; 0x01
    4ab4:	82 81       	ldd	r24, Z+2	; 0x02
    4ab6:	93 81       	ldd	r25, Z+3	; 0x03
    4ab8:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4abc:	f3 01       	movw	r30, r6
    4abe:	60 83       	st	Z, r22
    4ac0:	71 83       	std	Z+1, r23	; 0x01
    4ac2:	82 83       	std	Z+2, r24	; 0x02
    4ac4:	93 83       	std	Z+3, r25	; 0x03
					//

					leftIR = getLeftIR();
    4ac6:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
					while(leftIR > ICT){
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	40 e4       	ldi	r20, 0x40	; 64
    4ad0:	51 e4       	ldi	r21, 0x41	; 65
    4ad2:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4ad6:	18 16       	cp	r1, r24
    4ad8:	0c f0       	brlt	.+2      	; 0x4adc <leftStepFollow+0x670>
    4ada:	f7 cc       	rjmp	.-1554   	; 0x44ca <leftStepFollow+0x5e>
    4adc:	ab 88       	ldd	r10, Y+19	; 0x13
    4ade:	bc 88       	ldd	r11, Y+20	; 0x14
    4ae0:	cd 80       	ldd	r12, Y+5	; 0x05
    4ae2:	de 80       	ldd	r13, Y+6	; 0x06
						
						pseudo_Stepper_Step(150, 150, 0.1);	// (Right Wheel Speed, Left Wheel Speed, Duration)
    4ae4:	1d ec       	ldi	r17, 0xCD	; 205
    4ae6:	e1 2e       	mov	r14, r17
    4ae8:	1c ec       	ldi	r17, 0xCC	; 204
    4aea:	f1 2e       	mov	r15, r17
    4aec:	0c ec       	ldi	r16, 0xCC	; 204
    4aee:	1d e3       	ldi	r17, 0x3D	; 61
    4af0:	20 e0       	ldi	r18, 0x00	; 0
    4af2:	30 e0       	ldi	r19, 0x00	; 0
    4af4:	46 e1       	ldi	r20, 0x16	; 22
    4af6:	53 e4       	ldi	r21, 0x43	; 67
    4af8:	ca 01       	movw	r24, r20
    4afa:	b9 01       	movw	r22, r18
    4afc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <pseudo_Stepper_Step>
						// Computations for position
						*X = cos((*orientation))*(15*0.108) + (*X);
    4b00:	f3 01       	movw	r30, r6
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <cos>
    4b0e:	29 e2       	ldi	r18, 0x29	; 41
    4b10:	3c e5       	ldi	r19, 0x5C	; 92
    4b12:	4f ec       	ldi	r20, 0xCF	; 207
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4b1a:	9b 01       	movw	r18, r22
    4b1c:	ac 01       	movw	r20, r24
    4b1e:	f5 01       	movw	r30, r10
    4b20:	60 81       	ld	r22, Z
    4b22:	71 81       	ldd	r23, Z+1	; 0x01
    4b24:	82 81       	ldd	r24, Z+2	; 0x02
    4b26:	93 81       	ldd	r25, Z+3	; 0x03
    4b28:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4b2c:	f5 01       	movw	r30, r10
    4b2e:	60 83       	st	Z, r22
    4b30:	71 83       	std	Z+1, r23	; 0x01
    4b32:	82 83       	std	Z+2, r24	; 0x02
    4b34:	93 83       	std	Z+3, r25	; 0x03
						*Y = sin((*orientation))*(15*0.108) + (*Y);	
    4b36:	f3 01       	movw	r30, r6
    4b38:	60 81       	ld	r22, Z
    4b3a:	71 81       	ldd	r23, Z+1	; 0x01
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	93 81       	ldd	r25, Z+3	; 0x03
    4b40:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <sin>
    4b44:	29 e2       	ldi	r18, 0x29	; 41
    4b46:	3c e5       	ldi	r19, 0x5C	; 92
    4b48:	4f ec       	ldi	r20, 0xCF	; 207
    4b4a:	5f e3       	ldi	r21, 0x3F	; 63
    4b4c:	0e 94 80 2c 	call	0x5900	; 0x5900 <__mulsf3>
    4b50:	9b 01       	movw	r18, r22
    4b52:	ac 01       	movw	r20, r24
    4b54:	f6 01       	movw	r30, r12
    4b56:	60 81       	ld	r22, Z
    4b58:	71 81       	ldd	r23, Z+1	; 0x01
    4b5a:	82 81       	ldd	r24, Z+2	; 0x02
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4b62:	f6 01       	movw	r30, r12
    4b64:	60 83       	st	Z, r22
    4b66:	71 83       	std	Z+1, r23	; 0x01
    4b68:	82 83       	std	Z+2, r24	; 0x02
    4b6a:	93 83       	std	Z+3, r25	; 0x03
						//
						leftIR = getLeftIR();
    4b6c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
					//Update Orientation
					*orientation = (*orientation) + 90;
					//

					leftIR = getLeftIR();
					while(leftIR > ICT){
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	40 e4       	ldi	r20, 0x40	; 64
    4b76:	51 e4       	ldi	r21, 0x41	; 65
    4b78:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4b7c:	18 16       	cp	r1, r24
    4b7e:	0c f4       	brge	.+2      	; 0x4b82 <leftStepFollow+0x716>
    4b80:	b1 cf       	rjmp	.-158    	; 0x4ae4 <leftStepFollow+0x678>
    4b82:	bc 8a       	std	Y+20, r11	; 0x14
    4b84:	ab 8a       	std	Y+19, r10	; 0x13
    4b86:	a1 cc       	rjmp	.-1726   	; 0x44ca <leftStepFollow+0x5e>
					RI = 0;	
				}
			}
		}
	}
    4b88:	64 96       	adiw	r28, 0x14	; 20
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	f8 94       	cli
    4b8e:	de bf       	out	0x3e, r29	; 62
    4b90:	0f be       	out	0x3f, r0	; 63
    4b92:	cd bf       	out	0x3d, r28	; 61
    4b94:	df 91       	pop	r29
    4b96:	cf 91       	pop	r28
    4b98:	1f 91       	pop	r17
    4b9a:	0f 91       	pop	r16
    4b9c:	ff 90       	pop	r15
    4b9e:	ef 90       	pop	r14
    4ba0:	df 90       	pop	r13
    4ba2:	cf 90       	pop	r12
    4ba4:	bf 90       	pop	r11
    4ba6:	af 90       	pop	r10
    4ba8:	9f 90       	pop	r9
    4baa:	8f 90       	pop	r8
    4bac:	7f 90       	pop	r7
    4bae:	6f 90       	pop	r6
    4bb0:	5f 90       	pop	r5
    4bb2:	4f 90       	pop	r4
    4bb4:	3f 90       	pop	r3
    4bb6:	2f 90       	pop	r2
    4bb8:	08 95       	ret

00004bba <go2Goal>:

void go2Goal(signed char x, signed char y){
    4bba:	4f 92       	push	r4
    4bbc:	5f 92       	push	r5
    4bbe:	6f 92       	push	r6
    4bc0:	7f 92       	push	r7
    4bc2:	8f 92       	push	r8
    4bc4:	9f 92       	push	r9
    4bc6:	af 92       	push	r10
    4bc8:	bf 92       	push	r11
    4bca:	cf 92       	push	r12
    4bcc:	df 92       	push	r13
    4bce:	ef 92       	push	r14
    4bd0:	ff 92       	push	r15
    4bd2:	0f 93       	push	r16
    4bd4:	1f 93       	push	r17
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	62 97       	sbiw	r28, 0x12	; 18
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	96 2f       	mov	r25, r22
	float deltax, deltay, frontIR, rightIR, leftIR, targetX, targetY;
	int currAngle;
	short stepSize = 100;
	char goal = 0;
	x = x*12;
    4bec:	68 2f       	mov	r22, r24
    4bee:	66 0f       	add	r22, r22
    4bf0:	68 0f       	add	r22, r24
    4bf2:	66 0f       	add	r22, r22
    4bf4:	66 0f       	add	r22, r22
	y = y*12;
    4bf6:	f9 2e       	mov	r15, r25
    4bf8:	ff 0c       	add	r15, r15
    4bfa:	9f 0d       	add	r25, r15
    4bfc:	f9 2e       	mov	r15, r25
    4bfe:	ff 0c       	add	r15, r15
    4c00:	ff 0c       	add	r15, r15
	
	deltax = x - xo;
    4c02:	77 27       	eor	r23, r23
    4c04:	67 fd       	sbrc	r22, 7
    4c06:	70 95       	com	r23
    4c08:	87 2f       	mov	r24, r23
    4c0a:	97 2f       	mov	r25, r23
    4c0c:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__floatsisf>
    4c10:	20 91 2b 04 	lds	r18, 0x042B
    4c14:	30 91 2c 04 	lds	r19, 0x042C
    4c18:	40 91 2d 04 	lds	r20, 0x042D
    4c1c:	50 91 2e 04 	lds	r21, 0x042E
    4c20:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4c24:	6b 87       	std	Y+11, r22	; 0x0b
    4c26:	7c 87       	std	Y+12, r23	; 0x0c
    4c28:	8d 87       	std	Y+13, r24	; 0x0d
    4c2a:	9e 87       	std	Y+14, r25	; 0x0e
    4c2c:	69 83       	std	Y+1, r22	; 0x01
    4c2e:	7a 83       	std	Y+2, r23	; 0x02
    4c30:	8b 83       	std	Y+3, r24	; 0x03
    4c32:	9c 83       	std	Y+4, r25	; 0x04
	deltay = y - yo;
    4c34:	6f 2d       	mov	r22, r15
    4c36:	77 27       	eor	r23, r23
    4c38:	67 fd       	sbrc	r22, 7
    4c3a:	70 95       	com	r23
    4c3c:	87 2f       	mov	r24, r23
    4c3e:	97 2f       	mov	r25, r23
    4c40:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__floatsisf>
    4c44:	20 91 27 04 	lds	r18, 0x0427
    4c48:	30 91 28 04 	lds	r19, 0x0428
    4c4c:	40 91 29 04 	lds	r20, 0x0429
    4c50:	50 91 2a 04 	lds	r21, 0x042A
    4c54:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4c58:	6f 87       	std	Y+15, r22	; 0x0f
    4c5a:	78 8b       	std	Y+16, r23	; 0x10
    4c5c:	89 8b       	std	Y+17, r24	; 0x11
    4c5e:	9a 8b       	std	Y+18, r25	; 0x12
    4c60:	6d 83       	std	Y+5, r22	; 0x05
    4c62:	7e 83       	std	Y+6, r23	; 0x06
    4c64:	8f 83       	std	Y+7, r24	; 0x07
    4c66:	98 87       	std	Y+8, r25	; 0x08
	targetX = deltax;
	targetY = deltay;
	currAngle = 0;
    4c68:	1a 86       	std	Y+10, r1	; 0x0a
    4c6a:	19 86       	std	Y+9, r1	; 0x09
	//go2Angle(deltaTheta);
	// Stores the previous angle
	//orignalAngle = deltaTheta;
	
	while(goal == 0){ // Condition where the goal is not met.
		frontIR = getFrontIR();
    4c6c:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    4c70:	6b 01       	movw	r12, r22
    4c72:	7c 01       	movw	r14, r24
		rightIR = getRightIR();
    4c74:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    4c78:	4b 01       	movw	r8, r22
    4c7a:	5c 01       	movw	r10, r24
		leftIR = getLeftIR();
    4c7c:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    4c80:	2b 01       	movw	r4, r22
    4c82:	3c 01       	movw	r6, r24
		// Remember to use: currAngle = currAngle + originalAngle;
		
		if(frontIR > 6){
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	40 ec       	ldi	r20, 0xC0	; 192
    4c8a:	50 e4       	ldi	r21, 0x40	; 64
    4c8c:	c7 01       	movw	r24, r14
    4c8e:	b6 01       	movw	r22, r12
    4c90:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	4c f5       	brge	.+82     	; 0x4cea <go2Goal+0x130>
			moveForward(stepSize,200);
    4c98:	68 ec       	ldi	r22, 0xC8	; 200
    4c9a:	70 e0       	ldi	r23, 0x00	; 0
    4c9c:	84 e6       	ldi	r24, 0x64	; 100
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <moveForward>
			
			if(currAngle != 0 || currAngle != 360 || currAngle != -360 || currAngle != 180 || currAngle != -180){
				// Working on the Y axis:
				if(currAngle > 0){// Pointing towards the goal
    4ca4:	89 85       	ldd	r24, Y+9	; 0x09
    4ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca8:	18 16       	cp	r1, r24
    4caa:	19 06       	cpc	r1, r25
    4cac:	7c f4       	brge	.+30     	; 0x4ccc <go2Goal+0x112>
					deltay = deltay - stepSize*0.108;
    4cae:	2d ec       	ldi	r18, 0xCD	; 205
    4cb0:	3c ec       	ldi	r19, 0xCC	; 204
    4cb2:	4c e2       	ldi	r20, 0x2C	; 44
    4cb4:	51 e4       	ldi	r21, 0x41	; 65
    4cb6:	6d 81       	ldd	r22, Y+5	; 0x05
    4cb8:	7e 81       	ldd	r23, Y+6	; 0x06
    4cba:	8f 81       	ldd	r24, Y+7	; 0x07
    4cbc:	98 85       	ldd	r25, Y+8	; 0x08
    4cbe:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__subsf3>
    4cc2:	6d 83       	std	Y+5, r22	; 0x05
    4cc4:	7e 83       	std	Y+6, r23	; 0x06
    4cc6:	8f 83       	std	Y+7, r24	; 0x07
    4cc8:	98 87       	std	Y+8, r25	; 0x08
    4cca:	99 c0       	rjmp	.+306    	; 0x4dfe <go2Goal+0x244>
				}else{ // Pointing away from the goal.
					deltay = deltay + stepSize*0.108;
    4ccc:	2d ec       	ldi	r18, 0xCD	; 205
    4cce:	3c ec       	ldi	r19, 0xCC	; 204
    4cd0:	4c e2       	ldi	r20, 0x2C	; 44
    4cd2:	51 e4       	ldi	r21, 0x41	; 65
    4cd4:	6d 81       	ldd	r22, Y+5	; 0x05
    4cd6:	7e 81       	ldd	r23, Y+6	; 0x06
    4cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4cda:	98 85       	ldd	r25, Y+8	; 0x08
    4cdc:	0e 94 ff 29 	call	0x53fe	; 0x53fe <__addsf3>
    4ce0:	6d 83       	std	Y+5, r22	; 0x05
    4ce2:	7e 83       	std	Y+6, r23	; 0x06
    4ce4:	8f 83       	std	Y+7, r24	; 0x07
    4ce6:	98 87       	std	Y+8, r25	; 0x08
    4ce8:	8a c0       	rjmp	.+276    	; 0x4dfe <go2Goal+0x244>
				}
				
			}
			
		}else{
			if(rightIR < leftIR){
    4cea:	a3 01       	movw	r20, r6
    4cec:	92 01       	movw	r18, r4
    4cee:	c5 01       	movw	r24, r10
    4cf0:	b4 01       	movw	r22, r8
    4cf2:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4cf6:	88 23       	and	r24, r24
    4cf8:	0c f0       	brlt	.+2      	; 0x4cfc <go2Goal+0x142>
    4cfa:	41 c0       	rjmp	.+130    	; 0x4d7e <go2Goal+0x1c4>
				if(deltay >= 0){
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	a9 01       	movw	r20, r18
    4d02:	6d 81       	ldd	r22, Y+5	; 0x05
    4d04:	7e 81       	ldd	r23, Y+6	; 0x06
    4d06:	8f 81       	ldd	r24, Y+7	; 0x07
    4d08:	98 85       	ldd	r25, Y+8	; 0x08
    4d0a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4d0e:	88 23       	and	r24, r24
    4d10:	dc f0       	brlt	.+54     	; 0x4d48 <go2Goal+0x18e>
					currAngle = currAngle + 90;
    4d12:	89 85       	ldd	r24, Y+9	; 0x09
    4d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d16:	86 5a       	subi	r24, 0xA6	; 166
    4d18:	9f 4f       	sbci	r25, 0xFF	; 255
    4d1a:	9a 87       	std	Y+10, r25	; 0x0a
    4d1c:	89 87       	std	Y+9, r24	; 0x09
					go2Angle(currAngle);
    4d1e:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					/*LCD_clear();
					LCD_printf("%f", deltax);
					TMRSRVC_delay(2000);*/
					rightStepFollow(&deltax, &deltay, &currAngle, targetX, targetY);
    4d22:	cf 84       	ldd	r12, Y+15	; 0x0f
    4d24:	d8 88       	ldd	r13, Y+16	; 0x10
    4d26:	e9 88       	ldd	r14, Y+17	; 0x11
    4d28:	fa 88       	ldd	r15, Y+18	; 0x12
    4d2a:	0b 85       	ldd	r16, Y+11	; 0x0b
    4d2c:	1c 85       	ldd	r17, Y+12	; 0x0c
    4d2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d30:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d32:	ae 01       	movw	r20, r28
    4d34:	47 5f       	subi	r20, 0xF7	; 247
    4d36:	5f 4f       	sbci	r21, 0xFF	; 255
    4d38:	be 01       	movw	r22, r28
    4d3a:	6b 5f       	subi	r22, 0xFB	; 251
    4d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3e:	ce 01       	movw	r24, r28
    4d40:	01 96       	adiw	r24, 0x01	; 1
    4d42:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <rightStepFollow>
    4d46:	5b c0       	rjmp	.+182    	; 0x4dfe <go2Goal+0x244>
				}else{
					currAngle = currAngle - 90;
    4d48:	89 85       	ldd	r24, Y+9	; 0x09
    4d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d4c:	8a 55       	subi	r24, 0x5A	; 90
    4d4e:	91 09       	sbc	r25, r1
    4d50:	9a 87       	std	Y+10, r25	; 0x0a
    4d52:	89 87       	std	Y+9, r24	; 0x09
					go2Angle(currAngle);
    4d54:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					/*LCD_clear();
					LCD_printf("%f", deltax);
					TMRSRVC_delay(2000);*/
					leftStepFollow(&deltax, &deltay, &currAngle, targetX, targetY);
    4d58:	cf 84       	ldd	r12, Y+15	; 0x0f
    4d5a:	d8 88       	ldd	r13, Y+16	; 0x10
    4d5c:	e9 88       	ldd	r14, Y+17	; 0x11
    4d5e:	fa 88       	ldd	r15, Y+18	; 0x12
    4d60:	0b 85       	ldd	r16, Y+11	; 0x0b
    4d62:	1c 85       	ldd	r17, Y+12	; 0x0c
    4d64:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d66:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d68:	ae 01       	movw	r20, r28
    4d6a:	47 5f       	subi	r20, 0xF7	; 247
    4d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6e:	be 01       	movw	r22, r28
    4d70:	6b 5f       	subi	r22, 0xFB	; 251
    4d72:	7f 4f       	sbci	r23, 0xFF	; 255
    4d74:	ce 01       	movw	r24, r28
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	0e 94 36 22 	call	0x446c	; 0x446c <leftStepFollow>
    4d7c:	40 c0       	rjmp	.+128    	; 0x4dfe <go2Goal+0x244>
				}
			}else{
				if(deltay >= 0){
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	a9 01       	movw	r20, r18
    4d84:	6d 81       	ldd	r22, Y+5	; 0x05
    4d86:	7e 81       	ldd	r23, Y+6	; 0x06
    4d88:	8f 81       	ldd	r24, Y+7	; 0x07
    4d8a:	98 85       	ldd	r25, Y+8	; 0x08
    4d8c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4d90:	88 23       	and	r24, r24
    4d92:	dc f0       	brlt	.+54     	; 0x4dca <go2Goal+0x210>
					currAngle = currAngle - 90;
    4d94:	89 85       	ldd	r24, Y+9	; 0x09
    4d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d98:	8a 55       	subi	r24, 0x5A	; 90
    4d9a:	91 09       	sbc	r25, r1
    4d9c:	9a 87       	std	Y+10, r25	; 0x0a
    4d9e:	89 87       	std	Y+9, r24	; 0x09
					go2Angle(currAngle);
    4da0:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					/*LCD_clear();
					LCD_printf("%f", deltax);
					TMRSRVC_delay(2000);*/
					leftStepFollow(&deltax, &deltay, &currAngle, targetX, targetY);
    4da4:	cf 84       	ldd	r12, Y+15	; 0x0f
    4da6:	d8 88       	ldd	r13, Y+16	; 0x10
    4da8:	e9 88       	ldd	r14, Y+17	; 0x11
    4daa:	fa 88       	ldd	r15, Y+18	; 0x12
    4dac:	0b 85       	ldd	r16, Y+11	; 0x0b
    4dae:	1c 85       	ldd	r17, Y+12	; 0x0c
    4db0:	2d 85       	ldd	r18, Y+13	; 0x0d
    4db2:	3e 85       	ldd	r19, Y+14	; 0x0e
    4db4:	ae 01       	movw	r20, r28
    4db6:	47 5f       	subi	r20, 0xF7	; 247
    4db8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dba:	be 01       	movw	r22, r28
    4dbc:	6b 5f       	subi	r22, 0xFB	; 251
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	01 96       	adiw	r24, 0x01	; 1
    4dc4:	0e 94 36 22 	call	0x446c	; 0x446c <leftStepFollow>
    4dc8:	1a c0       	rjmp	.+52     	; 0x4dfe <go2Goal+0x244>
				}else{
					currAngle = currAngle + 90;
    4dca:	89 85       	ldd	r24, Y+9	; 0x09
    4dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dce:	86 5a       	subi	r24, 0xA6	; 166
    4dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd2:	9a 87       	std	Y+10, r25	; 0x0a
    4dd4:	89 87       	std	Y+9, r24	; 0x09
					go2Angle(currAngle);
    4dd6:	0e 94 0a 18 	call	0x3014	; 0x3014 <go2Angle>
					/*LCD_clear();
					LCD_printf("%f", deltax);
					TMRSRVC_delay(2000);*/
					rightStepFollow(&deltax, &deltay, &currAngle, targetX, targetY);
    4dda:	cf 84       	ldd	r12, Y+15	; 0x0f
    4ddc:	d8 88       	ldd	r13, Y+16	; 0x10
    4dde:	e9 88       	ldd	r14, Y+17	; 0x11
    4de0:	fa 88       	ldd	r15, Y+18	; 0x12
    4de2:	0b 85       	ldd	r16, Y+11	; 0x0b
    4de4:	1c 85       	ldd	r17, Y+12	; 0x0c
    4de6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4de8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4dea:	ae 01       	movw	r20, r28
    4dec:	47 5f       	subi	r20, 0xF7	; 247
    4dee:	5f 4f       	sbci	r21, 0xFF	; 255
    4df0:	be 01       	movw	r22, r28
    4df2:	6b 5f       	subi	r22, 0xFB	; 251
    4df4:	7f 4f       	sbci	r23, 0xFF	; 255
    4df6:	ce 01       	movw	r24, r28
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <rightStepFollow>
				}
			}
		}
		
		if((deltax <= 3 && deltay <= 3) || (deltax >= -3 && deltay >= -3) || (deltax <= 3 && deltay >= -3) || (deltax >= -3 && deltay <= 3)){ // Might need to set a tolerance
    4dfe:	c9 80       	ldd	r12, Y+1	; 0x01
    4e00:	da 80       	ldd	r13, Y+2	; 0x02
    4e02:	eb 80       	ldd	r14, Y+3	; 0x03
    4e04:	fc 80       	ldd	r15, Y+4	; 0x04
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	40 e4       	ldi	r20, 0x40	; 64
    4e0c:	50 e4       	ldi	r21, 0x40	; 64
    4e0e:	c7 01       	movw	r24, r14
    4e10:	b6 01       	movw	r22, r12
    4e12:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4e16:	18 16       	cp	r1, r24
    4e18:	6c f0       	brlt	.+26     	; 0x4e34 <go2Goal+0x27a>
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	40 e4       	ldi	r20, 0x40	; 64
    4e20:	50 e4       	ldi	r21, 0x40	; 64
    4e22:	6d 81       	ldd	r22, Y+5	; 0x05
    4e24:	7e 81       	ldd	r23, Y+6	; 0x06
    4e26:	8f 81       	ldd	r24, Y+7	; 0x07
    4e28:	98 85       	ldd	r25, Y+8	; 0x08
    4e2a:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4e2e:	18 16       	cp	r1, r24
    4e30:	0c f0       	brlt	.+2      	; 0x4e34 <go2Goal+0x27a>
    4e32:	44 c0       	rjmp	.+136    	; 0x4ebc <go2Goal+0x302>
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	40 e4       	ldi	r20, 0x40	; 64
    4e3a:	50 ec       	ldi	r21, 0xC0	; 192
    4e3c:	c7 01       	movw	r24, r14
    4e3e:	b6 01       	movw	r22, r12
    4e40:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4e44:	88 23       	and	r24, r24
    4e46:	64 f0       	brlt	.+24     	; 0x4e60 <go2Goal+0x2a6>
    4e48:	20 e0       	ldi	r18, 0x00	; 0
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	40 e4       	ldi	r20, 0x40	; 64
    4e4e:	50 ec       	ldi	r21, 0xC0	; 192
    4e50:	6d 81       	ldd	r22, Y+5	; 0x05
    4e52:	7e 81       	ldd	r23, Y+6	; 0x06
    4e54:	8f 81       	ldd	r24, Y+7	; 0x07
    4e56:	98 85       	ldd	r25, Y+8	; 0x08
    4e58:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	74 f5       	brge	.+92     	; 0x4ebc <go2Goal+0x302>
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	40 e4       	ldi	r20, 0x40	; 64
    4e66:	50 e4       	ldi	r21, 0x40	; 64
    4e68:	c7 01       	movw	r24, r14
    4e6a:	b6 01       	movw	r22, r12
    4e6c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4e70:	18 16       	cp	r1, r24
    4e72:	64 f0       	brlt	.+24     	; 0x4e8c <go2Goal+0x2d2>
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	40 e4       	ldi	r20, 0x40	; 64
    4e7a:	50 ec       	ldi	r21, 0xC0	; 192
    4e7c:	6d 81       	ldd	r22, Y+5	; 0x05
    4e7e:	7e 81       	ldd	r23, Y+6	; 0x06
    4e80:	8f 81       	ldd	r24, Y+7	; 0x07
    4e82:	98 85       	ldd	r25, Y+8	; 0x08
    4e84:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4e88:	88 23       	and	r24, r24
    4e8a:	c4 f4       	brge	.+48     	; 0x4ebc <go2Goal+0x302>
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	40 e4       	ldi	r20, 0x40	; 64
    4e92:	50 ec       	ldi	r21, 0xC0	; 192
    4e94:	c7 01       	movw	r24, r14
    4e96:	b6 01       	movw	r22, r12
    4e98:	0e 94 75 2c 	call	0x58ea	; 0x58ea <__gesf2>
    4e9c:	88 23       	and	r24, r24
    4e9e:	0c f4       	brge	.+2      	; 0x4ea2 <go2Goal+0x2e8>
    4ea0:	e5 ce       	rjmp	.-566    	; 0x4c6c <go2Goal+0xb2>
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	40 e4       	ldi	r20, 0x40	; 64
    4ea8:	50 e4       	ldi	r21, 0x40	; 64
    4eaa:	6d 81       	ldd	r22, Y+5	; 0x05
    4eac:	7e 81       	ldd	r23, Y+6	; 0x06
    4eae:	8f 81       	ldd	r24, Y+7	; 0x07
    4eb0:	98 85       	ldd	r25, Y+8	; 0x08
    4eb2:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4eb6:	18 16       	cp	r1, r24
    4eb8:	0c f4       	brge	.+2      	; 0x4ebc <go2Goal+0x302>
    4eba:	d8 ce       	rjmp	.-592    	; 0x4c6c <go2Goal+0xb2>
			goal = 1;
			LCD_clear();
    4ebc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
			LCD_printf("Reached goal mofo!");
    4ec0:	81 ed       	ldi	r24, 0xD1	; 209
    4ec2:	92 e0       	ldi	r25, 0x02	; 2
    4ec4:	9f 93       	push	r25
    4ec6:	8f 93       	push	r24
    4ec8:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
    4ecc:	0f 90       	pop	r0
    4ece:	0f 90       	pop	r0
		}
	}
	
    4ed0:	62 96       	adiw	r28, 0x12	; 18
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	f8 94       	cli
    4ed6:	de bf       	out	0x3e, r29	; 62
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	cd bf       	out	0x3d, r28	; 61
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	1f 91       	pop	r17
    4ee2:	0f 91       	pop	r16
    4ee4:	ff 90       	pop	r15
    4ee6:	ef 90       	pop	r14
    4ee8:	df 90       	pop	r13
    4eea:	cf 90       	pop	r12
    4eec:	bf 90       	pop	r11
    4eee:	af 90       	pop	r10
    4ef0:	9f 90       	pop	r9
    4ef2:	8f 90       	pop	r8
    4ef4:	7f 90       	pop	r7
    4ef6:	6f 90       	pop	r6
    4ef8:	5f 90       	pop	r5
    4efa:	4f 90       	pop	r4
    4efc:	08 95       	ret

00004efe <CBOT_main>:
	char ICT = 10;
	char IsWall = 0;
	float frontIR, rightIR, leftIR;

	// Opening LCD subsystem management.
	LCD_open();
    4efe:	0e 94 09 04 	call	0x812	; 0x812 <LCD_open>

	// This information is printed on the LCD display in case this initial setup takes longer.
	LCD_printf("Setting up...");
    4f02:	84 ee       	ldi	r24, 0xE4	; 228
    4f04:	92 e0       	ldi	r25, 0x02	; 2
    4f06:	9f 93       	push	r25
    4f08:	8f 93       	push	r24
    4f0a:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>

	// Subsystem open state variable information.
	SUBSYS_OPENSTAT openTiny;

	// Opening ATTINY subsystem management and storing returning value in openTiny that is associated to the struct SUBSYS_OPENSTAT_TYPE.
	openTiny = ATTINY_open();
    4f0e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ATTINY_open>

	// If the state struct from openTiny is different from the expected value, an error occurs.
	if (openTiny.state != SUBSYS_OPEN){
    4f12:	0f 90       	pop	r0
    4f14:	0f 90       	pop	r0
    4f16:	91 30       	cpi	r25, 0x01	; 1
    4f18:	51 f0       	breq	.+20     	; 0x4f2e <CBOT_main+0x30>
		LCD_clear();
    4f1a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
		// The error is then displayed.
		LCD_printf("Error when opening ATTINY!");
    4f1e:	82 ef       	ldi	r24, 0xF2	; 242
    4f20:	92 e0       	ldi	r25, 0x02	; 2
    4f22:	9f 93       	push	r25
    4f24:	8f 93       	push	r24
    4f26:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
    4f2a:	0f 90       	pop	r0
    4f2c:	0f 90       	pop	r0
	}

	SPKR_open(SPKR_BEEP_MODE);		// Open the speaker in beep mode
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	0e 94 d7 05 	call	0xbae	; 0xbae <SPKR_open>
	ADC_open();						// Open the ADC module
    4f34:	0e 94 76 03 	call	0x6ec	; 0x6ec <ADC_open>
	ADC_set_VREF( ADC_VREF_AVCC );	// Set the Voltage Reference first so VREF=5V.
    4f38:	81 e0       	ldi	r24, 0x01	; 1
    4f3a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ADC_set_VREF>
	STEPPER_open();					// Open Stepper module.
    4f3e:	0e 94 a3 07 	call	0xf46	; 0xf46 <STEPPER_open>

	// After the initial setup, a "Ready!" message is displayed on the second line of the LCD display.
	LCD_printf("\nReady!");
    4f42:	8d e0       	ldi	r24, 0x0D	; 13
    4f44:	93 e0       	ldi	r25, 0x03	; 3
    4f46:	9f 93       	push	r25
    4f48:	8f 93       	push	r24
    4f4a:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
	LCD_clear();
    4f4e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>

	STEPPER_set_mode(STEPPER_BOTH, STEPPER_NORMAL_MODE);
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	82 e0       	ldi	r24, 0x02	; 2
    4f56:	0e 94 48 08 	call	0x1090	; 0x1090 <STEPPER_set_mode>
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0

			}else if(ATTINY_get_SW_state(ATTINY_SW5)){
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
					LCD_clear();
					LCD_printf("( %d , %d )", cox, coy); // Displays the angle selection.
    4f5e:	c0 e7       	ldi	r28, 0x70	; 112
    4f60:	d3 e0       	ldi	r29, 0x03	; 3
					LCD_printf("\nSW3 + | SW4 - \nSW5 To y");
    4f62:	0f 2e       	mov	r0, r31
    4f64:	fc e7       	ldi	r31, 0x7C	; 124
    4f66:	ef 2e       	mov	r14, r31
    4f68:	f3 e0       	ldi	r31, 0x03	; 3
    4f6a:	ff 2e       	mov	r15, r31
    4f6c:	f0 2d       	mov	r31, r0
						// If SW4 is pressed, the coordinate x is decremented.
						}else if(ATTINY_get_SW_state(ATTINY_SW4)){
						cox--;
						// If the x value is < -5, it goes back to 5.
						if(cox < -20){
							cox = 20;
    4f6e:	0f 2e       	mov	r0, r31
    4f70:	f4 e1       	ldi	r31, 0x14	; 20
    4f72:	8f 2e       	mov	r8, r31
    4f74:	f0 2d       	mov	r31, r0
					// If SW3 is pressed, the coordinate x is incremented.
					if(ATTINY_get_SW_state(ATTINY_SW3)){
						cox++;
						// If the x value is > 5, it goes back to -5.
						if (cox > 20){
							cox = -20;
    4f76:	0f 2e       	mov	r0, r31
    4f78:	fc ee       	ldi	r31, 0xEC	; 236
    4f7a:	9f 2e       	mov	r9, r31
    4f7c:	f0 2d       	mov	r31, r0
				// After choosing the value of the coordinate x, the user must choose the value of the coordinate y:
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
					LCD_clear();
					LCD_printf("( %d , %d )", cox, coy);
					LCD_printf("\nSW3 + | SW4 - \nSW5 Enter");
    4f7e:	05 e9       	ldi	r16, 0x95	; 149
    4f80:	13 e0       	ldi	r17, 0x03	; 3

	// While loop that keeps the micro controller running begins here:
	while(1)
	{
		// Main menu:
		LCD_clear();
    4f82:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
		LCD_printf("SW3: Wall Follow\n");
    4f86:	85 e1       	ldi	r24, 0x15	; 21
    4f88:	93 e0       	ldi	r25, 0x03	; 3
    4f8a:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
		LCD_printf("SW4: AvoidFollow\n");
    4f8e:	86 e2       	ldi	r24, 0x26	; 38
    4f90:	93 e0       	ldi	r25, 0x03	; 3
    4f92:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
		LCD_printf("SW5: Target Follow\n");
    4f96:	87 e3       	ldi	r24, 0x37	; 55
    4f98:	93 e0       	ldi	r25, 0x03	; 3
    4f9a:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

		// Press SW3 to select one of the kids.
		if (ATTINY_get_SW_state(ATTINY_SW3)){
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    4fa4:	88 23       	and	r24, r24
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <CBOT_main+0xac>
    4fa8:	ad c0       	rjmp	.+346    	; 0x5104 <CBOT_main+0x206>
			while(1){ // Logic that determins what conditions the robot starts at and what to demo
				frontIR = getFrontIR();
    4faa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    4fae:	2b 01       	movw	r4, r22
    4fb0:	3c 01       	movw	r6, r24
				rightIR = getRightIR();
    4fb2:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    4fb6:	4b 01       	movw	r8, r22
    4fb8:	5c 01       	movw	r10, r24
				leftIR = getLeftIR();
    4fba:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    4fbe:	6b 01       	movw	r12, r22
    4fc0:	7c 01       	movw	r14, r24
				if ((leftIR < ICT) && (rightIR < ICT)) { // near both walls so use center follow
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	40 e2       	ldi	r20, 0x20	; 32
    4fc8:	51 e4       	ldi	r21, 0x41	; 65
    4fca:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4fce:	88 23       	and	r24, r24
    4fd0:	74 f4       	brge	.+28     	; 0x4fee <CBOT_main+0xf0>
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	40 e2       	ldi	r20, 0x20	; 32
    4fd8:	51 e4       	ldi	r21, 0x41	; 65
    4fda:	c5 01       	movw	r24, r10
    4fdc:	b4 01       	movw	r22, r8
    4fde:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4fe2:	88 23       	and	r24, r24
    4fe4:	0c f0       	brlt	.+2      	; 0x4fe8 <CBOT_main+0xea>
    4fe6:	f2 c1       	rjmp	.+996    	; 0x53cc <CBOT_main+0x4ce>
					centerFollow();
    4fe8:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <centerFollow>
    4fec:	de cf       	rjmp	.-68     	; 0x4faa <CBOT_main+0xac>
				} else if (rightIR < ICT){ // Walls to the right so follows on the right side
    4fee:	20 e0       	ldi	r18, 0x00	; 0
    4ff0:	30 e0       	ldi	r19, 0x00	; 0
    4ff2:	40 e2       	ldi	r20, 0x20	; 32
    4ff4:	51 e4       	ldi	r21, 0x41	; 65
    4ff6:	c5 01       	movw	r24, r10
    4ff8:	b4 01       	movw	r22, r8
    4ffa:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    4ffe:	88 23       	and	r24, r24
    5000:	14 f4       	brge	.+4      	; 0x5006 <CBOT_main+0x108>
					rightFollow();
    5002:	0e 94 0e 19 	call	0x321c	; 0x321c <rightFollow>
				} else if (leftIR < ICT) { // Walls to the left so follows on the left side
    5006:	20 e0       	ldi	r18, 0x00	; 0
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	40 e2       	ldi	r20, 0x20	; 32
    500c:	51 e4       	ldi	r21, 0x41	; 65
    500e:	c7 01       	movw	r24, r14
    5010:	b6 01       	movw	r22, r12
    5012:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5016:	88 23       	and	r24, r24
    5018:	14 f4       	brge	.+4      	; 0x501e <CBOT_main+0x120>
					leftFollow();
    501a:	0e 94 16 1b 	call	0x362c	; 0x362c <leftFollow>
				} else if (frontIR < ICT) { // Sees something to the front of it
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e2       	ldi	r20, 0x20	; 32
    5024:	51 e4       	ldi	r21, 0x41	; 65
    5026:	c3 01       	movw	r24, r6
    5028:	b2 01       	movw	r22, r4
    502a:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    502e:	88 23       	and	r24, r24
    5030:	0c f0       	brlt	.+2      	; 0x5034 <CBOT_main+0x136>
    5032:	5b c0       	rjmp	.+182    	; 0x50ea <CBOT_main+0x1ec>
					LCD_clear();
    5034:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
					LCD_printf("Forward,");
    5038:	8a e4       	ldi	r24, 0x4A	; 74
    503a:	93 e0       	ldi	r25, 0x03	; 3
    503c:	9f 93       	push	r25
    503e:	8f 93       	push	r24
    5040:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
					LCD_printf("\nthen Follow");
    5044:	83 e5       	ldi	r24, 0x53	; 83
    5046:	93 e0       	ldi	r25, 0x03	; 3
    5048:	9f 93       	push	r25
    504a:	8f 93       	push	r24
    504c:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>

					STEPPER_move_rn(STEPPER_BOTH, // Move a tad forward to get closer to the wall
    5050:	1f 92       	push	r1
    5052:	1f 92       	push	r1
    5054:	1f 92       	push	r1
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	8f 93       	push	r24
    505a:	80 e9       	ldi	r24, 0x90	; 144
    505c:	8f 93       	push	r24
    505e:	1f 92       	push	r1
    5060:	86 e9       	ldi	r24, 0x96	; 150
    5062:	8f 93       	push	r24
    5064:	1f 92       	push	r1
    5066:	1f 92       	push	r1
    5068:	81 2c       	mov	r8, r1
    506a:	a1 2c       	mov	r10, r1
    506c:	b1 2c       	mov	r11, r1
    506e:	c1 2c       	mov	r12, r1
    5070:	0f 2e       	mov	r0, r31
    5072:	f0 e9       	ldi	r31, 0x90	; 144
    5074:	ef 2e       	mov	r14, r31
    5076:	ff 24       	eor	r15, r15
    5078:	f3 94       	inc	r15
    507a:	f0 2d       	mov	r31, r0
    507c:	06 e9       	ldi	r16, 0x96	; 150
    507e:	10 e0       	ldi	r17, 0x00	; 0
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	40 e0       	ldi	r20, 0x00	; 0
    5086:	62 e0       	ldi	r22, 0x02	; 2
    5088:	82 e0       	ldi	r24, 0x02	; 2
    508a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
							STEPPER_FWD, 150, 400,	//Left
							STEPPER_FWD, 150, 400);	//Right
					TMRSRVC_delay(500); // 0.5 sec delay
    508e:	84 ef       	ldi	r24, 0xF4	; 244
    5090:	91 e0       	ldi	r25, 0x01	; 1
    5092:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
					rightIR = getRightIR();
    5096:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    509a:	6b 01       	movw	r12, r22
    509c:	7c 01       	movw	r14, r24
					leftIR = getLeftIR();
    509e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    50a2:	9b 01       	movw	r18, r22
    50a4:	ac 01       	movw	r20, r24
					if (leftIR > rightIR){ // determins what side the robot is closer to the wall. Essentialy random when perpendicular
    50a6:	8d b7       	in	r24, 0x3d	; 61
    50a8:	9e b7       	in	r25, 0x3e	; 62
    50aa:	0d 96       	adiw	r24, 0x0d	; 13
    50ac:	0f b6       	in	r0, 0x3f	; 63
    50ae:	f8 94       	cli
    50b0:	9e bf       	out	0x3e, r25	; 62
    50b2:	0f be       	out	0x3f, r0	; 63
    50b4:	8d bf       	out	0x3d, r24	; 61
    50b6:	c7 01       	movw	r24, r14
    50b8:	b6 01       	movw	r22, r12
    50ba:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    50be:	88 23       	and	r24, r24
    50c0:	54 f4       	brge	.+20     	; 0x50d6 <CBOT_main+0x1d8>
						//turn right
						go2ContAngle(-90, 100); // Left 90 turn
    50c2:	44 e6       	ldi	r20, 0x64	; 100
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	60 e0       	ldi	r22, 0x00	; 0
    50c8:	70 e0       	ldi	r23, 0x00	; 0
    50ca:	84 eb       	ldi	r24, 0xB4	; 180
    50cc:	92 ec       	ldi	r25, 0xC2	; 194
    50ce:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
						leftFollow();
    50d2:	0e 94 16 1b 	call	0x362c	; 0x362c <leftFollow>
					}else {
						//turn left
						go2ContAngle(90, 100); // Right 90 turn
    50d6:	44 e6       	ldi	r20, 0x64	; 100
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	60 e0       	ldi	r22, 0x00	; 0
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	84 eb       	ldi	r24, 0xB4	; 180
    50e0:	92 e4       	ldi	r25, 0x42	; 66
    50e2:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
						rightFollow();
    50e6:	0e 94 0e 19 	call	0x321c	; 0x321c <rightFollow>
					}
				} else { // If sensors don't detect anything, random wanderer is engaged
					LCD_clear();
    50ea:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
					LCD_printf("Random\n");
    50ee:	80 e6       	ldi	r24, 0x60	; 96
    50f0:	93 e0       	ldi	r25, 0x03	; 3
    50f2:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
					LCD_printf("Wanderer\n");
    50f6:	87 e6       	ldi	r24, 0x67	; 103
    50f8:	93 e0       	ldi	r25, 0x03	; 3
    50fa:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

					Random_Wanderer();
    50fe:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Random_Wanderer>
    5102:	53 cf       	rjmp	.-346    	; 0x4faa <CBOT_main+0xac>
				}
			}
		}else if(ATTINY_get_SW_state(ATTINY_SW4)){
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    510a:	88 23       	and	r24, r24
    510c:	09 f4       	brne	.+2      	; 0x5110 <CBOT_main+0x212>
    510e:	db c0       	rjmp	.+438    	; 0x52c6 <CBOT_main+0x3c8>
			while(1){
				frontIR = getFrontIR();
    5110:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
    5114:	2b 01       	movw	r4, r22
    5116:	3c 01       	movw	r6, r24
				rightIR = getRightIR();
    5118:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    511c:	4b 01       	movw	r8, r22
    511e:	5c 01       	movw	r10, r24
				leftIR = getLeftIR();
    5120:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    5124:	6b 01       	movw	r12, r22
    5126:	7c 01       	movw	r14, r24
				if ((leftIR < ICT) && (rightIR < ICT)) { // near both walls so use center follow
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e2       	ldi	r20, 0x20	; 32
    512e:	51 e4       	ldi	r21, 0x41	; 65
    5130:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5134:	88 23       	and	r24, r24
    5136:	74 f4       	brge	.+28     	; 0x5154 <CBOT_main+0x256>
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	40 e2       	ldi	r20, 0x20	; 32
    513e:	51 e4       	ldi	r21, 0x41	; 65
    5140:	c5 01       	movw	r24, r10
    5142:	b4 01       	movw	r22, r8
    5144:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5148:	88 23       	and	r24, r24
    514a:	0c f0       	brlt	.+2      	; 0x514e <CBOT_main+0x250>
    514c:	4b c1       	rjmp	.+662    	; 0x53e4 <CBOT_main+0x4e6>
					centerFollow();
    514e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <centerFollow>
    5152:	de cf       	rjmp	.-68     	; 0x5110 <CBOT_main+0x212>
				} else if (rightIR < ICT){ // Walls to the right so follows on the right side
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	40 e2       	ldi	r20, 0x20	; 32
    515a:	51 e4       	ldi	r21, 0x41	; 65
    515c:	c5 01       	movw	r24, r10
    515e:	b4 01       	movw	r22, r8
    5160:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5164:	88 23       	and	r24, r24
    5166:	14 f4       	brge	.+4      	; 0x516c <CBOT_main+0x26e>
					rightFollow();
    5168:	0e 94 0e 19 	call	0x321c	; 0x321c <rightFollow>
				} else if (leftIR < ICT) { // Walls to the left so follows on the left side
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	40 e2       	ldi	r20, 0x20	; 32
    5172:	51 e4       	ldi	r21, 0x41	; 65
    5174:	c7 01       	movw	r24, r14
    5176:	b6 01       	movw	r22, r12
    5178:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    517c:	88 23       	and	r24, r24
    517e:	14 f4       	brge	.+4      	; 0x5184 <CBOT_main+0x286>
					leftFollow();
    5180:	0e 94 16 1b 	call	0x362c	; 0x362c <leftFollow>
				} else if (frontIR < ICT) { // Sees something to the front of it
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e2       	ldi	r20, 0x20	; 32
    518a:	51 e4       	ldi	r21, 0x41	; 65
    518c:	c3 01       	movw	r24, r6
    518e:	b2 01       	movw	r22, r4
    5190:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5194:	88 23       	and	r24, r24
    5196:	0c f0       	brlt	.+2      	; 0x519a <CBOT_main+0x29c>
    5198:	89 c0       	rjmp	.+274    	; 0x52ac <CBOT_main+0x3ae>
					STEPPER_move_rn(STEPPER_BOTH, // Move a tad forward to get closer to the wall
    519a:	1f 92       	push	r1
    519c:	1f 92       	push	r1
    519e:	1f 92       	push	r1
    51a0:	d1 e0       	ldi	r29, 0x01	; 1
    51a2:	df 93       	push	r29
    51a4:	c0 e9       	ldi	r28, 0x90	; 144
    51a6:	cf 93       	push	r28
    51a8:	1f 92       	push	r1
    51aa:	1f 92       	push	r1
    51ac:	1f 92       	push	r1
    51ae:	1f 92       	push	r1
    51b0:	81 2c       	mov	r8, r1
    51b2:	a1 2c       	mov	r10, r1
    51b4:	b1 2c       	mov	r11, r1
    51b6:	c1 2c       	mov	r12, r1
    51b8:	0f 2e       	mov	r0, r31
    51ba:	f0 e9       	ldi	r31, 0x90	; 144
    51bc:	ef 2e       	mov	r14, r31
    51be:	ff 24       	eor	r15, r15
    51c0:	f3 94       	inc	r15
    51c2:	f0 2d       	mov	r31, r0
    51c4:	00 e0       	ldi	r16, 0x00	; 0
    51c6:	10 e0       	ldi	r17, 0x00	; 0
    51c8:	20 e0       	ldi	r18, 0x00	; 0
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	40 e0       	ldi	r20, 0x00	; 0
    51ce:	62 e0       	ldi	r22, 0x02	; 2
    51d0:	82 e0       	ldi	r24, 0x02	; 2
    51d2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
							STEPPER_FWD, 0, 400,	//Left
							STEPPER_FWD, 0, 400);	//Right
					go2ContAngle(45, 100); // Right 45 degree turn
    51d6:	44 e6       	ldi	r20, 0x64	; 100
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	60 e0       	ldi	r22, 0x00	; 0
    51dc:	70 e0       	ldi	r23, 0x00	; 0
    51de:	84 e3       	ldi	r24, 0x34	; 52
    51e0:	92 e4       	ldi	r25, 0x42	; 66
    51e2:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>

					frontIR = getFrontIR();
    51e6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
					if (frontIR < ICT){ // test if object or wall
						IsWall = IsWall++;
					}
					go2ContAngle(-90, 100); // Left 90 degree turn
    51ea:	44 e6       	ldi	r20, 0x64	; 100
    51ec:	50 e0       	ldi	r21, 0x00	; 0
    51ee:	60 e0       	ldi	r22, 0x00	; 0
    51f0:	70 e0       	ldi	r23, 0x00	; 0
    51f2:	84 eb       	ldi	r24, 0xB4	; 180
    51f4:	92 ec       	ldi	r25, 0xC2	; 194
    51f6:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
					frontIR = getFrontIR();
    51fa:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <getFrontIR>
					if (frontIR < ICT){  // test if object or wall
						IsWall = IsWall++;
					}
					go2ContAngle(45, 100); // Right 45 degree turn
    51fe:	44 e6       	ldi	r20, 0x64	; 100
    5200:	50 e0       	ldi	r21, 0x00	; 0
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	70 e0       	ldi	r23, 0x00	; 0
    5206:	84 e3       	ldi	r24, 0x34	; 52
    5208:	92 e4       	ldi	r25, 0x42	; 66
    520a:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
					if (IsWall > 0){ // avoid object
						go2point(5,0);
					} else { // follow the wall
						LCD_clear();
    520e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
						LCD_printf("Forward,");
    5212:	8a e4       	ldi	r24, 0x4A	; 74
    5214:	93 e0       	ldi	r25, 0x03	; 3
    5216:	9f 93       	push	r25
    5218:	8f 93       	push	r24
    521a:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
						LCD_printf("\nthen Follow");
    521e:	83 e5       	ldi	r24, 0x53	; 83
    5220:	93 e0       	ldi	r25, 0x03	; 3
    5222:	9f 93       	push	r25
    5224:	8f 93       	push	r24
    5226:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>

						STEPPER_move_rn(STEPPER_BOTH,
    522a:	1f 92       	push	r1
    522c:	1f 92       	push	r1
    522e:	1f 92       	push	r1
    5230:	df 93       	push	r29
    5232:	cf 93       	push	r28
    5234:	1f 92       	push	r1
    5236:	86 e9       	ldi	r24, 0x96	; 150
    5238:	8f 93       	push	r24
    523a:	1f 92       	push	r1
    523c:	1f 92       	push	r1
    523e:	06 e9       	ldi	r16, 0x96	; 150
    5240:	10 e0       	ldi	r17, 0x00	; 0
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	62 e0       	ldi	r22, 0x02	; 2
    524a:	82 e0       	ldi	r24, 0x02	; 2
    524c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <STEPPER_move>
								STEPPER_FWD, 150, 400,	//Left
								STEPPER_FWD, 150, 400);	//Right
						TMRSRVC_delay(500); // 0.5 sec delay
    5250:	84 ef       	ldi	r24, 0xF4	; 244
    5252:	91 e0       	ldi	r25, 0x01	; 1
    5254:	0e 94 aa 0a 	call	0x1554	; 0x1554 <TMRSRVC_delay>
						rightIR = getRightIR();
    5258:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <getRightIR>
    525c:	6b 01       	movw	r12, r22
    525e:	7c 01       	movw	r14, r24
						leftIR = getLeftIR();
    5260:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <getLeftIR>
    5264:	9b 01       	movw	r18, r22
    5266:	ac 01       	movw	r20, r24
						if (leftIR > rightIR){
    5268:	8d b7       	in	r24, 0x3d	; 61
    526a:	9e b7       	in	r25, 0x3e	; 62
    526c:	46 96       	adiw	r24, 0x16	; 22
    526e:	0f b6       	in	r0, 0x3f	; 63
    5270:	f8 94       	cli
    5272:	9e bf       	out	0x3e, r25	; 62
    5274:	0f be       	out	0x3f, r0	; 63
    5276:	8d bf       	out	0x3d, r24	; 61
    5278:	c7 01       	movw	r24, r14
    527a:	b6 01       	movw	r22, r12
    527c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    5280:	88 23       	and	r24, r24
    5282:	54 f4       	brge	.+20     	; 0x5298 <CBOT_main+0x39a>
							//turn 90 degree right
							go2ContAngle(-90, 100);
    5284:	44 e6       	ldi	r20, 0x64	; 100
    5286:	50 e0       	ldi	r21, 0x00	; 0
    5288:	60 e0       	ldi	r22, 0x00	; 0
    528a:	70 e0       	ldi	r23, 0x00	; 0
    528c:	84 eb       	ldi	r24, 0xB4	; 180
    528e:	92 ec       	ldi	r25, 0xC2	; 194
    5290:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
							leftFollow();
    5294:	0e 94 16 1b 	call	0x362c	; 0x362c <leftFollow>
						}else {
							//turn 90 degree left
							go2ContAngle(90, 100);
    5298:	44 e6       	ldi	r20, 0x64	; 100
    529a:	50 e0       	ldi	r21, 0x00	; 0
    529c:	60 e0       	ldi	r22, 0x00	; 0
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	84 eb       	ldi	r24, 0xB4	; 180
    52a2:	92 e4       	ldi	r25, 0x42	; 66
    52a4:	0e 94 4c 18 	call	0x3098	; 0x3098 <go2ContAngle>
							rightFollow();
    52a8:	0e 94 0e 19 	call	0x321c	; 0x321c <rightFollow>
						}					

					} }else { // If sensors don't detect anything, random wanderer is engaged
						LCD_clear();
    52ac:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
						LCD_printf("Random\n");
    52b0:	80 e6       	ldi	r24, 0x60	; 96
    52b2:	93 e0       	ldi	r25, 0x03	; 3
    52b4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>
						LCD_printf("Wanderer\n");
    52b8:	87 e6       	ldi	r24, 0x67	; 103
    52ba:	93 e0       	ldi	r25, 0x03	; 3
    52bc:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <puts>

						Random_Wanderer();
    52c0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Random_Wanderer>
    52c4:	25 cf       	rjmp	.-438    	; 0x5110 <CBOT_main+0x212>
					}
				}


			}else if(ATTINY_get_SW_state(ATTINY_SW5)){
    52c6:	82 e0       	ldi	r24, 0x02	; 2
    52c8:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    52cc:	88 23       	and	r24, r24
    52ce:	09 f4       	brne	.+2      	; 0x52d2 <CBOT_main+0x3d4>
    52d0:	58 ce       	rjmp	.-848    	; 0x4f82 <CBOT_main+0x84>
    52d2:	b1 2c       	mov	r11, r1
    52d4:	32 c0       	rjmp	.+100    	; 0x533a <CBOT_main+0x43c>
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
					LCD_clear();
    52d6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
					LCD_printf("( %d , %d )", cox, coy); // Displays the angle selection.
    52da:	1f 92       	push	r1
    52dc:	1f 92       	push	r1
    52de:	2b 2d       	mov	r18, r11
    52e0:	33 27       	eor	r19, r19
    52e2:	27 fd       	sbrc	r18, 7
    52e4:	30 95       	com	r19
    52e6:	3f 93       	push	r19
    52e8:	bf 92       	push	r11
    52ea:	df 93       	push	r29
    52ec:	cf 93       	push	r28
    52ee:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
					LCD_printf("\nSW3 + | SW4 - \nSW5 To y");
    52f2:	ff 92       	push	r15
    52f4:	ef 92       	push	r14
    52f6:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
					// If SW3 is pressed, the coordinate x is incremented.
					if(ATTINY_get_SW_state(ATTINY_SW3)){
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    5300:	2d b7       	in	r18, 0x3d	; 61
    5302:	3e b7       	in	r19, 0x3e	; 62
    5304:	28 5f       	subi	r18, 0xF8	; 248
    5306:	3f 4f       	sbci	r19, 0xFF	; 255
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	3e bf       	out	0x3e, r19	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	2d bf       	out	0x3d, r18	; 61
    5312:	88 23       	and	r24, r24
    5314:	29 f0       	breq	.+10     	; 0x5320 <CBOT_main+0x422>
						cox++;
    5316:	b3 94       	inc	r11
						// If the x value is > 5, it goes back to -5.
						if (cox > 20){
    5318:	34 e1       	ldi	r19, 0x14	; 20
    531a:	3b 15       	cp	r19, r11
    531c:	5c f0       	brlt	.+22     	; 0x5334 <CBOT_main+0x436>
    531e:	0d c0       	rjmp	.+26     	; 0x533a <CBOT_main+0x43c>
							cox = -20;
						}
						// If SW4 is pressed, the coordinate x is decremented.
						}else if(ATTINY_get_SW_state(ATTINY_SW4)){
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    5326:	88 23       	and	r24, r24
    5328:	41 f0       	breq	.+16     	; 0x533a <CBOT_main+0x43c>
						cox--;
    532a:	ba 94       	dec	r11
						// If the x value is < -5, it goes back to 5.
						if(cox < -20){
    532c:	8c ee       	ldi	r24, 0xEC	; 236
    532e:	b8 16       	cp	r11, r24
    5330:	1c f0       	brlt	.+6      	; 0x5338 <CBOT_main+0x43a>
    5332:	03 c0       	rjmp	.+6      	; 0x533a <CBOT_main+0x43c>
					// If SW3 is pressed, the coordinate x is incremented.
					if(ATTINY_get_SW_state(ATTINY_SW3)){
						cox++;
						// If the x value is > 5, it goes back to -5.
						if (cox > 20){
							cox = -20;
    5334:	b9 2c       	mov	r11, r9
    5336:	01 c0       	rjmp	.+2      	; 0x533a <CBOT_main+0x43c>
						// If SW4 is pressed, the coordinate x is decremented.
						}else if(ATTINY_get_SW_state(ATTINY_SW4)){
						cox--;
						// If the x value is < -5, it goes back to 5.
						if(cox < -20){
							cox = 20;
    5338:	b8 2c       	mov	r11, r8
				}


			}else if(ATTINY_get_SW_state(ATTINY_SW5)){
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
    533a:	82 e0       	ldi	r24, 0x02	; 2
    533c:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    5340:	88 23       	and	r24, r24
    5342:	49 f2       	breq	.-110    	; 0x52d6 <CBOT_main+0x3d8>
    5344:	a1 2c       	mov	r10, r1
				}
				// After choosing the value of the coordinate x, the user must choose the value of the coordinate y:
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
					LCD_clear();
					LCD_printf("( %d , %d )", cox, coy);
    5346:	cb 2c       	mov	r12, r11
    5348:	dd 24       	eor	r13, r13
    534a:	c7 fc       	sbrc	r12, 7
    534c:	d0 94       	com	r13
    534e:	32 c0       	rjmp	.+100    	; 0x53b4 <CBOT_main+0x4b6>
					}
				}
				// After choosing the value of the coordinate x, the user must choose the value of the coordinate y:
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
					LCD_clear();
    5350:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
					LCD_printf("( %d , %d )", cox, coy);
    5354:	2a 2d       	mov	r18, r10
    5356:	33 27       	eor	r19, r19
    5358:	27 fd       	sbrc	r18, 7
    535a:	30 95       	com	r19
    535c:	3f 93       	push	r19
    535e:	af 92       	push	r10
    5360:	df 92       	push	r13
    5362:	bf 92       	push	r11
    5364:	df 93       	push	r29
    5366:	cf 93       	push	r28
    5368:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
					LCD_printf("\nSW3 + | SW4 - \nSW5 Enter");
    536c:	1f 93       	push	r17
    536e:	0f 93       	push	r16
    5370:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <printf>
					// If SW3 is pressed, the coordinate y is incremented.
					if(ATTINY_get_SW_state(ATTINY_SW3)){
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    537a:	2d b7       	in	r18, 0x3d	; 61
    537c:	3e b7       	in	r19, 0x3e	; 62
    537e:	28 5f       	subi	r18, 0xF8	; 248
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	3e bf       	out	0x3e, r19	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	2d bf       	out	0x3d, r18	; 61
    538c:	88 23       	and	r24, r24
    538e:	29 f0       	breq	.+10     	; 0x539a <CBOT_main+0x49c>
						coy++;
    5390:	a3 94       	inc	r10
						// If the x value is > 5, it goes back to -5.
						if (coy > 20){
    5392:	34 e1       	ldi	r19, 0x14	; 20
    5394:	3a 15       	cp	r19, r10
    5396:	5c f0       	brlt	.+22     	; 0x53ae <CBOT_main+0x4b0>
    5398:	0d c0       	rjmp	.+26     	; 0x53b4 <CBOT_main+0x4b6>
							coy = -20;
						}
						// If SW4 is pressed, the coordinate y is decremented.
						}else if(ATTINY_get_SW_state(ATTINY_SW4)){
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    53a0:	88 23       	and	r24, r24
    53a2:	41 f0       	breq	.+16     	; 0x53b4 <CBOT_main+0x4b6>
						coy--;
    53a4:	aa 94       	dec	r10
						// If the x value is < -5, it goes back to 5
						if(coy < -20){
    53a6:	8c ee       	ldi	r24, 0xEC	; 236
    53a8:	a8 16       	cp	r10, r24
    53aa:	1c f0       	brlt	.+6      	; 0x53b2 <CBOT_main+0x4b4>
    53ac:	03 c0       	rjmp	.+6      	; 0x53b4 <CBOT_main+0x4b6>
					// If SW3 is pressed, the coordinate y is incremented.
					if(ATTINY_get_SW_state(ATTINY_SW3)){
						coy++;
						// If the x value is > 5, it goes back to -5.
						if (coy > 20){
							coy = -20;
    53ae:	a9 2c       	mov	r10, r9
    53b0:	01 c0       	rjmp	.+2      	; 0x53b4 <CBOT_main+0x4b6>
						// If SW4 is pressed, the coordinate y is decremented.
						}else if(ATTINY_get_SW_state(ATTINY_SW4)){
						coy--;
						// If the x value is < -5, it goes back to 5
						if(coy < -20){
							coy = 20;
    53b2:	a8 2c       	mov	r10, r8
						}
					}
				}
				// After choosing the value of the coordinate x, the user must choose the value of the coordinate y:
				// While SW5 is not pressed...
				while(!ATTINY_get_SW_state(ATTINY_SW5)){
    53b4:	82 e0       	ldi	r24, 0x02	; 2
    53b6:	0e 94 0d 0a 	call	0x141a	; 0x141a <ATTINY_get_SW_state>
    53ba:	88 23       	and	r24, r24
    53bc:	49 f2       	breq	.-110    	; 0x5350 <CBOT_main+0x452>
							coy = 20;
						}
					}
				}
				// Calls go to goal point function.
				go2Goal(cox,coy);
    53be:	6a 2d       	mov	r22, r10
    53c0:	8b 2d       	mov	r24, r11
    53c2:	0e 94 dd 25 	call	0x4bba	; 0x4bba <go2Goal>
				// Clears the variables up.
				cox = 0;
				coy = 0;
				LCD_clear();
    53c6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <LCD_clear>
    53ca:	db cd       	rjmp	.-1098   	; 0x4f82 <CBOT_main+0x84>
				frontIR = getFrontIR();
				rightIR = getRightIR();
				leftIR = getLeftIR();
				if ((leftIR < ICT) && (rightIR < ICT)) { // near both walls so use center follow
					centerFollow();
				} else if (rightIR < ICT){ // Walls to the right so follows on the right side
    53cc:	20 e0       	ldi	r18, 0x00	; 0
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	40 e2       	ldi	r20, 0x20	; 32
    53d2:	51 e4       	ldi	r21, 0x41	; 65
    53d4:	c5 01       	movw	r24, r10
    53d6:	b4 01       	movw	r22, r8
    53d8:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    53dc:	88 23       	and	r24, r24
    53de:	0c f0       	brlt	.+2      	; 0x53e2 <CBOT_main+0x4e4>
    53e0:	1c ce       	rjmp	.-968    	; 0x501a <CBOT_main+0x11c>
    53e2:	0f ce       	rjmp	.-994    	; 0x5002 <CBOT_main+0x104>
				frontIR = getFrontIR();
				rightIR = getRightIR();
				leftIR = getLeftIR();
				if ((leftIR < ICT) && (rightIR < ICT)) { // near both walls so use center follow
					centerFollow();
				} else if (rightIR < ICT){ // Walls to the right so follows on the right side
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	40 e2       	ldi	r20, 0x20	; 32
    53ea:	51 e4       	ldi	r21, 0x41	; 65
    53ec:	c5 01       	movw	r24, r10
    53ee:	b4 01       	movw	r22, r8
    53f0:	0e 94 c5 2a 	call	0x558a	; 0x558a <__cmpsf2>
    53f4:	88 23       	and	r24, r24
    53f6:	0c f0       	brlt	.+2      	; 0x53fa <CBOT_main+0x4fc>
    53f8:	c3 ce       	rjmp	.-634    	; 0x5180 <CBOT_main+0x282>
    53fa:	b6 ce       	rjmp	.-660    	; 0x5168 <CBOT_main+0x26a>

000053fc <__subsf3>:
    53fc:	50 58       	subi	r21, 0x80	; 128

000053fe <__addsf3>:
    53fe:	bb 27       	eor	r27, r27
    5400:	aa 27       	eor	r26, r26
    5402:	0e d0       	rcall	.+28     	; 0x5420 <__addsf3x>
    5404:	27 c2       	rjmp	.+1102   	; 0x5854 <__fp_round>
    5406:	f0 d1       	rcall	.+992    	; 0x57e8 <__fp_pscA>
    5408:	30 f0       	brcs	.+12     	; 0x5416 <__addsf3+0x18>
    540a:	f5 d1       	rcall	.+1002   	; 0x57f6 <__fp_pscB>
    540c:	20 f0       	brcs	.+8      	; 0x5416 <__addsf3+0x18>
    540e:	31 f4       	brne	.+12     	; 0x541c <__addsf3+0x1e>
    5410:	9f 3f       	cpi	r25, 0xFF	; 255
    5412:	11 f4       	brne	.+4      	; 0x5418 <__addsf3+0x1a>
    5414:	1e f4       	brtc	.+6      	; 0x541c <__addsf3+0x1e>
    5416:	c0 c1       	rjmp	.+896    	; 0x5798 <__fp_nan>
    5418:	0e f4       	brtc	.+2      	; 0x541c <__addsf3+0x1e>
    541a:	e0 95       	com	r30
    541c:	e7 fb       	bst	r30, 7
    541e:	b6 c1       	rjmp	.+876    	; 0x578c <__fp_inf>

00005420 <__addsf3x>:
    5420:	e9 2f       	mov	r30, r25
    5422:	3a d2       	rcall	.+1140   	; 0x5898 <__fp_split3>
    5424:	80 f3       	brcs	.-32     	; 0x5406 <__addsf3+0x8>
    5426:	ba 17       	cp	r27, r26
    5428:	62 07       	cpc	r22, r18
    542a:	73 07       	cpc	r23, r19
    542c:	84 07       	cpc	r24, r20
    542e:	95 07       	cpc	r25, r21
    5430:	18 f0       	brcs	.+6      	; 0x5438 <__addsf3x+0x18>
    5432:	71 f4       	brne	.+28     	; 0x5450 <__addsf3x+0x30>
    5434:	9e f5       	brtc	.+102    	; 0x549c <__addsf3x+0x7c>
    5436:	52 c2       	rjmp	.+1188   	; 0x58dc <__fp_zero>
    5438:	0e f4       	brtc	.+2      	; 0x543c <__addsf3x+0x1c>
    543a:	e0 95       	com	r30
    543c:	0b 2e       	mov	r0, r27
    543e:	ba 2f       	mov	r27, r26
    5440:	a0 2d       	mov	r26, r0
    5442:	0b 01       	movw	r0, r22
    5444:	b9 01       	movw	r22, r18
    5446:	90 01       	movw	r18, r0
    5448:	0c 01       	movw	r0, r24
    544a:	ca 01       	movw	r24, r20
    544c:	a0 01       	movw	r20, r0
    544e:	11 24       	eor	r1, r1
    5450:	ff 27       	eor	r31, r31
    5452:	59 1b       	sub	r21, r25
    5454:	99 f0       	breq	.+38     	; 0x547c <__addsf3x+0x5c>
    5456:	59 3f       	cpi	r21, 0xF9	; 249
    5458:	50 f4       	brcc	.+20     	; 0x546e <__addsf3x+0x4e>
    545a:	50 3e       	cpi	r21, 0xE0	; 224
    545c:	68 f1       	brcs	.+90     	; 0x54b8 <__addsf3x+0x98>
    545e:	1a 16       	cp	r1, r26
    5460:	f0 40       	sbci	r31, 0x00	; 0
    5462:	a2 2f       	mov	r26, r18
    5464:	23 2f       	mov	r18, r19
    5466:	34 2f       	mov	r19, r20
    5468:	44 27       	eor	r20, r20
    546a:	58 5f       	subi	r21, 0xF8	; 248
    546c:	f3 cf       	rjmp	.-26     	; 0x5454 <__addsf3x+0x34>
    546e:	46 95       	lsr	r20
    5470:	37 95       	ror	r19
    5472:	27 95       	ror	r18
    5474:	a7 95       	ror	r26
    5476:	f0 40       	sbci	r31, 0x00	; 0
    5478:	53 95       	inc	r21
    547a:	c9 f7       	brne	.-14     	; 0x546e <__addsf3x+0x4e>
    547c:	7e f4       	brtc	.+30     	; 0x549c <__addsf3x+0x7c>
    547e:	1f 16       	cp	r1, r31
    5480:	ba 0b       	sbc	r27, r26
    5482:	62 0b       	sbc	r22, r18
    5484:	73 0b       	sbc	r23, r19
    5486:	84 0b       	sbc	r24, r20
    5488:	ba f0       	brmi	.+46     	; 0x54b8 <__addsf3x+0x98>
    548a:	91 50       	subi	r25, 0x01	; 1
    548c:	a1 f0       	breq	.+40     	; 0x54b6 <__addsf3x+0x96>
    548e:	ff 0f       	add	r31, r31
    5490:	bb 1f       	adc	r27, r27
    5492:	66 1f       	adc	r22, r22
    5494:	77 1f       	adc	r23, r23
    5496:	88 1f       	adc	r24, r24
    5498:	c2 f7       	brpl	.-16     	; 0x548a <__addsf3x+0x6a>
    549a:	0e c0       	rjmp	.+28     	; 0x54b8 <__addsf3x+0x98>
    549c:	ba 0f       	add	r27, r26
    549e:	62 1f       	adc	r22, r18
    54a0:	73 1f       	adc	r23, r19
    54a2:	84 1f       	adc	r24, r20
    54a4:	48 f4       	brcc	.+18     	; 0x54b8 <__addsf3x+0x98>
    54a6:	87 95       	ror	r24
    54a8:	77 95       	ror	r23
    54aa:	67 95       	ror	r22
    54ac:	b7 95       	ror	r27
    54ae:	f7 95       	ror	r31
    54b0:	9e 3f       	cpi	r25, 0xFE	; 254
    54b2:	08 f0       	brcs	.+2      	; 0x54b6 <__addsf3x+0x96>
    54b4:	b3 cf       	rjmp	.-154    	; 0x541c <__addsf3+0x1e>
    54b6:	93 95       	inc	r25
    54b8:	88 0f       	add	r24, r24
    54ba:	08 f0       	brcs	.+2      	; 0x54be <__addsf3x+0x9e>
    54bc:	99 27       	eor	r25, r25
    54be:	ee 0f       	add	r30, r30
    54c0:	97 95       	ror	r25
    54c2:	87 95       	ror	r24
    54c4:	08 95       	ret
    54c6:	90 d1       	rcall	.+800    	; 0x57e8 <__fp_pscA>
    54c8:	58 f0       	brcs	.+22     	; 0x54e0 <__addsf3x+0xc0>
    54ca:	80 e8       	ldi	r24, 0x80	; 128
    54cc:	91 e0       	ldi	r25, 0x01	; 1
    54ce:	09 f4       	brne	.+2      	; 0x54d2 <__addsf3x+0xb2>
    54d0:	9e ef       	ldi	r25, 0xFE	; 254
    54d2:	91 d1       	rcall	.+802    	; 0x57f6 <__fp_pscB>
    54d4:	28 f0       	brcs	.+10     	; 0x54e0 <__addsf3x+0xc0>
    54d6:	40 e8       	ldi	r20, 0x80	; 128
    54d8:	51 e0       	ldi	r21, 0x01	; 1
    54da:	59 f4       	brne	.+22     	; 0x54f2 <atan2+0xe>
    54dc:	5e ef       	ldi	r21, 0xFE	; 254
    54de:	09 c0       	rjmp	.+18     	; 0x54f2 <atan2+0xe>
    54e0:	5b c1       	rjmp	.+694    	; 0x5798 <__fp_nan>
    54e2:	fc c1       	rjmp	.+1016   	; 0x58dc <__fp_zero>

000054e4 <atan2>:
    54e4:	e9 2f       	mov	r30, r25
    54e6:	e0 78       	andi	r30, 0x80	; 128
    54e8:	d7 d1       	rcall	.+942    	; 0x5898 <__fp_split3>
    54ea:	68 f3       	brcs	.-38     	; 0x54c6 <__addsf3x+0xa6>
    54ec:	09 2e       	mov	r0, r25
    54ee:	05 2a       	or	r0, r21
    54f0:	c1 f3       	breq	.-16     	; 0x54e2 <__addsf3x+0xc2>
    54f2:	26 17       	cp	r18, r22
    54f4:	37 07       	cpc	r19, r23
    54f6:	48 07       	cpc	r20, r24
    54f8:	59 07       	cpc	r21, r25
    54fa:	38 f0       	brcs	.+14     	; 0x550a <atan2+0x26>
    54fc:	0e 2e       	mov	r0, r30
    54fe:	07 f8       	bld	r0, 7
    5500:	e0 25       	eor	r30, r0
    5502:	69 f0       	breq	.+26     	; 0x551e <atan2+0x3a>
    5504:	e0 25       	eor	r30, r0
    5506:	e0 64       	ori	r30, 0x40	; 64
    5508:	0a c0       	rjmp	.+20     	; 0x551e <atan2+0x3a>
    550a:	ef 63       	ori	r30, 0x3F	; 63
    550c:	07 f8       	bld	r0, 7
    550e:	00 94       	com	r0
    5510:	07 fa       	bst	r0, 7
    5512:	db 01       	movw	r26, r22
    5514:	b9 01       	movw	r22, r18
    5516:	9d 01       	movw	r18, r26
    5518:	dc 01       	movw	r26, r24
    551a:	ca 01       	movw	r24, r20
    551c:	ad 01       	movw	r20, r26
    551e:	ef 93       	push	r30
    5520:	4a d0       	rcall	.+148    	; 0x55b6 <__divsf3_pse>
    5522:	98 d1       	rcall	.+816    	; 0x5854 <__fp_round>
    5524:	0a d0       	rcall	.+20     	; 0x553a <atan>
    5526:	5f 91       	pop	r21
    5528:	55 23       	and	r21, r21
    552a:	31 f0       	breq	.+12     	; 0x5538 <atan2+0x54>
    552c:	2b ed       	ldi	r18, 0xDB	; 219
    552e:	3f e0       	ldi	r19, 0x0F	; 15
    5530:	49 e4       	ldi	r20, 0x49	; 73
    5532:	50 fd       	sbrc	r21, 0
    5534:	49 ec       	ldi	r20, 0xC9	; 201
    5536:	63 cf       	rjmp	.-314    	; 0x53fe <__addsf3>
    5538:	08 95       	ret

0000553a <atan>:
    553a:	df 93       	push	r29
    553c:	dd 27       	eor	r29, r29
    553e:	b9 2f       	mov	r27, r25
    5540:	bf 77       	andi	r27, 0x7F	; 127
    5542:	40 e8       	ldi	r20, 0x80	; 128
    5544:	5f e3       	ldi	r21, 0x3F	; 63
    5546:	16 16       	cp	r1, r22
    5548:	17 06       	cpc	r1, r23
    554a:	48 07       	cpc	r20, r24
    554c:	5b 07       	cpc	r21, r27
    554e:	10 f4       	brcc	.+4      	; 0x5554 <atan+0x1a>
    5550:	d9 2f       	mov	r29, r25
    5552:	cf d1       	rcall	.+926    	; 0x58f2 <inverse>
    5554:	9f 93       	push	r25
    5556:	8f 93       	push	r24
    5558:	7f 93       	push	r23
    555a:	6f 93       	push	r22
    555c:	3a d2       	rcall	.+1140   	; 0x59d2 <square>
    555e:	ec e7       	ldi	r30, 0x7C	; 124
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	1d d1       	rcall	.+570    	; 0x579e <__fp_powser>
    5564:	77 d1       	rcall	.+750    	; 0x5854 <__fp_round>
    5566:	2f 91       	pop	r18
    5568:	3f 91       	pop	r19
    556a:	4f 91       	pop	r20
    556c:	5f 91       	pop	r21
    556e:	d4 d1       	rcall	.+936    	; 0x5918 <__mulsf3x>
    5570:	dd 23       	and	r29, r29
    5572:	49 f0       	breq	.+18     	; 0x5586 <atan+0x4c>
    5574:	90 58       	subi	r25, 0x80	; 128
    5576:	a2 ea       	ldi	r26, 0xA2	; 162
    5578:	2a ed       	ldi	r18, 0xDA	; 218
    557a:	3f e0       	ldi	r19, 0x0F	; 15
    557c:	49 ec       	ldi	r20, 0xC9	; 201
    557e:	5f e3       	ldi	r21, 0x3F	; 63
    5580:	d0 78       	andi	r29, 0x80	; 128
    5582:	5d 27       	eor	r21, r29
    5584:	4d df       	rcall	.-358    	; 0x5420 <__addsf3x>
    5586:	df 91       	pop	r29
    5588:	65 c1       	rjmp	.+714    	; 0x5854 <__fp_round>

0000558a <__cmpsf2>:
    558a:	dc d0       	rcall	.+440    	; 0x5744 <__fp_cmp>
    558c:	08 f4       	brcc	.+2      	; 0x5590 <__cmpsf2+0x6>
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	08 95       	ret

00005592 <cos>:
    5592:	39 d1       	rcall	.+626    	; 0x5806 <__fp_rempio2>
    5594:	e3 95       	inc	r30
    5596:	6f c1       	rjmp	.+734    	; 0x5876 <__fp_sinus>

00005598 <__divsf3>:
    5598:	0c d0       	rcall	.+24     	; 0x55b2 <__divsf3x>
    559a:	5c c1       	rjmp	.+696    	; 0x5854 <__fp_round>
    559c:	2c d1       	rcall	.+600    	; 0x57f6 <__fp_pscB>
    559e:	40 f0       	brcs	.+16     	; 0x55b0 <__divsf3+0x18>
    55a0:	23 d1       	rcall	.+582    	; 0x57e8 <__fp_pscA>
    55a2:	30 f0       	brcs	.+12     	; 0x55b0 <__divsf3+0x18>
    55a4:	21 f4       	brne	.+8      	; 0x55ae <__divsf3+0x16>
    55a6:	5f 3f       	cpi	r21, 0xFF	; 255
    55a8:	19 f0       	breq	.+6      	; 0x55b0 <__divsf3+0x18>
    55aa:	f0 c0       	rjmp	.+480    	; 0x578c <__fp_inf>
    55ac:	51 11       	cpse	r21, r1
    55ae:	97 c1       	rjmp	.+814    	; 0x58de <__fp_szero>
    55b0:	f3 c0       	rjmp	.+486    	; 0x5798 <__fp_nan>

000055b2 <__divsf3x>:
    55b2:	72 d1       	rcall	.+740    	; 0x5898 <__fp_split3>
    55b4:	98 f3       	brcs	.-26     	; 0x559c <__divsf3+0x4>

000055b6 <__divsf3_pse>:
    55b6:	99 23       	and	r25, r25
    55b8:	c9 f3       	breq	.-14     	; 0x55ac <__divsf3+0x14>
    55ba:	55 23       	and	r21, r21
    55bc:	b1 f3       	breq	.-20     	; 0x55aa <__divsf3+0x12>
    55be:	95 1b       	sub	r25, r21
    55c0:	55 0b       	sbc	r21, r21
    55c2:	bb 27       	eor	r27, r27
    55c4:	aa 27       	eor	r26, r26
    55c6:	62 17       	cp	r22, r18
    55c8:	73 07       	cpc	r23, r19
    55ca:	84 07       	cpc	r24, r20
    55cc:	38 f0       	brcs	.+14     	; 0x55dc <__divsf3_pse+0x26>
    55ce:	9f 5f       	subi	r25, 0xFF	; 255
    55d0:	5f 4f       	sbci	r21, 0xFF	; 255
    55d2:	22 0f       	add	r18, r18
    55d4:	33 1f       	adc	r19, r19
    55d6:	44 1f       	adc	r20, r20
    55d8:	aa 1f       	adc	r26, r26
    55da:	a9 f3       	breq	.-22     	; 0x55c6 <__divsf3_pse+0x10>
    55dc:	33 d0       	rcall	.+102    	; 0x5644 <__divsf3_pse+0x8e>
    55de:	0e 2e       	mov	r0, r30
    55e0:	3a f0       	brmi	.+14     	; 0x55f0 <__divsf3_pse+0x3a>
    55e2:	e0 e8       	ldi	r30, 0x80	; 128
    55e4:	30 d0       	rcall	.+96     	; 0x5646 <__divsf3_pse+0x90>
    55e6:	91 50       	subi	r25, 0x01	; 1
    55e8:	50 40       	sbci	r21, 0x00	; 0
    55ea:	e6 95       	lsr	r30
    55ec:	00 1c       	adc	r0, r0
    55ee:	ca f7       	brpl	.-14     	; 0x55e2 <__divsf3_pse+0x2c>
    55f0:	29 d0       	rcall	.+82     	; 0x5644 <__divsf3_pse+0x8e>
    55f2:	fe 2f       	mov	r31, r30
    55f4:	27 d0       	rcall	.+78     	; 0x5644 <__divsf3_pse+0x8e>
    55f6:	66 0f       	add	r22, r22
    55f8:	77 1f       	adc	r23, r23
    55fa:	88 1f       	adc	r24, r24
    55fc:	bb 1f       	adc	r27, r27
    55fe:	26 17       	cp	r18, r22
    5600:	37 07       	cpc	r19, r23
    5602:	48 07       	cpc	r20, r24
    5604:	ab 07       	cpc	r26, r27
    5606:	b0 e8       	ldi	r27, 0x80	; 128
    5608:	09 f0       	breq	.+2      	; 0x560c <__divsf3_pse+0x56>
    560a:	bb 0b       	sbc	r27, r27
    560c:	80 2d       	mov	r24, r0
    560e:	bf 01       	movw	r22, r30
    5610:	ff 27       	eor	r31, r31
    5612:	93 58       	subi	r25, 0x83	; 131
    5614:	5f 4f       	sbci	r21, 0xFF	; 255
    5616:	2a f0       	brmi	.+10     	; 0x5622 <__divsf3_pse+0x6c>
    5618:	9e 3f       	cpi	r25, 0xFE	; 254
    561a:	51 05       	cpc	r21, r1
    561c:	68 f0       	brcs	.+26     	; 0x5638 <__divsf3_pse+0x82>
    561e:	b6 c0       	rjmp	.+364    	; 0x578c <__fp_inf>
    5620:	5e c1       	rjmp	.+700    	; 0x58de <__fp_szero>
    5622:	5f 3f       	cpi	r21, 0xFF	; 255
    5624:	ec f3       	brlt	.-6      	; 0x5620 <__divsf3_pse+0x6a>
    5626:	98 3e       	cpi	r25, 0xE8	; 232
    5628:	dc f3       	brlt	.-10     	; 0x5620 <__divsf3_pse+0x6a>
    562a:	86 95       	lsr	r24
    562c:	77 95       	ror	r23
    562e:	67 95       	ror	r22
    5630:	b7 95       	ror	r27
    5632:	f7 95       	ror	r31
    5634:	9f 5f       	subi	r25, 0xFF	; 255
    5636:	c9 f7       	brne	.-14     	; 0x562a <__divsf3_pse+0x74>
    5638:	88 0f       	add	r24, r24
    563a:	91 1d       	adc	r25, r1
    563c:	96 95       	lsr	r25
    563e:	87 95       	ror	r24
    5640:	97 f9       	bld	r25, 7
    5642:	08 95       	ret
    5644:	e1 e0       	ldi	r30, 0x01	; 1
    5646:	66 0f       	add	r22, r22
    5648:	77 1f       	adc	r23, r23
    564a:	88 1f       	adc	r24, r24
    564c:	bb 1f       	adc	r27, r27
    564e:	62 17       	cp	r22, r18
    5650:	73 07       	cpc	r23, r19
    5652:	84 07       	cpc	r24, r20
    5654:	ba 07       	cpc	r27, r26
    5656:	20 f0       	brcs	.+8      	; 0x5660 <__divsf3_pse+0xaa>
    5658:	62 1b       	sub	r22, r18
    565a:	73 0b       	sbc	r23, r19
    565c:	84 0b       	sbc	r24, r20
    565e:	ba 0b       	sbc	r27, r26
    5660:	ee 1f       	adc	r30, r30
    5662:	88 f7       	brcc	.-30     	; 0x5646 <__divsf3_pse+0x90>
    5664:	e0 95       	com	r30
    5666:	08 95       	ret

00005668 <__fixsfsi>:
    5668:	04 d0       	rcall	.+8      	; 0x5672 <__fixunssfsi>
    566a:	68 94       	set
    566c:	b1 11       	cpse	r27, r1
    566e:	37 c1       	rjmp	.+622    	; 0x58de <__fp_szero>
    5670:	08 95       	ret

00005672 <__fixunssfsi>:
    5672:	1a d1       	rcall	.+564    	; 0x58a8 <__fp_splitA>
    5674:	88 f0       	brcs	.+34     	; 0x5698 <__fixunssfsi+0x26>
    5676:	9f 57       	subi	r25, 0x7F	; 127
    5678:	90 f0       	brcs	.+36     	; 0x569e <__fixunssfsi+0x2c>
    567a:	b9 2f       	mov	r27, r25
    567c:	99 27       	eor	r25, r25
    567e:	b7 51       	subi	r27, 0x17	; 23
    5680:	a0 f0       	brcs	.+40     	; 0x56aa <__fixunssfsi+0x38>
    5682:	d1 f0       	breq	.+52     	; 0x56b8 <__fixunssfsi+0x46>
    5684:	66 0f       	add	r22, r22
    5686:	77 1f       	adc	r23, r23
    5688:	88 1f       	adc	r24, r24
    568a:	99 1f       	adc	r25, r25
    568c:	1a f0       	brmi	.+6      	; 0x5694 <__fixunssfsi+0x22>
    568e:	ba 95       	dec	r27
    5690:	c9 f7       	brne	.-14     	; 0x5684 <__fixunssfsi+0x12>
    5692:	12 c0       	rjmp	.+36     	; 0x56b8 <__fixunssfsi+0x46>
    5694:	b1 30       	cpi	r27, 0x01	; 1
    5696:	81 f0       	breq	.+32     	; 0x56b8 <__fixunssfsi+0x46>
    5698:	21 d1       	rcall	.+578    	; 0x58dc <__fp_zero>
    569a:	b1 e0       	ldi	r27, 0x01	; 1
    569c:	08 95       	ret
    569e:	1e c1       	rjmp	.+572    	; 0x58dc <__fp_zero>
    56a0:	67 2f       	mov	r22, r23
    56a2:	78 2f       	mov	r23, r24
    56a4:	88 27       	eor	r24, r24
    56a6:	b8 5f       	subi	r27, 0xF8	; 248
    56a8:	39 f0       	breq	.+14     	; 0x56b8 <__fixunssfsi+0x46>
    56aa:	b9 3f       	cpi	r27, 0xF9	; 249
    56ac:	cc f3       	brlt	.-14     	; 0x56a0 <__fixunssfsi+0x2e>
    56ae:	86 95       	lsr	r24
    56b0:	77 95       	ror	r23
    56b2:	67 95       	ror	r22
    56b4:	b3 95       	inc	r27
    56b6:	d9 f7       	brne	.-10     	; 0x56ae <__fixunssfsi+0x3c>
    56b8:	3e f4       	brtc	.+14     	; 0x56c8 <__fixunssfsi+0x56>
    56ba:	90 95       	com	r25
    56bc:	80 95       	com	r24
    56be:	70 95       	com	r23
    56c0:	61 95       	neg	r22
    56c2:	7f 4f       	sbci	r23, 0xFF	; 255
    56c4:	8f 4f       	sbci	r24, 0xFF	; 255
    56c6:	9f 4f       	sbci	r25, 0xFF	; 255
    56c8:	08 95       	ret

000056ca <__floatunsisf>:
    56ca:	e8 94       	clt
    56cc:	09 c0       	rjmp	.+18     	; 0x56e0 <__floatsisf+0x12>

000056ce <__floatsisf>:
    56ce:	97 fb       	bst	r25, 7
    56d0:	3e f4       	brtc	.+14     	; 0x56e0 <__floatsisf+0x12>
    56d2:	90 95       	com	r25
    56d4:	80 95       	com	r24
    56d6:	70 95       	com	r23
    56d8:	61 95       	neg	r22
    56da:	7f 4f       	sbci	r23, 0xFF	; 255
    56dc:	8f 4f       	sbci	r24, 0xFF	; 255
    56de:	9f 4f       	sbci	r25, 0xFF	; 255
    56e0:	99 23       	and	r25, r25
    56e2:	a9 f0       	breq	.+42     	; 0x570e <__floatsisf+0x40>
    56e4:	f9 2f       	mov	r31, r25
    56e6:	96 e9       	ldi	r25, 0x96	; 150
    56e8:	bb 27       	eor	r27, r27
    56ea:	93 95       	inc	r25
    56ec:	f6 95       	lsr	r31
    56ee:	87 95       	ror	r24
    56f0:	77 95       	ror	r23
    56f2:	67 95       	ror	r22
    56f4:	b7 95       	ror	r27
    56f6:	f1 11       	cpse	r31, r1
    56f8:	f8 cf       	rjmp	.-16     	; 0x56ea <__floatsisf+0x1c>
    56fa:	fa f4       	brpl	.+62     	; 0x573a <__floatsisf+0x6c>
    56fc:	bb 0f       	add	r27, r27
    56fe:	11 f4       	brne	.+4      	; 0x5704 <__floatsisf+0x36>
    5700:	60 ff       	sbrs	r22, 0
    5702:	1b c0       	rjmp	.+54     	; 0x573a <__floatsisf+0x6c>
    5704:	6f 5f       	subi	r22, 0xFF	; 255
    5706:	7f 4f       	sbci	r23, 0xFF	; 255
    5708:	8f 4f       	sbci	r24, 0xFF	; 255
    570a:	9f 4f       	sbci	r25, 0xFF	; 255
    570c:	16 c0       	rjmp	.+44     	; 0x573a <__floatsisf+0x6c>
    570e:	88 23       	and	r24, r24
    5710:	11 f0       	breq	.+4      	; 0x5716 <__floatsisf+0x48>
    5712:	96 e9       	ldi	r25, 0x96	; 150
    5714:	11 c0       	rjmp	.+34     	; 0x5738 <__floatsisf+0x6a>
    5716:	77 23       	and	r23, r23
    5718:	21 f0       	breq	.+8      	; 0x5722 <__floatsisf+0x54>
    571a:	9e e8       	ldi	r25, 0x8E	; 142
    571c:	87 2f       	mov	r24, r23
    571e:	76 2f       	mov	r23, r22
    5720:	05 c0       	rjmp	.+10     	; 0x572c <__floatsisf+0x5e>
    5722:	66 23       	and	r22, r22
    5724:	71 f0       	breq	.+28     	; 0x5742 <__floatsisf+0x74>
    5726:	96 e8       	ldi	r25, 0x86	; 134
    5728:	86 2f       	mov	r24, r22
    572a:	70 e0       	ldi	r23, 0x00	; 0
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	2a f0       	brmi	.+10     	; 0x573a <__floatsisf+0x6c>
    5730:	9a 95       	dec	r25
    5732:	66 0f       	add	r22, r22
    5734:	77 1f       	adc	r23, r23
    5736:	88 1f       	adc	r24, r24
    5738:	da f7       	brpl	.-10     	; 0x5730 <__floatsisf+0x62>
    573a:	88 0f       	add	r24, r24
    573c:	96 95       	lsr	r25
    573e:	87 95       	ror	r24
    5740:	97 f9       	bld	r25, 7
    5742:	08 95       	ret

00005744 <__fp_cmp>:
    5744:	99 0f       	add	r25, r25
    5746:	00 08       	sbc	r0, r0
    5748:	55 0f       	add	r21, r21
    574a:	aa 0b       	sbc	r26, r26
    574c:	e0 e8       	ldi	r30, 0x80	; 128
    574e:	fe ef       	ldi	r31, 0xFE	; 254
    5750:	16 16       	cp	r1, r22
    5752:	17 06       	cpc	r1, r23
    5754:	e8 07       	cpc	r30, r24
    5756:	f9 07       	cpc	r31, r25
    5758:	c0 f0       	brcs	.+48     	; 0x578a <__fp_cmp+0x46>
    575a:	12 16       	cp	r1, r18
    575c:	13 06       	cpc	r1, r19
    575e:	e4 07       	cpc	r30, r20
    5760:	f5 07       	cpc	r31, r21
    5762:	98 f0       	brcs	.+38     	; 0x578a <__fp_cmp+0x46>
    5764:	62 1b       	sub	r22, r18
    5766:	73 0b       	sbc	r23, r19
    5768:	84 0b       	sbc	r24, r20
    576a:	95 0b       	sbc	r25, r21
    576c:	39 f4       	brne	.+14     	; 0x577c <__fp_cmp+0x38>
    576e:	0a 26       	eor	r0, r26
    5770:	61 f0       	breq	.+24     	; 0x578a <__fp_cmp+0x46>
    5772:	23 2b       	or	r18, r19
    5774:	24 2b       	or	r18, r20
    5776:	25 2b       	or	r18, r21
    5778:	21 f4       	brne	.+8      	; 0x5782 <__fp_cmp+0x3e>
    577a:	08 95       	ret
    577c:	0a 26       	eor	r0, r26
    577e:	09 f4       	brne	.+2      	; 0x5782 <__fp_cmp+0x3e>
    5780:	a1 40       	sbci	r26, 0x01	; 1
    5782:	a6 95       	lsr	r26
    5784:	8f ef       	ldi	r24, 0xFF	; 255
    5786:	81 1d       	adc	r24, r1
    5788:	81 1d       	adc	r24, r1
    578a:	08 95       	ret

0000578c <__fp_inf>:
    578c:	97 f9       	bld	r25, 7
    578e:	9f 67       	ori	r25, 0x7F	; 127
    5790:	80 e8       	ldi	r24, 0x80	; 128
    5792:	70 e0       	ldi	r23, 0x00	; 0
    5794:	60 e0       	ldi	r22, 0x00	; 0
    5796:	08 95       	ret

00005798 <__fp_nan>:
    5798:	9f ef       	ldi	r25, 0xFF	; 255
    579a:	80 ec       	ldi	r24, 0xC0	; 192
    579c:	08 95       	ret

0000579e <__fp_powser>:
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	1f 93       	push	r17
    57a4:	0f 93       	push	r16
    57a6:	ff 92       	push	r15
    57a8:	ef 92       	push	r14
    57aa:	df 92       	push	r13
    57ac:	7b 01       	movw	r14, r22
    57ae:	8c 01       	movw	r16, r24
    57b0:	68 94       	set
    57b2:	05 c0       	rjmp	.+10     	; 0x57be <__fp_powser+0x20>
    57b4:	da 2e       	mov	r13, r26
    57b6:	ef 01       	movw	r28, r30
    57b8:	af d0       	rcall	.+350    	; 0x5918 <__mulsf3x>
    57ba:	fe 01       	movw	r30, r28
    57bc:	e8 94       	clt
    57be:	a5 91       	lpm	r26, Z+
    57c0:	25 91       	lpm	r18, Z+
    57c2:	35 91       	lpm	r19, Z+
    57c4:	45 91       	lpm	r20, Z+
    57c6:	55 91       	lpm	r21, Z+
    57c8:	ae f3       	brts	.-22     	; 0x57b4 <__fp_powser+0x16>
    57ca:	ef 01       	movw	r28, r30
    57cc:	29 de       	rcall	.-942    	; 0x5420 <__addsf3x>
    57ce:	fe 01       	movw	r30, r28
    57d0:	97 01       	movw	r18, r14
    57d2:	a8 01       	movw	r20, r16
    57d4:	da 94       	dec	r13
    57d6:	79 f7       	brne	.-34     	; 0x57b6 <__fp_powser+0x18>
    57d8:	df 90       	pop	r13
    57da:	ef 90       	pop	r14
    57dc:	ff 90       	pop	r15
    57de:	0f 91       	pop	r16
    57e0:	1f 91       	pop	r17
    57e2:	cf 91       	pop	r28
    57e4:	df 91       	pop	r29
    57e6:	08 95       	ret

000057e8 <__fp_pscA>:
    57e8:	00 24       	eor	r0, r0
    57ea:	0a 94       	dec	r0
    57ec:	16 16       	cp	r1, r22
    57ee:	17 06       	cpc	r1, r23
    57f0:	18 06       	cpc	r1, r24
    57f2:	09 06       	cpc	r0, r25
    57f4:	08 95       	ret

000057f6 <__fp_pscB>:
    57f6:	00 24       	eor	r0, r0
    57f8:	0a 94       	dec	r0
    57fa:	12 16       	cp	r1, r18
    57fc:	13 06       	cpc	r1, r19
    57fe:	14 06       	cpc	r1, r20
    5800:	05 06       	cpc	r0, r21
    5802:	08 95       	ret
    5804:	c9 cf       	rjmp	.-110    	; 0x5798 <__fp_nan>

00005806 <__fp_rempio2>:
    5806:	50 d0       	rcall	.+160    	; 0x58a8 <__fp_splitA>
    5808:	e8 f3       	brcs	.-6      	; 0x5804 <__fp_pscB+0xe>
    580a:	e8 94       	clt
    580c:	e0 e0       	ldi	r30, 0x00	; 0
    580e:	bb 27       	eor	r27, r27
    5810:	9f 57       	subi	r25, 0x7F	; 127
    5812:	f0 f0       	brcs	.+60     	; 0x5850 <__fp_rempio2+0x4a>
    5814:	2a ed       	ldi	r18, 0xDA	; 218
    5816:	3f e0       	ldi	r19, 0x0F	; 15
    5818:	49 ec       	ldi	r20, 0xC9	; 201
    581a:	06 c0       	rjmp	.+12     	; 0x5828 <__fp_rempio2+0x22>
    581c:	ee 0f       	add	r30, r30
    581e:	bb 0f       	add	r27, r27
    5820:	66 1f       	adc	r22, r22
    5822:	77 1f       	adc	r23, r23
    5824:	88 1f       	adc	r24, r24
    5826:	28 f0       	brcs	.+10     	; 0x5832 <__fp_rempio2+0x2c>
    5828:	b2 3a       	cpi	r27, 0xA2	; 162
    582a:	62 07       	cpc	r22, r18
    582c:	73 07       	cpc	r23, r19
    582e:	84 07       	cpc	r24, r20
    5830:	28 f0       	brcs	.+10     	; 0x583c <__fp_rempio2+0x36>
    5832:	b2 5a       	subi	r27, 0xA2	; 162
    5834:	62 0b       	sbc	r22, r18
    5836:	73 0b       	sbc	r23, r19
    5838:	84 0b       	sbc	r24, r20
    583a:	e3 95       	inc	r30
    583c:	9a 95       	dec	r25
    583e:	72 f7       	brpl	.-36     	; 0x581c <__fp_rempio2+0x16>
    5840:	80 38       	cpi	r24, 0x80	; 128
    5842:	30 f4       	brcc	.+12     	; 0x5850 <__fp_rempio2+0x4a>
    5844:	9a 95       	dec	r25
    5846:	bb 0f       	add	r27, r27
    5848:	66 1f       	adc	r22, r22
    584a:	77 1f       	adc	r23, r23
    584c:	88 1f       	adc	r24, r24
    584e:	d2 f7       	brpl	.-12     	; 0x5844 <__fp_rempio2+0x3e>
    5850:	90 48       	sbci	r25, 0x80	; 128
    5852:	c4 c0       	rjmp	.+392    	; 0x59dc <__fp_mpack_finite>

00005854 <__fp_round>:
    5854:	09 2e       	mov	r0, r25
    5856:	03 94       	inc	r0
    5858:	00 0c       	add	r0, r0
    585a:	11 f4       	brne	.+4      	; 0x5860 <__fp_round+0xc>
    585c:	88 23       	and	r24, r24
    585e:	52 f0       	brmi	.+20     	; 0x5874 <__fp_round+0x20>
    5860:	bb 0f       	add	r27, r27
    5862:	40 f4       	brcc	.+16     	; 0x5874 <__fp_round+0x20>
    5864:	bf 2b       	or	r27, r31
    5866:	11 f4       	brne	.+4      	; 0x586c <__fp_round+0x18>
    5868:	60 ff       	sbrs	r22, 0
    586a:	04 c0       	rjmp	.+8      	; 0x5874 <__fp_round+0x20>
    586c:	6f 5f       	subi	r22, 0xFF	; 255
    586e:	7f 4f       	sbci	r23, 0xFF	; 255
    5870:	8f 4f       	sbci	r24, 0xFF	; 255
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	08 95       	ret

00005876 <__fp_sinus>:
    5876:	ef 93       	push	r30
    5878:	e0 ff       	sbrs	r30, 0
    587a:	06 c0       	rjmp	.+12     	; 0x5888 <__fp_sinus+0x12>
    587c:	a2 ea       	ldi	r26, 0xA2	; 162
    587e:	2a ed       	ldi	r18, 0xDA	; 218
    5880:	3f e0       	ldi	r19, 0x0F	; 15
    5882:	49 ec       	ldi	r20, 0xC9	; 201
    5884:	5f eb       	ldi	r21, 0xBF	; 191
    5886:	cc dd       	rcall	.-1128   	; 0x5420 <__addsf3x>
    5888:	e5 df       	rcall	.-54     	; 0x5854 <__fp_round>
    588a:	0f 90       	pop	r0
    588c:	03 94       	inc	r0
    588e:	01 fc       	sbrc	r0, 1
    5890:	90 58       	subi	r25, 0x80	; 128
    5892:	e9 ea       	ldi	r30, 0xA9	; 169
    5894:	f0 e0       	ldi	r31, 0x00	; 0
    5896:	ae c0       	rjmp	.+348    	; 0x59f4 <__fp_powsodd>

00005898 <__fp_split3>:
    5898:	57 fd       	sbrc	r21, 7
    589a:	90 58       	subi	r25, 0x80	; 128
    589c:	44 0f       	add	r20, r20
    589e:	55 1f       	adc	r21, r21
    58a0:	59 f0       	breq	.+22     	; 0x58b8 <__fp_splitA+0x10>
    58a2:	5f 3f       	cpi	r21, 0xFF	; 255
    58a4:	71 f0       	breq	.+28     	; 0x58c2 <__fp_splitA+0x1a>
    58a6:	47 95       	ror	r20

000058a8 <__fp_splitA>:
    58a8:	88 0f       	add	r24, r24
    58aa:	97 fb       	bst	r25, 7
    58ac:	99 1f       	adc	r25, r25
    58ae:	61 f0       	breq	.+24     	; 0x58c8 <__fp_splitA+0x20>
    58b0:	9f 3f       	cpi	r25, 0xFF	; 255
    58b2:	79 f0       	breq	.+30     	; 0x58d2 <__fp_splitA+0x2a>
    58b4:	87 95       	ror	r24
    58b6:	08 95       	ret
    58b8:	12 16       	cp	r1, r18
    58ba:	13 06       	cpc	r1, r19
    58bc:	14 06       	cpc	r1, r20
    58be:	55 1f       	adc	r21, r21
    58c0:	f2 cf       	rjmp	.-28     	; 0x58a6 <__fp_split3+0xe>
    58c2:	46 95       	lsr	r20
    58c4:	f1 df       	rcall	.-30     	; 0x58a8 <__fp_splitA>
    58c6:	08 c0       	rjmp	.+16     	; 0x58d8 <__fp_splitA+0x30>
    58c8:	16 16       	cp	r1, r22
    58ca:	17 06       	cpc	r1, r23
    58cc:	18 06       	cpc	r1, r24
    58ce:	99 1f       	adc	r25, r25
    58d0:	f1 cf       	rjmp	.-30     	; 0x58b4 <__fp_splitA+0xc>
    58d2:	86 95       	lsr	r24
    58d4:	71 05       	cpc	r23, r1
    58d6:	61 05       	cpc	r22, r1
    58d8:	08 94       	sec
    58da:	08 95       	ret

000058dc <__fp_zero>:
    58dc:	e8 94       	clt

000058de <__fp_szero>:
    58de:	bb 27       	eor	r27, r27
    58e0:	66 27       	eor	r22, r22
    58e2:	77 27       	eor	r23, r23
    58e4:	cb 01       	movw	r24, r22
    58e6:	97 f9       	bld	r25, 7
    58e8:	08 95       	ret

000058ea <__gesf2>:
    58ea:	2c df       	rcall	.-424    	; 0x5744 <__fp_cmp>
    58ec:	08 f4       	brcc	.+2      	; 0x58f0 <__gesf2+0x6>
    58ee:	8f ef       	ldi	r24, 0xFF	; 255
    58f0:	08 95       	ret

000058f2 <inverse>:
    58f2:	9b 01       	movw	r18, r22
    58f4:	ac 01       	movw	r20, r24
    58f6:	60 e0       	ldi	r22, 0x00	; 0
    58f8:	70 e0       	ldi	r23, 0x00	; 0
    58fa:	80 e8       	ldi	r24, 0x80	; 128
    58fc:	9f e3       	ldi	r25, 0x3F	; 63
    58fe:	4c ce       	rjmp	.-872    	; 0x5598 <__divsf3>

00005900 <__mulsf3>:
    5900:	0b d0       	rcall	.+22     	; 0x5918 <__mulsf3x>
    5902:	a8 cf       	rjmp	.-176    	; 0x5854 <__fp_round>
    5904:	71 df       	rcall	.-286    	; 0x57e8 <__fp_pscA>
    5906:	28 f0       	brcs	.+10     	; 0x5912 <__mulsf3+0x12>
    5908:	76 df       	rcall	.-276    	; 0x57f6 <__fp_pscB>
    590a:	18 f0       	brcs	.+6      	; 0x5912 <__mulsf3+0x12>
    590c:	95 23       	and	r25, r21
    590e:	09 f0       	breq	.+2      	; 0x5912 <__mulsf3+0x12>
    5910:	3d cf       	rjmp	.-390    	; 0x578c <__fp_inf>
    5912:	42 cf       	rjmp	.-380    	; 0x5798 <__fp_nan>
    5914:	11 24       	eor	r1, r1
    5916:	e3 cf       	rjmp	.-58     	; 0x58de <__fp_szero>

00005918 <__mulsf3x>:
    5918:	bf df       	rcall	.-130    	; 0x5898 <__fp_split3>
    591a:	a0 f3       	brcs	.-24     	; 0x5904 <__mulsf3+0x4>

0000591c <__mulsf3_pse>:
    591c:	95 9f       	mul	r25, r21
    591e:	d1 f3       	breq	.-12     	; 0x5914 <__mulsf3+0x14>
    5920:	95 0f       	add	r25, r21
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	55 1f       	adc	r21, r21
    5926:	62 9f       	mul	r22, r18
    5928:	f0 01       	movw	r30, r0
    592a:	72 9f       	mul	r23, r18
    592c:	bb 27       	eor	r27, r27
    592e:	f0 0d       	add	r31, r0
    5930:	b1 1d       	adc	r27, r1
    5932:	63 9f       	mul	r22, r19
    5934:	aa 27       	eor	r26, r26
    5936:	f0 0d       	add	r31, r0
    5938:	b1 1d       	adc	r27, r1
    593a:	aa 1f       	adc	r26, r26
    593c:	64 9f       	mul	r22, r20
    593e:	66 27       	eor	r22, r22
    5940:	b0 0d       	add	r27, r0
    5942:	a1 1d       	adc	r26, r1
    5944:	66 1f       	adc	r22, r22
    5946:	82 9f       	mul	r24, r18
    5948:	22 27       	eor	r18, r18
    594a:	b0 0d       	add	r27, r0
    594c:	a1 1d       	adc	r26, r1
    594e:	62 1f       	adc	r22, r18
    5950:	73 9f       	mul	r23, r19
    5952:	b0 0d       	add	r27, r0
    5954:	a1 1d       	adc	r26, r1
    5956:	62 1f       	adc	r22, r18
    5958:	83 9f       	mul	r24, r19
    595a:	a0 0d       	add	r26, r0
    595c:	61 1d       	adc	r22, r1
    595e:	22 1f       	adc	r18, r18
    5960:	74 9f       	mul	r23, r20
    5962:	33 27       	eor	r19, r19
    5964:	a0 0d       	add	r26, r0
    5966:	61 1d       	adc	r22, r1
    5968:	23 1f       	adc	r18, r19
    596a:	84 9f       	mul	r24, r20
    596c:	60 0d       	add	r22, r0
    596e:	21 1d       	adc	r18, r1
    5970:	82 2f       	mov	r24, r18
    5972:	76 2f       	mov	r23, r22
    5974:	6a 2f       	mov	r22, r26
    5976:	11 24       	eor	r1, r1
    5978:	9f 57       	subi	r25, 0x7F	; 127
    597a:	50 40       	sbci	r21, 0x00	; 0
    597c:	8a f0       	brmi	.+34     	; 0x59a0 <__mulsf3_pse+0x84>
    597e:	e1 f0       	breq	.+56     	; 0x59b8 <__mulsf3_pse+0x9c>
    5980:	88 23       	and	r24, r24
    5982:	4a f0       	brmi	.+18     	; 0x5996 <__mulsf3_pse+0x7a>
    5984:	ee 0f       	add	r30, r30
    5986:	ff 1f       	adc	r31, r31
    5988:	bb 1f       	adc	r27, r27
    598a:	66 1f       	adc	r22, r22
    598c:	77 1f       	adc	r23, r23
    598e:	88 1f       	adc	r24, r24
    5990:	91 50       	subi	r25, 0x01	; 1
    5992:	50 40       	sbci	r21, 0x00	; 0
    5994:	a9 f7       	brne	.-22     	; 0x5980 <__mulsf3_pse+0x64>
    5996:	9e 3f       	cpi	r25, 0xFE	; 254
    5998:	51 05       	cpc	r21, r1
    599a:	70 f0       	brcs	.+28     	; 0x59b8 <__mulsf3_pse+0x9c>
    599c:	f7 ce       	rjmp	.-530    	; 0x578c <__fp_inf>
    599e:	9f cf       	rjmp	.-194    	; 0x58de <__fp_szero>
    59a0:	5f 3f       	cpi	r21, 0xFF	; 255
    59a2:	ec f3       	brlt	.-6      	; 0x599e <__mulsf3_pse+0x82>
    59a4:	98 3e       	cpi	r25, 0xE8	; 232
    59a6:	dc f3       	brlt	.-10     	; 0x599e <__mulsf3_pse+0x82>
    59a8:	86 95       	lsr	r24
    59aa:	77 95       	ror	r23
    59ac:	67 95       	ror	r22
    59ae:	b7 95       	ror	r27
    59b0:	f7 95       	ror	r31
    59b2:	e7 95       	ror	r30
    59b4:	9f 5f       	subi	r25, 0xFF	; 255
    59b6:	c1 f7       	brne	.-16     	; 0x59a8 <__mulsf3_pse+0x8c>
    59b8:	fe 2b       	or	r31, r30
    59ba:	88 0f       	add	r24, r24
    59bc:	91 1d       	adc	r25, r1
    59be:	96 95       	lsr	r25
    59c0:	87 95       	ror	r24
    59c2:	97 f9       	bld	r25, 7
    59c4:	08 95       	ret

000059c6 <sin>:
    59c6:	9f 93       	push	r25
    59c8:	1e df       	rcall	.-452    	; 0x5806 <__fp_rempio2>
    59ca:	0f 90       	pop	r0
    59cc:	07 fc       	sbrc	r0, 7
    59ce:	ee 5f       	subi	r30, 0xFE	; 254
    59d0:	52 cf       	rjmp	.-348    	; 0x5876 <__fp_sinus>

000059d2 <square>:
    59d2:	9b 01       	movw	r18, r22
    59d4:	ac 01       	movw	r20, r24
    59d6:	94 cf       	rjmp	.-216    	; 0x5900 <__mulsf3>

000059d8 <__fp_mpack>:
    59d8:	9f 3f       	cpi	r25, 0xFF	; 255
    59da:	31 f0       	breq	.+12     	; 0x59e8 <__fp_mpack_finite+0xc>

000059dc <__fp_mpack_finite>:
    59dc:	91 50       	subi	r25, 0x01	; 1
    59de:	20 f4       	brcc	.+8      	; 0x59e8 <__fp_mpack_finite+0xc>
    59e0:	87 95       	ror	r24
    59e2:	77 95       	ror	r23
    59e4:	67 95       	ror	r22
    59e6:	b7 95       	ror	r27
    59e8:	88 0f       	add	r24, r24
    59ea:	91 1d       	adc	r25, r1
    59ec:	96 95       	lsr	r25
    59ee:	87 95       	ror	r24
    59f0:	97 f9       	bld	r25, 7
    59f2:	08 95       	ret

000059f4 <__fp_powsodd>:
    59f4:	9f 93       	push	r25
    59f6:	8f 93       	push	r24
    59f8:	7f 93       	push	r23
    59fa:	6f 93       	push	r22
    59fc:	ff 93       	push	r31
    59fe:	ef 93       	push	r30
    5a00:	9b 01       	movw	r18, r22
    5a02:	ac 01       	movw	r20, r24
    5a04:	7d df       	rcall	.-262    	; 0x5900 <__mulsf3>
    5a06:	ef 91       	pop	r30
    5a08:	ff 91       	pop	r31
    5a0a:	c9 de       	rcall	.-622    	; 0x579e <__fp_powser>
    5a0c:	2f 91       	pop	r18
    5a0e:	3f 91       	pop	r19
    5a10:	4f 91       	pop	r20
    5a12:	5f 91       	pop	r21
    5a14:	75 cf       	rjmp	.-278    	; 0x5900 <__mulsf3>

00005a16 <vfprintf>:
    5a16:	a3 e1       	ldi	r26, 0x13	; 19
    5a18:	b0 e0       	ldi	r27, 0x00	; 0
    5a1a:	e1 e1       	ldi	r30, 0x11	; 17
    5a1c:	fd e2       	ldi	r31, 0x2D	; 45
    5a1e:	0c 94 3c 32 	jmp	0x6478	; 0x6478 <__prologue_saves__>
    5a22:	7c 01       	movw	r14, r24
    5a24:	1b 01       	movw	r2, r22
    5a26:	6a 01       	movw	r12, r20
    5a28:	fc 01       	movw	r30, r24
    5a2a:	17 82       	std	Z+7, r1	; 0x07
    5a2c:	16 82       	std	Z+6, r1	; 0x06
    5a2e:	83 81       	ldd	r24, Z+3	; 0x03
    5a30:	81 ff       	sbrs	r24, 1
    5a32:	66 c3       	rjmp	.+1740   	; 0x6100 <vfprintf+0x6ea>
    5a34:	be 01       	movw	r22, r28
    5a36:	6f 5f       	subi	r22, 0xFF	; 255
    5a38:	7f 4f       	sbci	r23, 0xFF	; 255
    5a3a:	4b 01       	movw	r8, r22
    5a3c:	f7 01       	movw	r30, r14
    5a3e:	93 81       	ldd	r25, Z+3	; 0x03
    5a40:	f1 01       	movw	r30, r2
    5a42:	93 fd       	sbrc	r25, 3
    5a44:	85 91       	lpm	r24, Z+
    5a46:	93 ff       	sbrs	r25, 3
    5a48:	81 91       	ld	r24, Z+
    5a4a:	1f 01       	movw	r2, r30
    5a4c:	88 23       	and	r24, r24
    5a4e:	09 f4       	brne	.+2      	; 0x5a52 <vfprintf+0x3c>
    5a50:	53 c3       	rjmp	.+1702   	; 0x60f8 <vfprintf+0x6e2>
    5a52:	85 32       	cpi	r24, 0x25	; 37
    5a54:	39 f4       	brne	.+14     	; 0x5a64 <vfprintf+0x4e>
    5a56:	93 fd       	sbrc	r25, 3
    5a58:	85 91       	lpm	r24, Z+
    5a5a:	93 ff       	sbrs	r25, 3
    5a5c:	81 91       	ld	r24, Z+
    5a5e:	1f 01       	movw	r2, r30
    5a60:	85 32       	cpi	r24, 0x25	; 37
    5a62:	39 f4       	brne	.+14     	; 0x5a72 <vfprintf+0x5c>
    5a64:	b7 01       	movw	r22, r14
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5a6c:	56 01       	movw	r10, r12
    5a6e:	65 01       	movw	r12, r10
    5a70:	e5 cf       	rjmp	.-54     	; 0x5a3c <vfprintf+0x26>
    5a72:	10 e0       	ldi	r17, 0x00	; 0
    5a74:	51 2c       	mov	r5, r1
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	20 32       	cpi	r18, 0x20	; 32
    5a7a:	a0 f4       	brcc	.+40     	; 0x5aa4 <vfprintf+0x8e>
    5a7c:	8b 32       	cpi	r24, 0x2B	; 43
    5a7e:	69 f0       	breq	.+26     	; 0x5a9a <vfprintf+0x84>
    5a80:	30 f4       	brcc	.+12     	; 0x5a8e <vfprintf+0x78>
    5a82:	80 32       	cpi	r24, 0x20	; 32
    5a84:	59 f0       	breq	.+22     	; 0x5a9c <vfprintf+0x86>
    5a86:	83 32       	cpi	r24, 0x23	; 35
    5a88:	69 f4       	brne	.+26     	; 0x5aa4 <vfprintf+0x8e>
    5a8a:	20 61       	ori	r18, 0x10	; 16
    5a8c:	2c c0       	rjmp	.+88     	; 0x5ae6 <vfprintf+0xd0>
    5a8e:	8d 32       	cpi	r24, 0x2D	; 45
    5a90:	39 f0       	breq	.+14     	; 0x5aa0 <vfprintf+0x8a>
    5a92:	80 33       	cpi	r24, 0x30	; 48
    5a94:	39 f4       	brne	.+14     	; 0x5aa4 <vfprintf+0x8e>
    5a96:	21 60       	ori	r18, 0x01	; 1
    5a98:	26 c0       	rjmp	.+76     	; 0x5ae6 <vfprintf+0xd0>
    5a9a:	22 60       	ori	r18, 0x02	; 2
    5a9c:	24 60       	ori	r18, 0x04	; 4
    5a9e:	23 c0       	rjmp	.+70     	; 0x5ae6 <vfprintf+0xd0>
    5aa0:	28 60       	ori	r18, 0x08	; 8
    5aa2:	21 c0       	rjmp	.+66     	; 0x5ae6 <vfprintf+0xd0>
    5aa4:	27 fd       	sbrc	r18, 7
    5aa6:	27 c0       	rjmp	.+78     	; 0x5af6 <vfprintf+0xe0>
    5aa8:	30 ed       	ldi	r19, 0xD0	; 208
    5aaa:	38 0f       	add	r19, r24
    5aac:	3a 30       	cpi	r19, 0x0A	; 10
    5aae:	78 f4       	brcc	.+30     	; 0x5ace <vfprintf+0xb8>
    5ab0:	26 ff       	sbrs	r18, 6
    5ab2:	06 c0       	rjmp	.+12     	; 0x5ac0 <vfprintf+0xaa>
    5ab4:	fa e0       	ldi	r31, 0x0A	; 10
    5ab6:	1f 9f       	mul	r17, r31
    5ab8:	30 0d       	add	r19, r0
    5aba:	11 24       	eor	r1, r1
    5abc:	13 2f       	mov	r17, r19
    5abe:	13 c0       	rjmp	.+38     	; 0x5ae6 <vfprintf+0xd0>
    5ac0:	6a e0       	ldi	r22, 0x0A	; 10
    5ac2:	56 9e       	mul	r5, r22
    5ac4:	30 0d       	add	r19, r0
    5ac6:	11 24       	eor	r1, r1
    5ac8:	53 2e       	mov	r5, r19
    5aca:	20 62       	ori	r18, 0x20	; 32
    5acc:	0c c0       	rjmp	.+24     	; 0x5ae6 <vfprintf+0xd0>
    5ace:	8e 32       	cpi	r24, 0x2E	; 46
    5ad0:	21 f4       	brne	.+8      	; 0x5ada <vfprintf+0xc4>
    5ad2:	26 fd       	sbrc	r18, 6
    5ad4:	11 c3       	rjmp	.+1570   	; 0x60f8 <vfprintf+0x6e2>
    5ad6:	20 64       	ori	r18, 0x40	; 64
    5ad8:	06 c0       	rjmp	.+12     	; 0x5ae6 <vfprintf+0xd0>
    5ada:	8c 36       	cpi	r24, 0x6C	; 108
    5adc:	11 f4       	brne	.+4      	; 0x5ae2 <vfprintf+0xcc>
    5ade:	20 68       	ori	r18, 0x80	; 128
    5ae0:	02 c0       	rjmp	.+4      	; 0x5ae6 <vfprintf+0xd0>
    5ae2:	88 36       	cpi	r24, 0x68	; 104
    5ae4:	41 f4       	brne	.+16     	; 0x5af6 <vfprintf+0xe0>
    5ae6:	f1 01       	movw	r30, r2
    5ae8:	93 fd       	sbrc	r25, 3
    5aea:	85 91       	lpm	r24, Z+
    5aec:	93 ff       	sbrs	r25, 3
    5aee:	81 91       	ld	r24, Z+
    5af0:	1f 01       	movw	r2, r30
    5af2:	81 11       	cpse	r24, r1
    5af4:	c1 cf       	rjmp	.-126    	; 0x5a78 <vfprintf+0x62>
    5af6:	9b eb       	ldi	r25, 0xBB	; 187
    5af8:	98 0f       	add	r25, r24
    5afa:	93 30       	cpi	r25, 0x03	; 3
    5afc:	18 f4       	brcc	.+6      	; 0x5b04 <vfprintf+0xee>
    5afe:	20 61       	ori	r18, 0x10	; 16
    5b00:	80 5e       	subi	r24, 0xE0	; 224
    5b02:	06 c0       	rjmp	.+12     	; 0x5b10 <vfprintf+0xfa>
    5b04:	9b e9       	ldi	r25, 0x9B	; 155
    5b06:	98 0f       	add	r25, r24
    5b08:	93 30       	cpi	r25, 0x03	; 3
    5b0a:	08 f0       	brcs	.+2      	; 0x5b0e <vfprintf+0xf8>
    5b0c:	aa c1       	rjmp	.+852    	; 0x5e62 <vfprintf+0x44c>
    5b0e:	2f 7e       	andi	r18, 0xEF	; 239
    5b10:	26 ff       	sbrs	r18, 6
    5b12:	16 e0       	ldi	r17, 0x06	; 6
    5b14:	2f 73       	andi	r18, 0x3F	; 63
    5b16:	72 2e       	mov	r7, r18
    5b18:	85 36       	cpi	r24, 0x65	; 101
    5b1a:	21 f4       	brne	.+8      	; 0x5b24 <vfprintf+0x10e>
    5b1c:	f2 2f       	mov	r31, r18
    5b1e:	f0 64       	ori	r31, 0x40	; 64
    5b20:	7f 2e       	mov	r7, r31
    5b22:	08 c0       	rjmp	.+16     	; 0x5b34 <vfprintf+0x11e>
    5b24:	86 36       	cpi	r24, 0x66	; 102
    5b26:	21 f4       	brne	.+8      	; 0x5b30 <vfprintf+0x11a>
    5b28:	62 2f       	mov	r22, r18
    5b2a:	60 68       	ori	r22, 0x80	; 128
    5b2c:	76 2e       	mov	r7, r22
    5b2e:	02 c0       	rjmp	.+4      	; 0x5b34 <vfprintf+0x11e>
    5b30:	11 11       	cpse	r17, r1
    5b32:	11 50       	subi	r17, 0x01	; 1
    5b34:	77 fe       	sbrs	r7, 7
    5b36:	07 c0       	rjmp	.+14     	; 0x5b46 <vfprintf+0x130>
    5b38:	1c 33       	cpi	r17, 0x3C	; 60
    5b3a:	48 f4       	brcc	.+18     	; 0x5b4e <vfprintf+0x138>
    5b3c:	44 24       	eor	r4, r4
    5b3e:	43 94       	inc	r4
    5b40:	41 0e       	add	r4, r17
    5b42:	27 e0       	ldi	r18, 0x07	; 7
    5b44:	0b c0       	rjmp	.+22     	; 0x5b5c <vfprintf+0x146>
    5b46:	18 30       	cpi	r17, 0x08	; 8
    5b48:	30 f4       	brcc	.+12     	; 0x5b56 <vfprintf+0x140>
    5b4a:	21 2f       	mov	r18, r17
    5b4c:	06 c0       	rjmp	.+12     	; 0x5b5a <vfprintf+0x144>
    5b4e:	27 e0       	ldi	r18, 0x07	; 7
    5b50:	4c e3       	ldi	r20, 0x3C	; 60
    5b52:	44 2e       	mov	r4, r20
    5b54:	03 c0       	rjmp	.+6      	; 0x5b5c <vfprintf+0x146>
    5b56:	27 e0       	ldi	r18, 0x07	; 7
    5b58:	17 e0       	ldi	r17, 0x07	; 7
    5b5a:	41 2c       	mov	r4, r1
    5b5c:	56 01       	movw	r10, r12
    5b5e:	74 e0       	ldi	r23, 0x04	; 4
    5b60:	a7 0e       	add	r10, r23
    5b62:	b1 1c       	adc	r11, r1
    5b64:	f6 01       	movw	r30, r12
    5b66:	60 81       	ld	r22, Z
    5b68:	71 81       	ldd	r23, Z+1	; 0x01
    5b6a:	82 81       	ldd	r24, Z+2	; 0x02
    5b6c:	93 81       	ldd	r25, Z+3	; 0x03
    5b6e:	04 2d       	mov	r16, r4
    5b70:	a4 01       	movw	r20, r8
    5b72:	0e 94 1b 34 	call	0x6836	; 0x6836 <__ftoa_engine>
    5b76:	6c 01       	movw	r12, r24
    5b78:	09 81       	ldd	r16, Y+1	; 0x01
    5b7a:	00 ff       	sbrs	r16, 0
    5b7c:	02 c0       	rjmp	.+4      	; 0x5b82 <vfprintf+0x16c>
    5b7e:	03 ff       	sbrs	r16, 3
    5b80:	06 c0       	rjmp	.+12     	; 0x5b8e <vfprintf+0x178>
    5b82:	71 fc       	sbrc	r7, 1
    5b84:	07 c0       	rjmp	.+14     	; 0x5b94 <vfprintf+0x17e>
    5b86:	72 fc       	sbrc	r7, 2
    5b88:	08 c0       	rjmp	.+16     	; 0x5b9a <vfprintf+0x184>
    5b8a:	61 2c       	mov	r6, r1
    5b8c:	08 c0       	rjmp	.+16     	; 0x5b9e <vfprintf+0x188>
    5b8e:	3d e2       	ldi	r19, 0x2D	; 45
    5b90:	63 2e       	mov	r6, r19
    5b92:	05 c0       	rjmp	.+10     	; 0x5b9e <vfprintf+0x188>
    5b94:	2b e2       	ldi	r18, 0x2B	; 43
    5b96:	62 2e       	mov	r6, r18
    5b98:	02 c0       	rjmp	.+4      	; 0x5b9e <vfprintf+0x188>
    5b9a:	90 e2       	ldi	r25, 0x20	; 32
    5b9c:	69 2e       	mov	r6, r25
    5b9e:	80 2f       	mov	r24, r16
    5ba0:	8c 70       	andi	r24, 0x0C	; 12
    5ba2:	99 f1       	breq	.+102    	; 0x5c0a <vfprintf+0x1f4>
    5ba4:	66 20       	and	r6, r6
    5ba6:	11 f0       	breq	.+4      	; 0x5bac <vfprintf+0x196>
    5ba8:	84 e0       	ldi	r24, 0x04	; 4
    5baa:	01 c0       	rjmp	.+2      	; 0x5bae <vfprintf+0x198>
    5bac:	83 e0       	ldi	r24, 0x03	; 3
    5bae:	85 15       	cp	r24, r5
    5bb0:	10 f0       	brcs	.+4      	; 0x5bb6 <vfprintf+0x1a0>
    5bb2:	51 2c       	mov	r5, r1
    5bb4:	0b c0       	rjmp	.+22     	; 0x5bcc <vfprintf+0x1b6>
    5bb6:	58 1a       	sub	r5, r24
    5bb8:	73 fc       	sbrc	r7, 3
    5bba:	08 c0       	rjmp	.+16     	; 0x5bcc <vfprintf+0x1b6>
    5bbc:	b7 01       	movw	r22, r14
    5bbe:	80 e2       	ldi	r24, 0x20	; 32
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5bc6:	5a 94       	dec	r5
    5bc8:	c9 f7       	brne	.-14     	; 0x5bbc <vfprintf+0x1a6>
    5bca:	f3 cf       	rjmp	.-26     	; 0x5bb2 <vfprintf+0x19c>
    5bcc:	66 20       	and	r6, r6
    5bce:	29 f0       	breq	.+10     	; 0x5bda <vfprintf+0x1c4>
    5bd0:	b7 01       	movw	r22, r14
    5bd2:	86 2d       	mov	r24, r6
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5bda:	03 fd       	sbrc	r16, 3
    5bdc:	03 c0       	rjmp	.+6      	; 0x5be4 <vfprintf+0x1ce>
    5bde:	0f ea       	ldi	r16, 0xAF	; 175
    5be0:	15 e0       	ldi	r17, 0x05	; 5
    5be2:	02 c0       	rjmp	.+4      	; 0x5be8 <vfprintf+0x1d2>
    5be4:	0b ea       	ldi	r16, 0xAB	; 171
    5be6:	15 e0       	ldi	r17, 0x05	; 5
    5be8:	f7 2d       	mov	r31, r7
    5bea:	f0 71       	andi	r31, 0x10	; 16
    5bec:	7f 2e       	mov	r7, r31
    5bee:	f8 01       	movw	r30, r16
    5bf0:	84 91       	lpm	r24, Z
    5bf2:	88 23       	and	r24, r24
    5bf4:	09 f4       	brne	.+2      	; 0x5bf8 <vfprintf+0x1e2>
    5bf6:	76 c2       	rjmp	.+1260   	; 0x60e4 <vfprintf+0x6ce>
    5bf8:	71 10       	cpse	r7, r1
    5bfa:	80 52       	subi	r24, 0x20	; 32
    5bfc:	b7 01       	movw	r22, r14
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5c04:	0f 5f       	subi	r16, 0xFF	; 255
    5c06:	1f 4f       	sbci	r17, 0xFF	; 255
    5c08:	f2 cf       	rjmp	.-28     	; 0x5bee <vfprintf+0x1d8>
    5c0a:	77 fe       	sbrs	r7, 7
    5c0c:	0f c0       	rjmp	.+30     	; 0x5c2c <vfprintf+0x216>
    5c0e:	4c 0c       	add	r4, r12
    5c10:	04 ff       	sbrs	r16, 4
    5c12:	04 c0       	rjmp	.+8      	; 0x5c1c <vfprintf+0x206>
    5c14:	8a 81       	ldd	r24, Y+2	; 0x02
    5c16:	81 33       	cpi	r24, 0x31	; 49
    5c18:	09 f4       	brne	.+2      	; 0x5c1c <vfprintf+0x206>
    5c1a:	4a 94       	dec	r4
    5c1c:	14 14       	cp	r1, r4
    5c1e:	74 f5       	brge	.+92     	; 0x5c7c <vfprintf+0x266>
    5c20:	f8 e0       	ldi	r31, 0x08	; 8
    5c22:	f4 15       	cp	r31, r4
    5c24:	78 f5       	brcc	.+94     	; 0x5c84 <vfprintf+0x26e>
    5c26:	88 e0       	ldi	r24, 0x08	; 8
    5c28:	48 2e       	mov	r4, r24
    5c2a:	2c c0       	rjmp	.+88     	; 0x5c84 <vfprintf+0x26e>
    5c2c:	76 fc       	sbrc	r7, 6
    5c2e:	2a c0       	rjmp	.+84     	; 0x5c84 <vfprintf+0x26e>
    5c30:	81 2f       	mov	r24, r17
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	8c 15       	cp	r24, r12
    5c36:	9d 05       	cpc	r25, r13
    5c38:	9c f0       	brlt	.+38     	; 0x5c60 <vfprintf+0x24a>
    5c3a:	6c ef       	ldi	r22, 0xFC	; 252
    5c3c:	c6 16       	cp	r12, r22
    5c3e:	6f ef       	ldi	r22, 0xFF	; 255
    5c40:	d6 06       	cpc	r13, r22
    5c42:	74 f0       	brlt	.+28     	; 0x5c60 <vfprintf+0x24a>
    5c44:	77 2d       	mov	r23, r7
    5c46:	70 68       	ori	r23, 0x80	; 128
    5c48:	77 2e       	mov	r7, r23
    5c4a:	0a c0       	rjmp	.+20     	; 0x5c60 <vfprintf+0x24a>
    5c4c:	e2 e0       	ldi	r30, 0x02	; 2
    5c4e:	f0 e0       	ldi	r31, 0x00	; 0
    5c50:	ec 0f       	add	r30, r28
    5c52:	fd 1f       	adc	r31, r29
    5c54:	e1 0f       	add	r30, r17
    5c56:	f1 1d       	adc	r31, r1
    5c58:	80 81       	ld	r24, Z
    5c5a:	80 33       	cpi	r24, 0x30	; 48
    5c5c:	19 f4       	brne	.+6      	; 0x5c64 <vfprintf+0x24e>
    5c5e:	11 50       	subi	r17, 0x01	; 1
    5c60:	11 11       	cpse	r17, r1
    5c62:	f4 cf       	rjmp	.-24     	; 0x5c4c <vfprintf+0x236>
    5c64:	77 fe       	sbrs	r7, 7
    5c66:	0e c0       	rjmp	.+28     	; 0x5c84 <vfprintf+0x26e>
    5c68:	44 24       	eor	r4, r4
    5c6a:	43 94       	inc	r4
    5c6c:	41 0e       	add	r4, r17
    5c6e:	81 2f       	mov	r24, r17
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	c8 16       	cp	r12, r24
    5c74:	d9 06       	cpc	r13, r25
    5c76:	2c f4       	brge	.+10     	; 0x5c82 <vfprintf+0x26c>
    5c78:	1c 19       	sub	r17, r12
    5c7a:	04 c0       	rjmp	.+8      	; 0x5c84 <vfprintf+0x26e>
    5c7c:	44 24       	eor	r4, r4
    5c7e:	43 94       	inc	r4
    5c80:	01 c0       	rjmp	.+2      	; 0x5c84 <vfprintf+0x26e>
    5c82:	10 e0       	ldi	r17, 0x00	; 0
    5c84:	77 fe       	sbrs	r7, 7
    5c86:	07 c0       	rjmp	.+14     	; 0x5c96 <vfprintf+0x280>
    5c88:	1c 14       	cp	r1, r12
    5c8a:	1d 04       	cpc	r1, r13
    5c8c:	3c f4       	brge	.+14     	; 0x5c9c <vfprintf+0x286>
    5c8e:	96 01       	movw	r18, r12
    5c90:	2f 5f       	subi	r18, 0xFF	; 255
    5c92:	3f 4f       	sbci	r19, 0xFF	; 255
    5c94:	05 c0       	rjmp	.+10     	; 0x5ca0 <vfprintf+0x28a>
    5c96:	25 e0       	ldi	r18, 0x05	; 5
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	02 c0       	rjmp	.+4      	; 0x5ca0 <vfprintf+0x28a>
    5c9c:	21 e0       	ldi	r18, 0x01	; 1
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	66 20       	and	r6, r6
    5ca2:	11 f0       	breq	.+4      	; 0x5ca8 <vfprintf+0x292>
    5ca4:	2f 5f       	subi	r18, 0xFF	; 255
    5ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca8:	11 23       	and	r17, r17
    5caa:	31 f0       	breq	.+12     	; 0x5cb8 <vfprintf+0x2a2>
    5cac:	41 2f       	mov	r20, r17
    5cae:	50 e0       	ldi	r21, 0x00	; 0
    5cb0:	4f 5f       	subi	r20, 0xFF	; 255
    5cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb4:	24 0f       	add	r18, r20
    5cb6:	35 1f       	adc	r19, r21
    5cb8:	45 2d       	mov	r20, r5
    5cba:	50 e0       	ldi	r21, 0x00	; 0
    5cbc:	24 17       	cp	r18, r20
    5cbe:	35 07       	cpc	r19, r21
    5cc0:	14 f4       	brge	.+4      	; 0x5cc6 <vfprintf+0x2b0>
    5cc2:	52 1a       	sub	r5, r18
    5cc4:	01 c0       	rjmp	.+2      	; 0x5cc8 <vfprintf+0x2b2>
    5cc6:	51 2c       	mov	r5, r1
    5cc8:	87 2d       	mov	r24, r7
    5cca:	89 70       	andi	r24, 0x09	; 9
    5ccc:	49 f4       	brne	.+18     	; 0x5ce0 <vfprintf+0x2ca>
    5cce:	55 20       	and	r5, r5
    5cd0:	39 f0       	breq	.+14     	; 0x5ce0 <vfprintf+0x2ca>
    5cd2:	b7 01       	movw	r22, r14
    5cd4:	80 e2       	ldi	r24, 0x20	; 32
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5cdc:	5a 94       	dec	r5
    5cde:	f7 cf       	rjmp	.-18     	; 0x5cce <vfprintf+0x2b8>
    5ce0:	66 20       	and	r6, r6
    5ce2:	29 f0       	breq	.+10     	; 0x5cee <vfprintf+0x2d8>
    5ce4:	b7 01       	movw	r22, r14
    5ce6:	86 2d       	mov	r24, r6
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5cee:	73 fc       	sbrc	r7, 3
    5cf0:	09 c0       	rjmp	.+18     	; 0x5d04 <vfprintf+0x2ee>
    5cf2:	55 20       	and	r5, r5
    5cf4:	39 f0       	breq	.+14     	; 0x5d04 <vfprintf+0x2ee>
    5cf6:	b7 01       	movw	r22, r14
    5cf8:	80 e3       	ldi	r24, 0x30	; 48
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5d00:	5a 94       	dec	r5
    5d02:	f7 cf       	rjmp	.-18     	; 0x5cf2 <vfprintf+0x2dc>
    5d04:	77 fe       	sbrs	r7, 7
    5d06:	5f c0       	rjmp	.+190    	; 0x5dc6 <vfprintf+0x3b0>
    5d08:	9c 2d       	mov	r25, r12
    5d0a:	8d 2d       	mov	r24, r13
    5d0c:	d7 fe       	sbrs	r13, 7
    5d0e:	02 c0       	rjmp	.+4      	; 0x5d14 <vfprintf+0x2fe>
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	69 2e       	mov	r6, r25
    5d16:	78 2e       	mov	r7, r24
    5d18:	40 e0       	ldi	r20, 0x00	; 0
    5d1a:	50 e0       	ldi	r21, 0x00	; 0
    5d1c:	c6 01       	movw	r24, r12
    5d1e:	84 19       	sub	r24, r4
    5d20:	91 09       	sbc	r25, r1
    5d22:	9d 87       	std	Y+13, r25	; 0x0d
    5d24:	8c 87       	std	Y+12, r24	; 0x0c
    5d26:	96 01       	movw	r18, r12
    5d28:	26 19       	sub	r18, r6
    5d2a:	37 09       	sbc	r19, r7
    5d2c:	28 0d       	add	r18, r8
    5d2e:	39 1d       	adc	r19, r9
    5d30:	81 2f       	mov	r24, r17
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	ee 27       	eor	r30, r30
    5d36:	ff 27       	eor	r31, r31
    5d38:	e8 1b       	sub	r30, r24
    5d3a:	f9 0b       	sbc	r31, r25
    5d3c:	ff 87       	std	Y+15, r31	; 0x0f
    5d3e:	ee 87       	std	Y+14, r30	; 0x0e
    5d40:	ff ef       	ldi	r31, 0xFF	; 255
    5d42:	6f 16       	cp	r6, r31
    5d44:	7f 06       	cpc	r7, r31
    5d46:	69 f4       	brne	.+26     	; 0x5d62 <vfprintf+0x34c>
    5d48:	b7 01       	movw	r22, r14
    5d4a:	8e e2       	ldi	r24, 0x2E	; 46
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	2b 8b       	std	Y+19, r18	; 0x13
    5d50:	3a 8b       	std	Y+18, r19	; 0x12
    5d52:	48 8b       	std	Y+16, r20	; 0x10
    5d54:	59 8b       	std	Y+17, r21	; 0x11
    5d56:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5d5a:	59 89       	ldd	r21, Y+17	; 0x11
    5d5c:	48 89       	ldd	r20, Y+16	; 0x10
    5d5e:	3a 89       	ldd	r19, Y+18	; 0x12
    5d60:	2b 89       	ldd	r18, Y+19	; 0x13
    5d62:	c6 14       	cp	r12, r6
    5d64:	d7 04       	cpc	r13, r7
    5d66:	54 f0       	brlt	.+20     	; 0x5d7c <vfprintf+0x366>
    5d68:	6c 85       	ldd	r22, Y+12	; 0x0c
    5d6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5d6c:	66 15       	cp	r22, r6
    5d6e:	77 05       	cpc	r23, r7
    5d70:	2c f4       	brge	.+10     	; 0x5d7c <vfprintf+0x366>
    5d72:	f9 01       	movw	r30, r18
    5d74:	e4 0f       	add	r30, r20
    5d76:	f5 1f       	adc	r31, r21
    5d78:	81 81       	ldd	r24, Z+1	; 0x01
    5d7a:	01 c0       	rjmp	.+2      	; 0x5d7e <vfprintf+0x368>
    5d7c:	80 e3       	ldi	r24, 0x30	; 48
    5d7e:	71 e0       	ldi	r23, 0x01	; 1
    5d80:	67 1a       	sub	r6, r23
    5d82:	71 08       	sbc	r7, r1
    5d84:	4f 5f       	subi	r20, 0xFF	; 255
    5d86:	5f 4f       	sbci	r21, 0xFF	; 255
    5d88:	ee 85       	ldd	r30, Y+14	; 0x0e
    5d8a:	ff 85       	ldd	r31, Y+15	; 0x0f
    5d8c:	6e 16       	cp	r6, r30
    5d8e:	7f 06       	cpc	r7, r31
    5d90:	6c f0       	brlt	.+26     	; 0x5dac <vfprintf+0x396>
    5d92:	b7 01       	movw	r22, r14
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	2b 8b       	std	Y+19, r18	; 0x13
    5d98:	3a 8b       	std	Y+18, r19	; 0x12
    5d9a:	48 8b       	std	Y+16, r20	; 0x10
    5d9c:	59 8b       	std	Y+17, r21	; 0x11
    5d9e:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5da2:	2b 89       	ldd	r18, Y+19	; 0x13
    5da4:	3a 89       	ldd	r19, Y+18	; 0x12
    5da6:	48 89       	ldd	r20, Y+16	; 0x10
    5da8:	59 89       	ldd	r21, Y+17	; 0x11
    5daa:	ca cf       	rjmp	.-108    	; 0x5d40 <vfprintf+0x32a>
    5dac:	6c 14       	cp	r6, r12
    5dae:	7d 04       	cpc	r7, r13
    5db0:	39 f4       	brne	.+14     	; 0x5dc0 <vfprintf+0x3aa>
    5db2:	9a 81       	ldd	r25, Y+2	; 0x02
    5db4:	96 33       	cpi	r25, 0x36	; 54
    5db6:	18 f4       	brcc	.+6      	; 0x5dbe <vfprintf+0x3a8>
    5db8:	95 33       	cpi	r25, 0x35	; 53
    5dba:	11 f4       	brne	.+4      	; 0x5dc0 <vfprintf+0x3aa>
    5dbc:	04 ff       	sbrs	r16, 4
    5dbe:	81 e3       	ldi	r24, 0x31	; 49
    5dc0:	b7 01       	movw	r22, r14
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	4b c0       	rjmp	.+150    	; 0x5e5c <vfprintf+0x446>
    5dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc8:	81 33       	cpi	r24, 0x31	; 49
    5dca:	09 f0       	breq	.+2      	; 0x5dce <vfprintf+0x3b8>
    5dcc:	0f 7e       	andi	r16, 0xEF	; 239
    5dce:	b7 01       	movw	r22, r14
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5dd6:	11 11       	cpse	r17, r1
    5dd8:	05 c0       	rjmp	.+10     	; 0x5de4 <vfprintf+0x3ce>
    5dda:	74 fe       	sbrs	r7, 4
    5ddc:	18 c0       	rjmp	.+48     	; 0x5e0e <vfprintf+0x3f8>
    5dde:	85 e4       	ldi	r24, 0x45	; 69
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	17 c0       	rjmp	.+46     	; 0x5e12 <vfprintf+0x3fc>
    5de4:	b7 01       	movw	r22, r14
    5de6:	8e e2       	ldi	r24, 0x2E	; 46
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5dee:	82 e0       	ldi	r24, 0x02	; 2
    5df0:	66 24       	eor	r6, r6
    5df2:	63 94       	inc	r6
    5df4:	68 0e       	add	r6, r24
    5df6:	f4 01       	movw	r30, r8
    5df8:	e8 0f       	add	r30, r24
    5dfa:	f1 1d       	adc	r31, r1
    5dfc:	80 81       	ld	r24, Z
    5dfe:	b7 01       	movw	r22, r14
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5e06:	11 50       	subi	r17, 0x01	; 1
    5e08:	41 f3       	breq	.-48     	; 0x5dda <vfprintf+0x3c4>
    5e0a:	86 2d       	mov	r24, r6
    5e0c:	f1 cf       	rjmp	.-30     	; 0x5df0 <vfprintf+0x3da>
    5e0e:	85 e6       	ldi	r24, 0x65	; 101
    5e10:	90 e0       	ldi	r25, 0x00	; 0
    5e12:	b7 01       	movw	r22, r14
    5e14:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5e18:	d7 fc       	sbrc	r13, 7
    5e1a:	05 c0       	rjmp	.+10     	; 0x5e26 <vfprintf+0x410>
    5e1c:	c1 14       	cp	r12, r1
    5e1e:	d1 04       	cpc	r13, r1
    5e20:	39 f4       	brne	.+14     	; 0x5e30 <vfprintf+0x41a>
    5e22:	04 ff       	sbrs	r16, 4
    5e24:	05 c0       	rjmp	.+10     	; 0x5e30 <vfprintf+0x41a>
    5e26:	d1 94       	neg	r13
    5e28:	c1 94       	neg	r12
    5e2a:	d1 08       	sbc	r13, r1
    5e2c:	8d e2       	ldi	r24, 0x2D	; 45
    5e2e:	01 c0       	rjmp	.+2      	; 0x5e32 <vfprintf+0x41c>
    5e30:	8b e2       	ldi	r24, 0x2B	; 43
    5e32:	b7 01       	movw	r22, r14
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5e3a:	80 e3       	ldi	r24, 0x30	; 48
    5e3c:	6a e0       	ldi	r22, 0x0A	; 10
    5e3e:	c6 16       	cp	r12, r22
    5e40:	d1 04       	cpc	r13, r1
    5e42:	2c f0       	brlt	.+10     	; 0x5e4e <vfprintf+0x438>
    5e44:	8f 5f       	subi	r24, 0xFF	; 255
    5e46:	fa e0       	ldi	r31, 0x0A	; 10
    5e48:	cf 1a       	sub	r12, r31
    5e4a:	d1 08       	sbc	r13, r1
    5e4c:	f7 cf       	rjmp	.-18     	; 0x5e3c <vfprintf+0x426>
    5e4e:	b7 01       	movw	r22, r14
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5e56:	b7 01       	movw	r22, r14
    5e58:	c6 01       	movw	r24, r12
    5e5a:	c0 96       	adiw	r24, 0x30	; 48
    5e5c:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5e60:	41 c1       	rjmp	.+642    	; 0x60e4 <vfprintf+0x6ce>
    5e62:	83 36       	cpi	r24, 0x63	; 99
    5e64:	31 f0       	breq	.+12     	; 0x5e72 <vfprintf+0x45c>
    5e66:	83 37       	cpi	r24, 0x73	; 115
    5e68:	79 f0       	breq	.+30     	; 0x5e88 <vfprintf+0x472>
    5e6a:	83 35       	cpi	r24, 0x53	; 83
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <vfprintf+0x45a>
    5e6e:	58 c0       	rjmp	.+176    	; 0x5f20 <vfprintf+0x50a>
    5e70:	21 c0       	rjmp	.+66     	; 0x5eb4 <vfprintf+0x49e>
    5e72:	56 01       	movw	r10, r12
    5e74:	72 e0       	ldi	r23, 0x02	; 2
    5e76:	a7 0e       	add	r10, r23
    5e78:	b1 1c       	adc	r11, r1
    5e7a:	f6 01       	movw	r30, r12
    5e7c:	80 81       	ld	r24, Z
    5e7e:	89 83       	std	Y+1, r24	; 0x01
    5e80:	01 e0       	ldi	r16, 0x01	; 1
    5e82:	10 e0       	ldi	r17, 0x00	; 0
    5e84:	64 01       	movw	r12, r8
    5e86:	14 c0       	rjmp	.+40     	; 0x5eb0 <vfprintf+0x49a>
    5e88:	56 01       	movw	r10, r12
    5e8a:	f2 e0       	ldi	r31, 0x02	; 2
    5e8c:	af 0e       	add	r10, r31
    5e8e:	b1 1c       	adc	r11, r1
    5e90:	f6 01       	movw	r30, r12
    5e92:	c0 80       	ld	r12, Z
    5e94:	d1 80       	ldd	r13, Z+1	; 0x01
    5e96:	26 ff       	sbrs	r18, 6
    5e98:	03 c0       	rjmp	.+6      	; 0x5ea0 <vfprintf+0x48a>
    5e9a:	61 2f       	mov	r22, r17
    5e9c:	70 e0       	ldi	r23, 0x00	; 0
    5e9e:	02 c0       	rjmp	.+4      	; 0x5ea4 <vfprintf+0x48e>
    5ea0:	6f ef       	ldi	r22, 0xFF	; 255
    5ea2:	7f ef       	ldi	r23, 0xFF	; 255
    5ea4:	c6 01       	movw	r24, r12
    5ea6:	2b 8b       	std	Y+19, r18	; 0x13
    5ea8:	0e 94 fe 34 	call	0x69fc	; 0x69fc <strnlen>
    5eac:	8c 01       	movw	r16, r24
    5eae:	2b 89       	ldd	r18, Y+19	; 0x13
    5eb0:	2f 77       	andi	r18, 0x7F	; 127
    5eb2:	15 c0       	rjmp	.+42     	; 0x5ede <vfprintf+0x4c8>
    5eb4:	56 01       	movw	r10, r12
    5eb6:	f2 e0       	ldi	r31, 0x02	; 2
    5eb8:	af 0e       	add	r10, r31
    5eba:	b1 1c       	adc	r11, r1
    5ebc:	f6 01       	movw	r30, r12
    5ebe:	c0 80       	ld	r12, Z
    5ec0:	d1 80       	ldd	r13, Z+1	; 0x01
    5ec2:	26 ff       	sbrs	r18, 6
    5ec4:	03 c0       	rjmp	.+6      	; 0x5ecc <vfprintf+0x4b6>
    5ec6:	61 2f       	mov	r22, r17
    5ec8:	70 e0       	ldi	r23, 0x00	; 0
    5eca:	02 c0       	rjmp	.+4      	; 0x5ed0 <vfprintf+0x4ba>
    5ecc:	6f ef       	ldi	r22, 0xFF	; 255
    5ece:	7f ef       	ldi	r23, 0xFF	; 255
    5ed0:	c6 01       	movw	r24, r12
    5ed2:	2b 8b       	std	Y+19, r18	; 0x13
    5ed4:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <strnlen_P>
    5ed8:	8c 01       	movw	r16, r24
    5eda:	2b 89       	ldd	r18, Y+19	; 0x13
    5edc:	20 68       	ori	r18, 0x80	; 128
    5ede:	72 2e       	mov	r7, r18
    5ee0:	23 fd       	sbrc	r18, 3
    5ee2:	1a c0       	rjmp	.+52     	; 0x5f18 <vfprintf+0x502>
    5ee4:	85 2d       	mov	r24, r5
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	08 17       	cp	r16, r24
    5eea:	19 07       	cpc	r17, r25
    5eec:	a8 f4       	brcc	.+42     	; 0x5f18 <vfprintf+0x502>
    5eee:	b7 01       	movw	r22, r14
    5ef0:	80 e2       	ldi	r24, 0x20	; 32
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5ef8:	5a 94       	dec	r5
    5efa:	f4 cf       	rjmp	.-24     	; 0x5ee4 <vfprintf+0x4ce>
    5efc:	f6 01       	movw	r30, r12
    5efe:	77 fc       	sbrc	r7, 7
    5f00:	85 91       	lpm	r24, Z+
    5f02:	77 fe       	sbrs	r7, 7
    5f04:	81 91       	ld	r24, Z+
    5f06:	6f 01       	movw	r12, r30
    5f08:	b7 01       	movw	r22, r14
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    5f10:	51 10       	cpse	r5, r1
    5f12:	5a 94       	dec	r5
    5f14:	01 50       	subi	r16, 0x01	; 1
    5f16:	11 09       	sbc	r17, r1
    5f18:	01 15       	cp	r16, r1
    5f1a:	11 05       	cpc	r17, r1
    5f1c:	79 f7       	brne	.-34     	; 0x5efc <vfprintf+0x4e6>
    5f1e:	e2 c0       	rjmp	.+452    	; 0x60e4 <vfprintf+0x6ce>
    5f20:	84 36       	cpi	r24, 0x64	; 100
    5f22:	11 f0       	breq	.+4      	; 0x5f28 <vfprintf+0x512>
    5f24:	89 36       	cpi	r24, 0x69	; 105
    5f26:	51 f5       	brne	.+84     	; 0x5f7c <vfprintf+0x566>
    5f28:	56 01       	movw	r10, r12
    5f2a:	27 ff       	sbrs	r18, 7
    5f2c:	09 c0       	rjmp	.+18     	; 0x5f40 <vfprintf+0x52a>
    5f2e:	f4 e0       	ldi	r31, 0x04	; 4
    5f30:	af 0e       	add	r10, r31
    5f32:	b1 1c       	adc	r11, r1
    5f34:	f6 01       	movw	r30, r12
    5f36:	60 81       	ld	r22, Z
    5f38:	71 81       	ldd	r23, Z+1	; 0x01
    5f3a:	82 81       	ldd	r24, Z+2	; 0x02
    5f3c:	93 81       	ldd	r25, Z+3	; 0x03
    5f3e:	0a c0       	rjmp	.+20     	; 0x5f54 <vfprintf+0x53e>
    5f40:	f2 e0       	ldi	r31, 0x02	; 2
    5f42:	af 0e       	add	r10, r31
    5f44:	b1 1c       	adc	r11, r1
    5f46:	f6 01       	movw	r30, r12
    5f48:	60 81       	ld	r22, Z
    5f4a:	71 81       	ldd	r23, Z+1	; 0x01
    5f4c:	88 27       	eor	r24, r24
    5f4e:	77 fd       	sbrc	r23, 7
    5f50:	80 95       	com	r24
    5f52:	98 2f       	mov	r25, r24
    5f54:	02 2f       	mov	r16, r18
    5f56:	0f 76       	andi	r16, 0x6F	; 111
    5f58:	97 ff       	sbrs	r25, 7
    5f5a:	08 c0       	rjmp	.+16     	; 0x5f6c <vfprintf+0x556>
    5f5c:	90 95       	com	r25
    5f5e:	80 95       	com	r24
    5f60:	70 95       	com	r23
    5f62:	61 95       	neg	r22
    5f64:	7f 4f       	sbci	r23, 0xFF	; 255
    5f66:	8f 4f       	sbci	r24, 0xFF	; 255
    5f68:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6a:	00 68       	ori	r16, 0x80	; 128
    5f6c:	2a e0       	ldi	r18, 0x0A	; 10
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	a4 01       	movw	r20, r8
    5f72:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <__ultoa_invert>
    5f76:	c8 2e       	mov	r12, r24
    5f78:	c8 18       	sub	r12, r8
    5f7a:	3e c0       	rjmp	.+124    	; 0x5ff8 <vfprintf+0x5e2>
    5f7c:	02 2f       	mov	r16, r18
    5f7e:	85 37       	cpi	r24, 0x75	; 117
    5f80:	21 f4       	brne	.+8      	; 0x5f8a <vfprintf+0x574>
    5f82:	0f 7e       	andi	r16, 0xEF	; 239
    5f84:	2a e0       	ldi	r18, 0x0A	; 10
    5f86:	30 e0       	ldi	r19, 0x00	; 0
    5f88:	1d c0       	rjmp	.+58     	; 0x5fc4 <vfprintf+0x5ae>
    5f8a:	09 7f       	andi	r16, 0xF9	; 249
    5f8c:	8f 36       	cpi	r24, 0x6F	; 111
    5f8e:	91 f0       	breq	.+36     	; 0x5fb4 <vfprintf+0x59e>
    5f90:	18 f4       	brcc	.+6      	; 0x5f98 <vfprintf+0x582>
    5f92:	88 35       	cpi	r24, 0x58	; 88
    5f94:	59 f0       	breq	.+22     	; 0x5fac <vfprintf+0x596>
    5f96:	b0 c0       	rjmp	.+352    	; 0x60f8 <vfprintf+0x6e2>
    5f98:	80 37       	cpi	r24, 0x70	; 112
    5f9a:	19 f0       	breq	.+6      	; 0x5fa2 <vfprintf+0x58c>
    5f9c:	88 37       	cpi	r24, 0x78	; 120
    5f9e:	11 f0       	breq	.+4      	; 0x5fa4 <vfprintf+0x58e>
    5fa0:	ab c0       	rjmp	.+342    	; 0x60f8 <vfprintf+0x6e2>
    5fa2:	00 61       	ori	r16, 0x10	; 16
    5fa4:	04 ff       	sbrs	r16, 4
    5fa6:	09 c0       	rjmp	.+18     	; 0x5fba <vfprintf+0x5a4>
    5fa8:	04 60       	ori	r16, 0x04	; 4
    5faa:	07 c0       	rjmp	.+14     	; 0x5fba <vfprintf+0x5a4>
    5fac:	24 ff       	sbrs	r18, 4
    5fae:	08 c0       	rjmp	.+16     	; 0x5fc0 <vfprintf+0x5aa>
    5fb0:	06 60       	ori	r16, 0x06	; 6
    5fb2:	06 c0       	rjmp	.+12     	; 0x5fc0 <vfprintf+0x5aa>
    5fb4:	28 e0       	ldi	r18, 0x08	; 8
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	05 c0       	rjmp	.+10     	; 0x5fc4 <vfprintf+0x5ae>
    5fba:	20 e1       	ldi	r18, 0x10	; 16
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	02 c0       	rjmp	.+4      	; 0x5fc4 <vfprintf+0x5ae>
    5fc0:	20 e1       	ldi	r18, 0x10	; 16
    5fc2:	32 e0       	ldi	r19, 0x02	; 2
    5fc4:	56 01       	movw	r10, r12
    5fc6:	07 ff       	sbrs	r16, 7
    5fc8:	09 c0       	rjmp	.+18     	; 0x5fdc <vfprintf+0x5c6>
    5fca:	f4 e0       	ldi	r31, 0x04	; 4
    5fcc:	af 0e       	add	r10, r31
    5fce:	b1 1c       	adc	r11, r1
    5fd0:	f6 01       	movw	r30, r12
    5fd2:	60 81       	ld	r22, Z
    5fd4:	71 81       	ldd	r23, Z+1	; 0x01
    5fd6:	82 81       	ldd	r24, Z+2	; 0x02
    5fd8:	93 81       	ldd	r25, Z+3	; 0x03
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <vfprintf+0x5d6>
    5fdc:	f2 e0       	ldi	r31, 0x02	; 2
    5fde:	af 0e       	add	r10, r31
    5fe0:	b1 1c       	adc	r11, r1
    5fe2:	f6 01       	movw	r30, r12
    5fe4:	60 81       	ld	r22, Z
    5fe6:	71 81       	ldd	r23, Z+1	; 0x01
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	a4 01       	movw	r20, r8
    5fee:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <__ultoa_invert>
    5ff2:	c8 2e       	mov	r12, r24
    5ff4:	c8 18       	sub	r12, r8
    5ff6:	0f 77       	andi	r16, 0x7F	; 127
    5ff8:	06 ff       	sbrs	r16, 6
    5ffa:	0b c0       	rjmp	.+22     	; 0x6012 <vfprintf+0x5fc>
    5ffc:	20 2f       	mov	r18, r16
    5ffe:	2e 7f       	andi	r18, 0xFE	; 254
    6000:	c1 16       	cp	r12, r17
    6002:	50 f4       	brcc	.+20     	; 0x6018 <vfprintf+0x602>
    6004:	04 ff       	sbrs	r16, 4
    6006:	0a c0       	rjmp	.+20     	; 0x601c <vfprintf+0x606>
    6008:	02 fd       	sbrc	r16, 2
    600a:	08 c0       	rjmp	.+16     	; 0x601c <vfprintf+0x606>
    600c:	20 2f       	mov	r18, r16
    600e:	2e 7e       	andi	r18, 0xEE	; 238
    6010:	05 c0       	rjmp	.+10     	; 0x601c <vfprintf+0x606>
    6012:	dc 2c       	mov	r13, r12
    6014:	20 2f       	mov	r18, r16
    6016:	03 c0       	rjmp	.+6      	; 0x601e <vfprintf+0x608>
    6018:	dc 2c       	mov	r13, r12
    601a:	01 c0       	rjmp	.+2      	; 0x601e <vfprintf+0x608>
    601c:	d1 2e       	mov	r13, r17
    601e:	24 ff       	sbrs	r18, 4
    6020:	0d c0       	rjmp	.+26     	; 0x603c <vfprintf+0x626>
    6022:	fe 01       	movw	r30, r28
    6024:	ec 0d       	add	r30, r12
    6026:	f1 1d       	adc	r31, r1
    6028:	80 81       	ld	r24, Z
    602a:	80 33       	cpi	r24, 0x30	; 48
    602c:	11 f4       	brne	.+4      	; 0x6032 <vfprintf+0x61c>
    602e:	29 7e       	andi	r18, 0xE9	; 233
    6030:	09 c0       	rjmp	.+18     	; 0x6044 <vfprintf+0x62e>
    6032:	22 ff       	sbrs	r18, 2
    6034:	06 c0       	rjmp	.+12     	; 0x6042 <vfprintf+0x62c>
    6036:	d3 94       	inc	r13
    6038:	d3 94       	inc	r13
    603a:	04 c0       	rjmp	.+8      	; 0x6044 <vfprintf+0x62e>
    603c:	82 2f       	mov	r24, r18
    603e:	86 78       	andi	r24, 0x86	; 134
    6040:	09 f0       	breq	.+2      	; 0x6044 <vfprintf+0x62e>
    6042:	d3 94       	inc	r13
    6044:	23 fd       	sbrc	r18, 3
    6046:	13 c0       	rjmp	.+38     	; 0x606e <vfprintf+0x658>
    6048:	20 ff       	sbrs	r18, 0
    604a:	06 c0       	rjmp	.+12     	; 0x6058 <vfprintf+0x642>
    604c:	1c 2d       	mov	r17, r12
    604e:	d5 14       	cp	r13, r5
    6050:	18 f4       	brcc	.+6      	; 0x6058 <vfprintf+0x642>
    6052:	15 0d       	add	r17, r5
    6054:	1d 19       	sub	r17, r13
    6056:	d5 2c       	mov	r13, r5
    6058:	d5 14       	cp	r13, r5
    605a:	68 f4       	brcc	.+26     	; 0x6076 <vfprintf+0x660>
    605c:	b7 01       	movw	r22, r14
    605e:	80 e2       	ldi	r24, 0x20	; 32
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	2b 8b       	std	Y+19, r18	; 0x13
    6064:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    6068:	d3 94       	inc	r13
    606a:	2b 89       	ldd	r18, Y+19	; 0x13
    606c:	f5 cf       	rjmp	.-22     	; 0x6058 <vfprintf+0x642>
    606e:	d5 14       	cp	r13, r5
    6070:	10 f4       	brcc	.+4      	; 0x6076 <vfprintf+0x660>
    6072:	5d 18       	sub	r5, r13
    6074:	01 c0       	rjmp	.+2      	; 0x6078 <vfprintf+0x662>
    6076:	51 2c       	mov	r5, r1
    6078:	24 ff       	sbrs	r18, 4
    607a:	12 c0       	rjmp	.+36     	; 0x60a0 <vfprintf+0x68a>
    607c:	b7 01       	movw	r22, r14
    607e:	80 e3       	ldi	r24, 0x30	; 48
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	2b 8b       	std	Y+19, r18	; 0x13
    6084:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    6088:	2b 89       	ldd	r18, Y+19	; 0x13
    608a:	22 ff       	sbrs	r18, 2
    608c:	17 c0       	rjmp	.+46     	; 0x60bc <vfprintf+0x6a6>
    608e:	21 ff       	sbrs	r18, 1
    6090:	03 c0       	rjmp	.+6      	; 0x6098 <vfprintf+0x682>
    6092:	88 e5       	ldi	r24, 0x58	; 88
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	02 c0       	rjmp	.+4      	; 0x609c <vfprintf+0x686>
    6098:	88 e7       	ldi	r24, 0x78	; 120
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	b7 01       	movw	r22, r14
    609e:	0c c0       	rjmp	.+24     	; 0x60b8 <vfprintf+0x6a2>
    60a0:	82 2f       	mov	r24, r18
    60a2:	86 78       	andi	r24, 0x86	; 134
    60a4:	59 f0       	breq	.+22     	; 0x60bc <vfprintf+0x6a6>
    60a6:	21 fd       	sbrc	r18, 1
    60a8:	02 c0       	rjmp	.+4      	; 0x60ae <vfprintf+0x698>
    60aa:	80 e2       	ldi	r24, 0x20	; 32
    60ac:	01 c0       	rjmp	.+2      	; 0x60b0 <vfprintf+0x69a>
    60ae:	8b e2       	ldi	r24, 0x2B	; 43
    60b0:	27 fd       	sbrc	r18, 7
    60b2:	8d e2       	ldi	r24, 0x2D	; 45
    60b4:	b7 01       	movw	r22, r14
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    60bc:	c1 16       	cp	r12, r17
    60be:	38 f4       	brcc	.+14     	; 0x60ce <vfprintf+0x6b8>
    60c0:	b7 01       	movw	r22, r14
    60c2:	80 e3       	ldi	r24, 0x30	; 48
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    60ca:	11 50       	subi	r17, 0x01	; 1
    60cc:	f7 cf       	rjmp	.-18     	; 0x60bc <vfprintf+0x6a6>
    60ce:	ca 94       	dec	r12
    60d0:	f4 01       	movw	r30, r8
    60d2:	ec 0d       	add	r30, r12
    60d4:	f1 1d       	adc	r31, r1
    60d6:	80 81       	ld	r24, Z
    60d8:	b7 01       	movw	r22, r14
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    60e0:	c1 10       	cpse	r12, r1
    60e2:	f5 cf       	rjmp	.-22     	; 0x60ce <vfprintf+0x6b8>
    60e4:	55 20       	and	r5, r5
    60e6:	09 f4       	brne	.+2      	; 0x60ea <vfprintf+0x6d4>
    60e8:	c2 cc       	rjmp	.-1660   	; 0x5a6e <vfprintf+0x58>
    60ea:	b7 01       	movw	r22, r14
    60ec:	80 e2       	ldi	r24, 0x20	; 32
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	0e 94 09 35 	call	0x6a12	; 0x6a12 <fputc>
    60f4:	5a 94       	dec	r5
    60f6:	f6 cf       	rjmp	.-20     	; 0x60e4 <vfprintf+0x6ce>
    60f8:	f7 01       	movw	r30, r14
    60fa:	86 81       	ldd	r24, Z+6	; 0x06
    60fc:	97 81       	ldd	r25, Z+7	; 0x07
    60fe:	02 c0       	rjmp	.+4      	; 0x6104 <vfprintf+0x6ee>
    6100:	8f ef       	ldi	r24, 0xFF	; 255
    6102:	9f ef       	ldi	r25, 0xFF	; 255
    6104:	63 96       	adiw	r28, 0x13	; 19
    6106:	e2 e1       	ldi	r30, 0x12	; 18
    6108:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__epilogue_restores__>

0000610c <lrint>:
    610c:	cd db       	rcall	.-2150   	; 0x58a8 <__fp_splitA>
    610e:	a8 f1       	brcs	.+106    	; 0x617a <lrint+0x6e>
    6110:	9e 57       	subi	r25, 0x7E	; 126
    6112:	a8 f1       	brcs	.+106    	; 0x617e <lrint+0x72>
    6114:	98 51       	subi	r25, 0x18	; 24
    6116:	60 f0       	brcs	.+24     	; 0x6130 <lrint+0x24>
    6118:	39 f1       	breq	.+78     	; 0x6168 <lrint+0x5c>
    611a:	98 30       	cpi	r25, 0x08	; 8
    611c:	70 f5       	brcc	.+92     	; 0x617a <lrint+0x6e>
    611e:	09 2e       	mov	r0, r25
    6120:	99 27       	eor	r25, r25
    6122:	66 0f       	add	r22, r22
    6124:	77 1f       	adc	r23, r23
    6126:	88 1f       	adc	r24, r24
    6128:	99 1f       	adc	r25, r25
    612a:	0a 94       	dec	r0
    612c:	d1 f7       	brne	.-12     	; 0x6122 <lrint+0x16>
    612e:	1c c0       	rjmp	.+56     	; 0x6168 <lrint+0x5c>
    6130:	bb 27       	eor	r27, r27
    6132:	99 3f       	cpi	r25, 0xF9	; 249
    6134:	4c f4       	brge	.+18     	; 0x6148 <lrint+0x3c>
    6136:	b1 11       	cpse	r27, r1
    6138:	b1 e0       	ldi	r27, 0x01	; 1
    613a:	b6 2b       	or	r27, r22
    613c:	67 2f       	mov	r22, r23
    613e:	78 2f       	mov	r23, r24
    6140:	88 27       	eor	r24, r24
    6142:	98 5f       	subi	r25, 0xF8	; 248
    6144:	b1 f7       	brne	.-20     	; 0x6132 <lrint+0x26>
    6146:	08 c0       	rjmp	.+16     	; 0x6158 <lrint+0x4c>
    6148:	86 95       	lsr	r24
    614a:	77 95       	ror	r23
    614c:	67 95       	ror	r22
    614e:	b7 95       	ror	r27
    6150:	08 f4       	brcc	.+2      	; 0x6154 <lrint+0x48>
    6152:	b1 60       	ori	r27, 0x01	; 1
    6154:	93 95       	inc	r25
    6156:	c1 f7       	brne	.-16     	; 0x6148 <lrint+0x3c>
    6158:	bb 0f       	add	r27, r27
    615a:	30 f4       	brcc	.+12     	; 0x6168 <lrint+0x5c>
    615c:	11 f4       	brne	.+4      	; 0x6162 <lrint+0x56>
    615e:	60 ff       	sbrs	r22, 0
    6160:	03 c0       	rjmp	.+6      	; 0x6168 <lrint+0x5c>
    6162:	6f 5f       	subi	r22, 0xFF	; 255
    6164:	7f 4f       	sbci	r23, 0xFF	; 255
    6166:	8f 4f       	sbci	r24, 0xFF	; 255
    6168:	3e f4       	brtc	.+14     	; 0x6178 <lrint+0x6c>
    616a:	90 95       	com	r25
    616c:	80 95       	com	r24
    616e:	70 95       	com	r23
    6170:	61 95       	neg	r22
    6172:	7f 4f       	sbci	r23, 0xFF	; 255
    6174:	8f 4f       	sbci	r24, 0xFF	; 255
    6176:	9f 4f       	sbci	r25, 0xFF	; 255
    6178:	08 95       	ret
    617a:	68 94       	set
    617c:	b0 cb       	rjmp	.-2208   	; 0x58de <__fp_szero>
    617e:	ae cb       	rjmp	.-2212   	; 0x58dc <__fp_zero>

00006180 <pow>:
    6180:	fa 01       	movw	r30, r20
    6182:	ee 0f       	add	r30, r30
    6184:	ff 1f       	adc	r31, r31
    6186:	30 96       	adiw	r30, 0x00	; 0
    6188:	21 05       	cpc	r18, r1
    618a:	31 05       	cpc	r19, r1
    618c:	99 f1       	breq	.+102    	; 0x61f4 <pow+0x74>
    618e:	61 15       	cp	r22, r1
    6190:	71 05       	cpc	r23, r1
    6192:	61 f4       	brne	.+24     	; 0x61ac <pow+0x2c>
    6194:	80 38       	cpi	r24, 0x80	; 128
    6196:	bf e3       	ldi	r27, 0x3F	; 63
    6198:	9b 07       	cpc	r25, r27
    619a:	49 f1       	breq	.+82     	; 0x61ee <pow+0x6e>
    619c:	68 94       	set
    619e:	90 38       	cpi	r25, 0x80	; 128
    61a0:	81 05       	cpc	r24, r1
    61a2:	61 f0       	breq	.+24     	; 0x61bc <pow+0x3c>
    61a4:	80 38       	cpi	r24, 0x80	; 128
    61a6:	bf ef       	ldi	r27, 0xFF	; 255
    61a8:	9b 07       	cpc	r25, r27
    61aa:	41 f0       	breq	.+16     	; 0x61bc <pow+0x3c>
    61ac:	99 23       	and	r25, r25
    61ae:	42 f5       	brpl	.+80     	; 0x6200 <pow+0x80>
    61b0:	ff 3f       	cpi	r31, 0xFF	; 255
    61b2:	e1 05       	cpc	r30, r1
    61b4:	31 05       	cpc	r19, r1
    61b6:	21 05       	cpc	r18, r1
    61b8:	11 f1       	breq	.+68     	; 0x61fe <pow+0x7e>
    61ba:	e8 94       	clt
    61bc:	08 94       	sec
    61be:	e7 95       	ror	r30
    61c0:	d9 01       	movw	r26, r18
    61c2:	aa 23       	and	r26, r26
    61c4:	29 f4       	brne	.+10     	; 0x61d0 <pow+0x50>
    61c6:	ab 2f       	mov	r26, r27
    61c8:	be 2f       	mov	r27, r30
    61ca:	f8 5f       	subi	r31, 0xF8	; 248
    61cc:	d0 f3       	brcs	.-12     	; 0x61c2 <pow+0x42>
    61ce:	10 c0       	rjmp	.+32     	; 0x61f0 <pow+0x70>
    61d0:	ff 5f       	subi	r31, 0xFF	; 255
    61d2:	70 f4       	brcc	.+28     	; 0x61f0 <pow+0x70>
    61d4:	a6 95       	lsr	r26
    61d6:	e0 f7       	brcc	.-8      	; 0x61d0 <pow+0x50>
    61d8:	f7 39       	cpi	r31, 0x97	; 151
    61da:	50 f0       	brcs	.+20     	; 0x61f0 <pow+0x70>
    61dc:	19 f0       	breq	.+6      	; 0x61e4 <pow+0x64>
    61de:	ff 3a       	cpi	r31, 0xAF	; 175
    61e0:	38 f4       	brcc	.+14     	; 0x61f0 <pow+0x70>
    61e2:	9f 77       	andi	r25, 0x7F	; 127
    61e4:	9f 93       	push	r25
    61e6:	0c d0       	rcall	.+24     	; 0x6200 <pow+0x80>
    61e8:	0f 90       	pop	r0
    61ea:	07 fc       	sbrc	r0, 7
    61ec:	90 58       	subi	r25, 0x80	; 128
    61ee:	08 95       	ret
    61f0:	3e f0       	brts	.+14     	; 0x6200 <pow+0x80>
    61f2:	d2 ca       	rjmp	.-2652   	; 0x5798 <__fp_nan>
    61f4:	60 e0       	ldi	r22, 0x00	; 0
    61f6:	70 e0       	ldi	r23, 0x00	; 0
    61f8:	80 e8       	ldi	r24, 0x80	; 128
    61fa:	9f e3       	ldi	r25, 0x3F	; 63
    61fc:	08 95       	ret
    61fe:	4f e7       	ldi	r20, 0x7F	; 127
    6200:	9f 77       	andi	r25, 0x7F	; 127
    6202:	5f 93       	push	r21
    6204:	4f 93       	push	r20
    6206:	3f 93       	push	r19
    6208:	2f 93       	push	r18
    620a:	72 d0       	rcall	.+228    	; 0x62f0 <log>
    620c:	2f 91       	pop	r18
    620e:	3f 91       	pop	r19
    6210:	4f 91       	pop	r20
    6212:	5f 91       	pop	r21
    6214:	75 db       	rcall	.-2326   	; 0x5900 <__mulsf3>
    6216:	05 c0       	rjmp	.+10     	; 0x6222 <exp>
    6218:	19 f4       	brne	.+6      	; 0x6220 <pow+0xa0>
    621a:	0e f0       	brts	.+2      	; 0x621e <pow+0x9e>
    621c:	b7 ca       	rjmp	.-2706   	; 0x578c <__fp_inf>
    621e:	5e cb       	rjmp	.-2372   	; 0x58dc <__fp_zero>
    6220:	bb ca       	rjmp	.-2698   	; 0x5798 <__fp_nan>

00006222 <exp>:
    6222:	42 db       	rcall	.-2428   	; 0x58a8 <__fp_splitA>
    6224:	c8 f3       	brcs	.-14     	; 0x6218 <pow+0x98>
    6226:	96 38       	cpi	r25, 0x86	; 134
    6228:	c0 f7       	brcc	.-16     	; 0x621a <pow+0x9a>
    622a:	07 f8       	bld	r0, 7
    622c:	0f 92       	push	r0
    622e:	e8 94       	clt
    6230:	2b e3       	ldi	r18, 0x3B	; 59
    6232:	3a ea       	ldi	r19, 0xAA	; 170
    6234:	48 eb       	ldi	r20, 0xB8	; 184
    6236:	5f e7       	ldi	r21, 0x7F	; 127
    6238:	71 db       	rcall	.-2334   	; 0x591c <__mulsf3_pse>
    623a:	0f 92       	push	r0
    623c:	0f 92       	push	r0
    623e:	0f 92       	push	r0
    6240:	4d b7       	in	r20, 0x3d	; 61
    6242:	5e b7       	in	r21, 0x3e	; 62
    6244:	0f 92       	push	r0
    6246:	94 d0       	rcall	.+296    	; 0x6370 <modf>
    6248:	e4 e1       	ldi	r30, 0x14	; 20
    624a:	f1 e0       	ldi	r31, 0x01	; 1
    624c:	a8 da       	rcall	.-2736   	; 0x579e <__fp_powser>
    624e:	4f 91       	pop	r20
    6250:	5f 91       	pop	r21
    6252:	ef 91       	pop	r30
    6254:	ff 91       	pop	r31
    6256:	e5 95       	asr	r30
    6258:	ee 1f       	adc	r30, r30
    625a:	ff 1f       	adc	r31, r31
    625c:	49 f0       	breq	.+18     	; 0x6270 <exp+0x4e>
    625e:	fe 57       	subi	r31, 0x7E	; 126
    6260:	e0 68       	ori	r30, 0x80	; 128
    6262:	44 27       	eor	r20, r20
    6264:	ee 0f       	add	r30, r30
    6266:	44 1f       	adc	r20, r20
    6268:	fa 95       	dec	r31
    626a:	e1 f7       	brne	.-8      	; 0x6264 <exp+0x42>
    626c:	41 95       	neg	r20
    626e:	55 0b       	sbc	r21, r21
    6270:	06 d0       	rcall	.+12     	; 0x627e <ldexp>
    6272:	0f 90       	pop	r0
    6274:	07 fe       	sbrs	r0, 7
    6276:	3d cb       	rjmp	.-2438   	; 0x58f2 <inverse>
    6278:	08 95       	ret
    627a:	88 ca       	rjmp	.-2800   	; 0x578c <__fp_inf>
    627c:	ad cb       	rjmp	.-2214   	; 0x59d8 <__fp_mpack>

0000627e <ldexp>:
    627e:	14 db       	rcall	.-2520   	; 0x58a8 <__fp_splitA>
    6280:	e8 f3       	brcs	.-6      	; 0x627c <exp+0x5a>
    6282:	99 23       	and	r25, r25
    6284:	d9 f3       	breq	.-10     	; 0x627c <exp+0x5a>
    6286:	94 0f       	add	r25, r20
    6288:	51 1d       	adc	r21, r1
    628a:	bb f3       	brvs	.-18     	; 0x627a <exp+0x58>
    628c:	91 50       	subi	r25, 0x01	; 1
    628e:	50 40       	sbci	r21, 0x00	; 0
    6290:	94 f0       	brlt	.+36     	; 0x62b6 <ldexp+0x38>
    6292:	59 f0       	breq	.+22     	; 0x62aa <ldexp+0x2c>
    6294:	88 23       	and	r24, r24
    6296:	32 f0       	brmi	.+12     	; 0x62a4 <ldexp+0x26>
    6298:	66 0f       	add	r22, r22
    629a:	77 1f       	adc	r23, r23
    629c:	88 1f       	adc	r24, r24
    629e:	91 50       	subi	r25, 0x01	; 1
    62a0:	50 40       	sbci	r21, 0x00	; 0
    62a2:	c1 f7       	brne	.-16     	; 0x6294 <ldexp+0x16>
    62a4:	9e 3f       	cpi	r25, 0xFE	; 254
    62a6:	51 05       	cpc	r21, r1
    62a8:	44 f7       	brge	.-48     	; 0x627a <exp+0x58>
    62aa:	88 0f       	add	r24, r24
    62ac:	91 1d       	adc	r25, r1
    62ae:	96 95       	lsr	r25
    62b0:	87 95       	ror	r24
    62b2:	97 f9       	bld	r25, 7
    62b4:	08 95       	ret
    62b6:	5f 3f       	cpi	r21, 0xFF	; 255
    62b8:	ac f0       	brlt	.+42     	; 0x62e4 <ldexp+0x66>
    62ba:	98 3e       	cpi	r25, 0xE8	; 232
    62bc:	9c f0       	brlt	.+38     	; 0x62e4 <ldexp+0x66>
    62be:	bb 27       	eor	r27, r27
    62c0:	86 95       	lsr	r24
    62c2:	77 95       	ror	r23
    62c4:	67 95       	ror	r22
    62c6:	b7 95       	ror	r27
    62c8:	08 f4       	brcc	.+2      	; 0x62cc <ldexp+0x4e>
    62ca:	b1 60       	ori	r27, 0x01	; 1
    62cc:	93 95       	inc	r25
    62ce:	c1 f7       	brne	.-16     	; 0x62c0 <ldexp+0x42>
    62d0:	bb 0f       	add	r27, r27
    62d2:	58 f7       	brcc	.-42     	; 0x62aa <ldexp+0x2c>
    62d4:	11 f4       	brne	.+4      	; 0x62da <ldexp+0x5c>
    62d6:	60 ff       	sbrs	r22, 0
    62d8:	e8 cf       	rjmp	.-48     	; 0x62aa <ldexp+0x2c>
    62da:	6f 5f       	subi	r22, 0xFF	; 255
    62dc:	7f 4f       	sbci	r23, 0xFF	; 255
    62de:	8f 4f       	sbci	r24, 0xFF	; 255
    62e0:	9f 4f       	sbci	r25, 0xFF	; 255
    62e2:	e3 cf       	rjmp	.-58     	; 0x62aa <ldexp+0x2c>
    62e4:	fc ca       	rjmp	.-2568   	; 0x58de <__fp_szero>
    62e6:	0e f0       	brts	.+2      	; 0x62ea <ldexp+0x6c>
    62e8:	77 cb       	rjmp	.-2322   	; 0x59d8 <__fp_mpack>
    62ea:	56 ca       	rjmp	.-2900   	; 0x5798 <__fp_nan>
    62ec:	68 94       	set
    62ee:	4e ca       	rjmp	.-2916   	; 0x578c <__fp_inf>

000062f0 <log>:
    62f0:	db da       	rcall	.-2634   	; 0x58a8 <__fp_splitA>
    62f2:	c8 f3       	brcs	.-14     	; 0x62e6 <ldexp+0x68>
    62f4:	99 23       	and	r25, r25
    62f6:	d1 f3       	breq	.-12     	; 0x62ec <ldexp+0x6e>
    62f8:	c6 f3       	brts	.-16     	; 0x62ea <ldexp+0x6c>
    62fa:	df 93       	push	r29
    62fc:	cf 93       	push	r28
    62fe:	1f 93       	push	r17
    6300:	0f 93       	push	r16
    6302:	ff 92       	push	r15
    6304:	c9 2f       	mov	r28, r25
    6306:	dd 27       	eor	r29, r29
    6308:	88 23       	and	r24, r24
    630a:	2a f0       	brmi	.+10     	; 0x6316 <log+0x26>
    630c:	21 97       	sbiw	r28, 0x01	; 1
    630e:	66 0f       	add	r22, r22
    6310:	77 1f       	adc	r23, r23
    6312:	88 1f       	adc	r24, r24
    6314:	da f7       	brpl	.-10     	; 0x630c <log+0x1c>
    6316:	20 e0       	ldi	r18, 0x00	; 0
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	40 e8       	ldi	r20, 0x80	; 128
    631c:	5f eb       	ldi	r21, 0xBF	; 191
    631e:	9f e3       	ldi	r25, 0x3F	; 63
    6320:	88 39       	cpi	r24, 0x98	; 152
    6322:	20 f0       	brcs	.+8      	; 0x632c <log+0x3c>
    6324:	80 3e       	cpi	r24, 0xE0	; 224
    6326:	30 f0       	brcs	.+12     	; 0x6334 <log+0x44>
    6328:	21 96       	adiw	r28, 0x01	; 1
    632a:	8f 77       	andi	r24, 0x7F	; 127
    632c:	68 d8       	rcall	.-3888   	; 0x53fe <__addsf3>
    632e:	ec e3       	ldi	r30, 0x3C	; 60
    6330:	f1 e0       	ldi	r31, 0x01	; 1
    6332:	03 c0       	rjmp	.+6      	; 0x633a <log+0x4a>
    6334:	64 d8       	rcall	.-3896   	; 0x53fe <__addsf3>
    6336:	e9 e6       	ldi	r30, 0x69	; 105
    6338:	f1 e0       	ldi	r31, 0x01	; 1
    633a:	31 da       	rcall	.-2974   	; 0x579e <__fp_powser>
    633c:	8b 01       	movw	r16, r22
    633e:	be 01       	movw	r22, r28
    6340:	ec 01       	movw	r28, r24
    6342:	fb 2e       	mov	r15, r27
    6344:	6f 57       	subi	r22, 0x7F	; 127
    6346:	71 09       	sbc	r23, r1
    6348:	75 95       	asr	r23
    634a:	77 1f       	adc	r23, r23
    634c:	88 0b       	sbc	r24, r24
    634e:	99 0b       	sbc	r25, r25
    6350:	be d9       	rcall	.-3204   	; 0x56ce <__floatsisf>
    6352:	28 e1       	ldi	r18, 0x18	; 24
    6354:	32 e7       	ldi	r19, 0x72	; 114
    6356:	41 e3       	ldi	r20, 0x31	; 49
    6358:	5f e3       	ldi	r21, 0x3F	; 63
    635a:	de da       	rcall	.-2628   	; 0x5918 <__mulsf3x>
    635c:	af 2d       	mov	r26, r15
    635e:	98 01       	movw	r18, r16
    6360:	ae 01       	movw	r20, r28
    6362:	ff 90       	pop	r15
    6364:	0f 91       	pop	r16
    6366:	1f 91       	pop	r17
    6368:	cf 91       	pop	r28
    636a:	df 91       	pop	r29
    636c:	59 d8       	rcall	.-3918   	; 0x5420 <__addsf3x>
    636e:	72 ca       	rjmp	.-2844   	; 0x5854 <__fp_round>

00006370 <modf>:
    6370:	fa 01       	movw	r30, r20
    6372:	dc 01       	movw	r26, r24
    6374:	aa 0f       	add	r26, r26
    6376:	bb 1f       	adc	r27, r27
    6378:	9b 01       	movw	r18, r22
    637a:	ac 01       	movw	r20, r24
    637c:	bf 57       	subi	r27, 0x7F	; 127
    637e:	28 f4       	brcc	.+10     	; 0x638a <modf+0x1a>
    6380:	22 27       	eor	r18, r18
    6382:	33 27       	eor	r19, r19
    6384:	44 27       	eor	r20, r20
    6386:	50 78       	andi	r21, 0x80	; 128
    6388:	1f c0       	rjmp	.+62     	; 0x63c8 <modf+0x58>
    638a:	b7 51       	subi	r27, 0x17	; 23
    638c:	88 f4       	brcc	.+34     	; 0x63b0 <modf+0x40>
    638e:	ab 2f       	mov	r26, r27
    6390:	00 24       	eor	r0, r0
    6392:	46 95       	lsr	r20
    6394:	37 95       	ror	r19
    6396:	27 95       	ror	r18
    6398:	01 1c       	adc	r0, r1
    639a:	a3 95       	inc	r26
    639c:	d2 f3       	brmi	.-12     	; 0x6392 <modf+0x22>
    639e:	00 20       	and	r0, r0
    63a0:	69 f0       	breq	.+26     	; 0x63bc <modf+0x4c>
    63a2:	22 0f       	add	r18, r18
    63a4:	33 1f       	adc	r19, r19
    63a6:	44 1f       	adc	r20, r20
    63a8:	b3 95       	inc	r27
    63aa:	da f3       	brmi	.-10     	; 0x63a2 <modf+0x32>
    63ac:	0d d0       	rcall	.+26     	; 0x63c8 <modf+0x58>
    63ae:	26 c8       	rjmp	.-4020   	; 0x53fc <__subsf3>
    63b0:	61 30       	cpi	r22, 0x01	; 1
    63b2:	71 05       	cpc	r23, r1
    63b4:	a0 e8       	ldi	r26, 0x80	; 128
    63b6:	8a 07       	cpc	r24, r26
    63b8:	b9 46       	sbci	r27, 0x69	; 105
    63ba:	30 f4       	brcc	.+12     	; 0x63c8 <modf+0x58>
    63bc:	9b 01       	movw	r18, r22
    63be:	ac 01       	movw	r20, r24
    63c0:	66 27       	eor	r22, r22
    63c2:	77 27       	eor	r23, r23
    63c4:	88 27       	eor	r24, r24
    63c6:	90 78       	andi	r25, 0x80	; 128
    63c8:	30 96       	adiw	r30, 0x00	; 0
    63ca:	21 f0       	breq	.+8      	; 0x63d4 <modf+0x64>
    63cc:	20 83       	st	Z, r18
    63ce:	31 83       	std	Z+1, r19	; 0x01
    63d0:	42 83       	std	Z+2, r20	; 0x02
    63d2:	53 83       	std	Z+3, r21	; 0x03
    63d4:	08 95       	ret

000063d6 <__mulsi3>:
    63d6:	db 01       	movw	r26, r22
    63d8:	8f 93       	push	r24
    63da:	9f 93       	push	r25
    63dc:	0e 94 31 32 	call	0x6462	; 0x6462 <__muluhisi3>
    63e0:	bf 91       	pop	r27
    63e2:	af 91       	pop	r26
    63e4:	a2 9f       	mul	r26, r18
    63e6:	80 0d       	add	r24, r0
    63e8:	91 1d       	adc	r25, r1
    63ea:	a3 9f       	mul	r26, r19
    63ec:	90 0d       	add	r25, r0
    63ee:	b2 9f       	mul	r27, r18
    63f0:	90 0d       	add	r25, r0
    63f2:	11 24       	eor	r1, r1
    63f4:	08 95       	ret

000063f6 <__divmodhi4>:
    63f6:	97 fb       	bst	r25, 7
    63f8:	07 2e       	mov	r0, r23
    63fa:	16 f4       	brtc	.+4      	; 0x6400 <__divmodhi4+0xa>
    63fc:	00 94       	com	r0
    63fe:	07 d0       	rcall	.+14     	; 0x640e <__divmodhi4_neg1>
    6400:	77 fd       	sbrc	r23, 7
    6402:	09 d0       	rcall	.+18     	; 0x6416 <__divmodhi4_neg2>
    6404:	0e 94 73 32 	call	0x64e6	; 0x64e6 <__udivmodhi4>
    6408:	07 fc       	sbrc	r0, 7
    640a:	05 d0       	rcall	.+10     	; 0x6416 <__divmodhi4_neg2>
    640c:	3e f4       	brtc	.+14     	; 0x641c <__divmodhi4_exit>

0000640e <__divmodhi4_neg1>:
    640e:	90 95       	com	r25
    6410:	81 95       	neg	r24
    6412:	9f 4f       	sbci	r25, 0xFF	; 255
    6414:	08 95       	ret

00006416 <__divmodhi4_neg2>:
    6416:	70 95       	com	r23
    6418:	61 95       	neg	r22
    641a:	7f 4f       	sbci	r23, 0xFF	; 255

0000641c <__divmodhi4_exit>:
    641c:	08 95       	ret

0000641e <__udivmodsi4>:
    641e:	a1 e2       	ldi	r26, 0x21	; 33
    6420:	1a 2e       	mov	r1, r26
    6422:	aa 1b       	sub	r26, r26
    6424:	bb 1b       	sub	r27, r27
    6426:	fd 01       	movw	r30, r26
    6428:	0d c0       	rjmp	.+26     	; 0x6444 <__udivmodsi4_ep>

0000642a <__udivmodsi4_loop>:
    642a:	aa 1f       	adc	r26, r26
    642c:	bb 1f       	adc	r27, r27
    642e:	ee 1f       	adc	r30, r30
    6430:	ff 1f       	adc	r31, r31
    6432:	a2 17       	cp	r26, r18
    6434:	b3 07       	cpc	r27, r19
    6436:	e4 07       	cpc	r30, r20
    6438:	f5 07       	cpc	r31, r21
    643a:	20 f0       	brcs	.+8      	; 0x6444 <__udivmodsi4_ep>
    643c:	a2 1b       	sub	r26, r18
    643e:	b3 0b       	sbc	r27, r19
    6440:	e4 0b       	sbc	r30, r20
    6442:	f5 0b       	sbc	r31, r21

00006444 <__udivmodsi4_ep>:
    6444:	66 1f       	adc	r22, r22
    6446:	77 1f       	adc	r23, r23
    6448:	88 1f       	adc	r24, r24
    644a:	99 1f       	adc	r25, r25
    644c:	1a 94       	dec	r1
    644e:	69 f7       	brne	.-38     	; 0x642a <__udivmodsi4_loop>
    6450:	60 95       	com	r22
    6452:	70 95       	com	r23
    6454:	80 95       	com	r24
    6456:	90 95       	com	r25
    6458:	9b 01       	movw	r18, r22
    645a:	ac 01       	movw	r20, r24
    645c:	bd 01       	movw	r22, r26
    645e:	cf 01       	movw	r24, r30
    6460:	08 95       	ret

00006462 <__muluhisi3>:
    6462:	0e 94 87 32 	call	0x650e	; 0x650e <__umulhisi3>
    6466:	a5 9f       	mul	r26, r21
    6468:	90 0d       	add	r25, r0
    646a:	b4 9f       	mul	r27, r20
    646c:	90 0d       	add	r25, r0
    646e:	a4 9f       	mul	r26, r20
    6470:	80 0d       	add	r24, r0
    6472:	91 1d       	adc	r25, r1
    6474:	11 24       	eor	r1, r1
    6476:	08 95       	ret

00006478 <__prologue_saves__>:
    6478:	2f 92       	push	r2
    647a:	3f 92       	push	r3
    647c:	4f 92       	push	r4
    647e:	5f 92       	push	r5
    6480:	6f 92       	push	r6
    6482:	7f 92       	push	r7
    6484:	8f 92       	push	r8
    6486:	9f 92       	push	r9
    6488:	af 92       	push	r10
    648a:	bf 92       	push	r11
    648c:	cf 92       	push	r12
    648e:	df 92       	push	r13
    6490:	ef 92       	push	r14
    6492:	ff 92       	push	r15
    6494:	0f 93       	push	r16
    6496:	1f 93       	push	r17
    6498:	cf 93       	push	r28
    649a:	df 93       	push	r29
    649c:	cd b7       	in	r28, 0x3d	; 61
    649e:	de b7       	in	r29, 0x3e	; 62
    64a0:	ca 1b       	sub	r28, r26
    64a2:	db 0b       	sbc	r29, r27
    64a4:	0f b6       	in	r0, 0x3f	; 63
    64a6:	f8 94       	cli
    64a8:	de bf       	out	0x3e, r29	; 62
    64aa:	0f be       	out	0x3f, r0	; 63
    64ac:	cd bf       	out	0x3d, r28	; 61
    64ae:	09 94       	ijmp

000064b0 <__epilogue_restores__>:
    64b0:	2a 88       	ldd	r2, Y+18	; 0x12
    64b2:	39 88       	ldd	r3, Y+17	; 0x11
    64b4:	48 88       	ldd	r4, Y+16	; 0x10
    64b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    64b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    64ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    64bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    64be:	9b 84       	ldd	r9, Y+11	; 0x0b
    64c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    64c2:	b9 84       	ldd	r11, Y+9	; 0x09
    64c4:	c8 84       	ldd	r12, Y+8	; 0x08
    64c6:	df 80       	ldd	r13, Y+7	; 0x07
    64c8:	ee 80       	ldd	r14, Y+6	; 0x06
    64ca:	fd 80       	ldd	r15, Y+5	; 0x05
    64cc:	0c 81       	ldd	r16, Y+4	; 0x04
    64ce:	1b 81       	ldd	r17, Y+3	; 0x03
    64d0:	aa 81       	ldd	r26, Y+2	; 0x02
    64d2:	b9 81       	ldd	r27, Y+1	; 0x01
    64d4:	ce 0f       	add	r28, r30
    64d6:	d1 1d       	adc	r29, r1
    64d8:	0f b6       	in	r0, 0x3f	; 63
    64da:	f8 94       	cli
    64dc:	de bf       	out	0x3e, r29	; 62
    64de:	0f be       	out	0x3f, r0	; 63
    64e0:	cd bf       	out	0x3d, r28	; 61
    64e2:	ed 01       	movw	r28, r26
    64e4:	08 95       	ret

000064e6 <__udivmodhi4>:
    64e6:	aa 1b       	sub	r26, r26
    64e8:	bb 1b       	sub	r27, r27
    64ea:	51 e1       	ldi	r21, 0x11	; 17
    64ec:	07 c0       	rjmp	.+14     	; 0x64fc <__udivmodhi4_ep>

000064ee <__udivmodhi4_loop>:
    64ee:	aa 1f       	adc	r26, r26
    64f0:	bb 1f       	adc	r27, r27
    64f2:	a6 17       	cp	r26, r22
    64f4:	b7 07       	cpc	r27, r23
    64f6:	10 f0       	brcs	.+4      	; 0x64fc <__udivmodhi4_ep>
    64f8:	a6 1b       	sub	r26, r22
    64fa:	b7 0b       	sbc	r27, r23

000064fc <__udivmodhi4_ep>:
    64fc:	88 1f       	adc	r24, r24
    64fe:	99 1f       	adc	r25, r25
    6500:	5a 95       	dec	r21
    6502:	a9 f7       	brne	.-22     	; 0x64ee <__udivmodhi4_loop>
    6504:	80 95       	com	r24
    6506:	90 95       	com	r25
    6508:	bc 01       	movw	r22, r24
    650a:	cd 01       	movw	r24, r26
    650c:	08 95       	ret

0000650e <__umulhisi3>:
    650e:	a2 9f       	mul	r26, r18
    6510:	b0 01       	movw	r22, r0
    6512:	b3 9f       	mul	r27, r19
    6514:	c0 01       	movw	r24, r0
    6516:	a3 9f       	mul	r26, r19
    6518:	70 0d       	add	r23, r0
    651a:	81 1d       	adc	r24, r1
    651c:	11 24       	eor	r1, r1
    651e:	91 1d       	adc	r25, r1
    6520:	b2 9f       	mul	r27, r18
    6522:	70 0d       	add	r23, r0
    6524:	81 1d       	adc	r24, r1
    6526:	11 24       	eor	r1, r1
    6528:	91 1d       	adc	r25, r1
    652a:	08 95       	ret

0000652c <malloc>:
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	82 30       	cpi	r24, 0x02	; 2
    6532:	91 05       	cpc	r25, r1
    6534:	10 f4       	brcc	.+4      	; 0x653a <malloc+0xe>
    6536:	82 e0       	ldi	r24, 0x02	; 2
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	e0 91 a4 04 	lds	r30, 0x04A4
    653e:	f0 91 a5 04 	lds	r31, 0x04A5
    6542:	20 e0       	ldi	r18, 0x00	; 0
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	a0 e0       	ldi	r26, 0x00	; 0
    6548:	b0 e0       	ldi	r27, 0x00	; 0
    654a:	30 97       	sbiw	r30, 0x00	; 0
    654c:	39 f1       	breq	.+78     	; 0x659c <malloc+0x70>
    654e:	40 81       	ld	r20, Z
    6550:	51 81       	ldd	r21, Z+1	; 0x01
    6552:	48 17       	cp	r20, r24
    6554:	59 07       	cpc	r21, r25
    6556:	b8 f0       	brcs	.+46     	; 0x6586 <malloc+0x5a>
    6558:	48 17       	cp	r20, r24
    655a:	59 07       	cpc	r21, r25
    655c:	71 f4       	brne	.+28     	; 0x657a <malloc+0x4e>
    655e:	82 81       	ldd	r24, Z+2	; 0x02
    6560:	93 81       	ldd	r25, Z+3	; 0x03
    6562:	10 97       	sbiw	r26, 0x00	; 0
    6564:	29 f0       	breq	.+10     	; 0x6570 <malloc+0x44>
    6566:	13 96       	adiw	r26, 0x03	; 3
    6568:	9c 93       	st	X, r25
    656a:	8e 93       	st	-X, r24
    656c:	12 97       	sbiw	r26, 0x02	; 2
    656e:	2c c0       	rjmp	.+88     	; 0x65c8 <malloc+0x9c>
    6570:	90 93 a5 04 	sts	0x04A5, r25
    6574:	80 93 a4 04 	sts	0x04A4, r24
    6578:	27 c0       	rjmp	.+78     	; 0x65c8 <malloc+0x9c>
    657a:	21 15       	cp	r18, r1
    657c:	31 05       	cpc	r19, r1
    657e:	31 f0       	breq	.+12     	; 0x658c <malloc+0x60>
    6580:	42 17       	cp	r20, r18
    6582:	53 07       	cpc	r21, r19
    6584:	18 f0       	brcs	.+6      	; 0x658c <malloc+0x60>
    6586:	a9 01       	movw	r20, r18
    6588:	db 01       	movw	r26, r22
    658a:	01 c0       	rjmp	.+2      	; 0x658e <malloc+0x62>
    658c:	ef 01       	movw	r28, r30
    658e:	9a 01       	movw	r18, r20
    6590:	bd 01       	movw	r22, r26
    6592:	df 01       	movw	r26, r30
    6594:	02 80       	ldd	r0, Z+2	; 0x02
    6596:	f3 81       	ldd	r31, Z+3	; 0x03
    6598:	e0 2d       	mov	r30, r0
    659a:	d7 cf       	rjmp	.-82     	; 0x654a <malloc+0x1e>
    659c:	21 15       	cp	r18, r1
    659e:	31 05       	cpc	r19, r1
    65a0:	f9 f0       	breq	.+62     	; 0x65e0 <malloc+0xb4>
    65a2:	28 1b       	sub	r18, r24
    65a4:	39 0b       	sbc	r19, r25
    65a6:	24 30       	cpi	r18, 0x04	; 4
    65a8:	31 05       	cpc	r19, r1
    65aa:	80 f4       	brcc	.+32     	; 0x65cc <malloc+0xa0>
    65ac:	8a 81       	ldd	r24, Y+2	; 0x02
    65ae:	9b 81       	ldd	r25, Y+3	; 0x03
    65b0:	61 15       	cp	r22, r1
    65b2:	71 05       	cpc	r23, r1
    65b4:	21 f0       	breq	.+8      	; 0x65be <malloc+0x92>
    65b6:	fb 01       	movw	r30, r22
    65b8:	93 83       	std	Z+3, r25	; 0x03
    65ba:	82 83       	std	Z+2, r24	; 0x02
    65bc:	04 c0       	rjmp	.+8      	; 0x65c6 <malloc+0x9a>
    65be:	90 93 a5 04 	sts	0x04A5, r25
    65c2:	80 93 a4 04 	sts	0x04A4, r24
    65c6:	fe 01       	movw	r30, r28
    65c8:	32 96       	adiw	r30, 0x02	; 2
    65ca:	44 c0       	rjmp	.+136    	; 0x6654 <malloc+0x128>
    65cc:	fe 01       	movw	r30, r28
    65ce:	e2 0f       	add	r30, r18
    65d0:	f3 1f       	adc	r31, r19
    65d2:	81 93       	st	Z+, r24
    65d4:	91 93       	st	Z+, r25
    65d6:	22 50       	subi	r18, 0x02	; 2
    65d8:	31 09       	sbc	r19, r1
    65da:	39 83       	std	Y+1, r19	; 0x01
    65dc:	28 83       	st	Y, r18
    65de:	3a c0       	rjmp	.+116    	; 0x6654 <malloc+0x128>
    65e0:	20 91 a2 04 	lds	r18, 0x04A2
    65e4:	30 91 a3 04 	lds	r19, 0x04A3
    65e8:	23 2b       	or	r18, r19
    65ea:	41 f4       	brne	.+16     	; 0x65fc <malloc+0xd0>
    65ec:	20 91 1f 01 	lds	r18, 0x011F
    65f0:	30 91 20 01 	lds	r19, 0x0120
    65f4:	30 93 a3 04 	sts	0x04A3, r19
    65f8:	20 93 a2 04 	sts	0x04A2, r18
    65fc:	20 91 1d 01 	lds	r18, 0x011D
    6600:	30 91 1e 01 	lds	r19, 0x011E
    6604:	21 15       	cp	r18, r1
    6606:	31 05       	cpc	r19, r1
    6608:	41 f4       	brne	.+16     	; 0x661a <malloc+0xee>
    660a:	2d b7       	in	r18, 0x3d	; 61
    660c:	3e b7       	in	r19, 0x3e	; 62
    660e:	40 91 21 01 	lds	r20, 0x0121
    6612:	50 91 22 01 	lds	r21, 0x0122
    6616:	24 1b       	sub	r18, r20
    6618:	35 0b       	sbc	r19, r21
    661a:	e0 91 a2 04 	lds	r30, 0x04A2
    661e:	f0 91 a3 04 	lds	r31, 0x04A3
    6622:	e2 17       	cp	r30, r18
    6624:	f3 07       	cpc	r31, r19
    6626:	a0 f4       	brcc	.+40     	; 0x6650 <malloc+0x124>
    6628:	2e 1b       	sub	r18, r30
    662a:	3f 0b       	sbc	r19, r31
    662c:	28 17       	cp	r18, r24
    662e:	39 07       	cpc	r19, r25
    6630:	78 f0       	brcs	.+30     	; 0x6650 <malloc+0x124>
    6632:	ac 01       	movw	r20, r24
    6634:	4e 5f       	subi	r20, 0xFE	; 254
    6636:	5f 4f       	sbci	r21, 0xFF	; 255
    6638:	24 17       	cp	r18, r20
    663a:	35 07       	cpc	r19, r21
    663c:	48 f0       	brcs	.+18     	; 0x6650 <malloc+0x124>
    663e:	4e 0f       	add	r20, r30
    6640:	5f 1f       	adc	r21, r31
    6642:	50 93 a3 04 	sts	0x04A3, r21
    6646:	40 93 a2 04 	sts	0x04A2, r20
    664a:	81 93       	st	Z+, r24
    664c:	91 93       	st	Z+, r25
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <malloc+0x128>
    6650:	e0 e0       	ldi	r30, 0x00	; 0
    6652:	f0 e0       	ldi	r31, 0x00	; 0
    6654:	cf 01       	movw	r24, r30
    6656:	df 91       	pop	r29
    6658:	cf 91       	pop	r28
    665a:	08 95       	ret

0000665c <free>:
    665c:	cf 93       	push	r28
    665e:	df 93       	push	r29
    6660:	00 97       	sbiw	r24, 0x00	; 0
    6662:	09 f4       	brne	.+2      	; 0x6666 <free+0xa>
    6664:	87 c0       	rjmp	.+270    	; 0x6774 <free+0x118>
    6666:	fc 01       	movw	r30, r24
    6668:	32 97       	sbiw	r30, 0x02	; 2
    666a:	13 82       	std	Z+3, r1	; 0x03
    666c:	12 82       	std	Z+2, r1	; 0x02
    666e:	c0 91 a4 04 	lds	r28, 0x04A4
    6672:	d0 91 a5 04 	lds	r29, 0x04A5
    6676:	20 97       	sbiw	r28, 0x00	; 0
    6678:	81 f4       	brne	.+32     	; 0x669a <free+0x3e>
    667a:	20 81       	ld	r18, Z
    667c:	31 81       	ldd	r19, Z+1	; 0x01
    667e:	28 0f       	add	r18, r24
    6680:	39 1f       	adc	r19, r25
    6682:	80 91 a2 04 	lds	r24, 0x04A2
    6686:	90 91 a3 04 	lds	r25, 0x04A3
    668a:	82 17       	cp	r24, r18
    668c:	93 07       	cpc	r25, r19
    668e:	79 f5       	brne	.+94     	; 0x66ee <free+0x92>
    6690:	f0 93 a3 04 	sts	0x04A3, r31
    6694:	e0 93 a2 04 	sts	0x04A2, r30
    6698:	6d c0       	rjmp	.+218    	; 0x6774 <free+0x118>
    669a:	de 01       	movw	r26, r28
    669c:	20 e0       	ldi	r18, 0x00	; 0
    669e:	30 e0       	ldi	r19, 0x00	; 0
    66a0:	ae 17       	cp	r26, r30
    66a2:	bf 07       	cpc	r27, r31
    66a4:	50 f4       	brcc	.+20     	; 0x66ba <free+0x5e>
    66a6:	12 96       	adiw	r26, 0x02	; 2
    66a8:	4d 91       	ld	r20, X+
    66aa:	5c 91       	ld	r21, X
    66ac:	13 97       	sbiw	r26, 0x03	; 3
    66ae:	9d 01       	movw	r18, r26
    66b0:	41 15       	cp	r20, r1
    66b2:	51 05       	cpc	r21, r1
    66b4:	09 f1       	breq	.+66     	; 0x66f8 <free+0x9c>
    66b6:	da 01       	movw	r26, r20
    66b8:	f3 cf       	rjmp	.-26     	; 0x66a0 <free+0x44>
    66ba:	b3 83       	std	Z+3, r27	; 0x03
    66bc:	a2 83       	std	Z+2, r26	; 0x02
    66be:	40 81       	ld	r20, Z
    66c0:	51 81       	ldd	r21, Z+1	; 0x01
    66c2:	84 0f       	add	r24, r20
    66c4:	95 1f       	adc	r25, r21
    66c6:	8a 17       	cp	r24, r26
    66c8:	9b 07       	cpc	r25, r27
    66ca:	71 f4       	brne	.+28     	; 0x66e8 <free+0x8c>
    66cc:	8d 91       	ld	r24, X+
    66ce:	9c 91       	ld	r25, X
    66d0:	11 97       	sbiw	r26, 0x01	; 1
    66d2:	84 0f       	add	r24, r20
    66d4:	95 1f       	adc	r25, r21
    66d6:	02 96       	adiw	r24, 0x02	; 2
    66d8:	91 83       	std	Z+1, r25	; 0x01
    66da:	80 83       	st	Z, r24
    66dc:	12 96       	adiw	r26, 0x02	; 2
    66de:	8d 91       	ld	r24, X+
    66e0:	9c 91       	ld	r25, X
    66e2:	13 97       	sbiw	r26, 0x03	; 3
    66e4:	93 83       	std	Z+3, r25	; 0x03
    66e6:	82 83       	std	Z+2, r24	; 0x02
    66e8:	21 15       	cp	r18, r1
    66ea:	31 05       	cpc	r19, r1
    66ec:	29 f4       	brne	.+10     	; 0x66f8 <free+0x9c>
    66ee:	f0 93 a5 04 	sts	0x04A5, r31
    66f2:	e0 93 a4 04 	sts	0x04A4, r30
    66f6:	3e c0       	rjmp	.+124    	; 0x6774 <free+0x118>
    66f8:	d9 01       	movw	r26, r18
    66fa:	13 96       	adiw	r26, 0x03	; 3
    66fc:	fc 93       	st	X, r31
    66fe:	ee 93       	st	-X, r30
    6700:	12 97       	sbiw	r26, 0x02	; 2
    6702:	4d 91       	ld	r20, X+
    6704:	5d 91       	ld	r21, X+
    6706:	a4 0f       	add	r26, r20
    6708:	b5 1f       	adc	r27, r21
    670a:	ea 17       	cp	r30, r26
    670c:	fb 07       	cpc	r31, r27
    670e:	79 f4       	brne	.+30     	; 0x672e <free+0xd2>
    6710:	80 81       	ld	r24, Z
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	84 0f       	add	r24, r20
    6716:	95 1f       	adc	r25, r21
    6718:	02 96       	adiw	r24, 0x02	; 2
    671a:	d9 01       	movw	r26, r18
    671c:	11 96       	adiw	r26, 0x01	; 1
    671e:	9c 93       	st	X, r25
    6720:	8e 93       	st	-X, r24
    6722:	82 81       	ldd	r24, Z+2	; 0x02
    6724:	93 81       	ldd	r25, Z+3	; 0x03
    6726:	13 96       	adiw	r26, 0x03	; 3
    6728:	9c 93       	st	X, r25
    672a:	8e 93       	st	-X, r24
    672c:	12 97       	sbiw	r26, 0x02	; 2
    672e:	e0 e0       	ldi	r30, 0x00	; 0
    6730:	f0 e0       	ldi	r31, 0x00	; 0
    6732:	8a 81       	ldd	r24, Y+2	; 0x02
    6734:	9b 81       	ldd	r25, Y+3	; 0x03
    6736:	00 97       	sbiw	r24, 0x00	; 0
    6738:	19 f0       	breq	.+6      	; 0x6740 <free+0xe4>
    673a:	fe 01       	movw	r30, r28
    673c:	ec 01       	movw	r28, r24
    673e:	f9 cf       	rjmp	.-14     	; 0x6732 <free+0xd6>
    6740:	ce 01       	movw	r24, r28
    6742:	02 96       	adiw	r24, 0x02	; 2
    6744:	28 81       	ld	r18, Y
    6746:	39 81       	ldd	r19, Y+1	; 0x01
    6748:	82 0f       	add	r24, r18
    674a:	93 1f       	adc	r25, r19
    674c:	20 91 a2 04 	lds	r18, 0x04A2
    6750:	30 91 a3 04 	lds	r19, 0x04A3
    6754:	28 17       	cp	r18, r24
    6756:	39 07       	cpc	r19, r25
    6758:	69 f4       	brne	.+26     	; 0x6774 <free+0x118>
    675a:	30 97       	sbiw	r30, 0x00	; 0
    675c:	29 f4       	brne	.+10     	; 0x6768 <free+0x10c>
    675e:	10 92 a5 04 	sts	0x04A5, r1
    6762:	10 92 a4 04 	sts	0x04A4, r1
    6766:	02 c0       	rjmp	.+4      	; 0x676c <free+0x110>
    6768:	13 82       	std	Z+3, r1	; 0x03
    676a:	12 82       	std	Z+2, r1	; 0x02
    676c:	d0 93 a3 04 	sts	0x04A3, r29
    6770:	c0 93 a2 04 	sts	0x04A2, r28
    6774:	df 91       	pop	r29
    6776:	cf 91       	pop	r28
    6778:	08 95       	ret

0000677a <do_rand>:
    677a:	8f 92       	push	r8
    677c:	9f 92       	push	r9
    677e:	af 92       	push	r10
    6780:	bf 92       	push	r11
    6782:	cf 92       	push	r12
    6784:	df 92       	push	r13
    6786:	ef 92       	push	r14
    6788:	ff 92       	push	r15
    678a:	cf 93       	push	r28
    678c:	df 93       	push	r29
    678e:	ec 01       	movw	r28, r24
    6790:	68 81       	ld	r22, Y
    6792:	79 81       	ldd	r23, Y+1	; 0x01
    6794:	8a 81       	ldd	r24, Y+2	; 0x02
    6796:	9b 81       	ldd	r25, Y+3	; 0x03
    6798:	61 15       	cp	r22, r1
    679a:	71 05       	cpc	r23, r1
    679c:	81 05       	cpc	r24, r1
    679e:	91 05       	cpc	r25, r1
    67a0:	21 f4       	brne	.+8      	; 0x67aa <do_rand+0x30>
    67a2:	64 e2       	ldi	r22, 0x24	; 36
    67a4:	79 ed       	ldi	r23, 0xD9	; 217
    67a6:	8b e5       	ldi	r24, 0x5B	; 91
    67a8:	97 e0       	ldi	r25, 0x07	; 7
    67aa:	2d e1       	ldi	r18, 0x1D	; 29
    67ac:	33 ef       	ldi	r19, 0xF3	; 243
    67ae:	41 e0       	ldi	r20, 0x01	; 1
    67b0:	50 e0       	ldi	r21, 0x00	; 0
    67b2:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <__divmodsi4>
    67b6:	49 01       	movw	r8, r18
    67b8:	5a 01       	movw	r10, r20
    67ba:	9b 01       	movw	r18, r22
    67bc:	ac 01       	movw	r20, r24
    67be:	a7 ea       	ldi	r26, 0xA7	; 167
    67c0:	b1 e4       	ldi	r27, 0x41	; 65
    67c2:	0e 94 31 32 	call	0x6462	; 0x6462 <__muluhisi3>
    67c6:	6b 01       	movw	r12, r22
    67c8:	7c 01       	movw	r14, r24
    67ca:	ac ee       	ldi	r26, 0xEC	; 236
    67cc:	b4 ef       	ldi	r27, 0xF4	; 244
    67ce:	a5 01       	movw	r20, r10
    67d0:	94 01       	movw	r18, r8
    67d2:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <__mulohisi3>
    67d6:	c6 0e       	add	r12, r22
    67d8:	d7 1e       	adc	r13, r23
    67da:	e8 1e       	adc	r14, r24
    67dc:	f9 1e       	adc	r15, r25
    67de:	f7 fe       	sbrs	r15, 7
    67e0:	06 c0       	rjmp	.+12     	; 0x67ee <do_rand+0x74>
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	c8 1a       	sub	r12, r24
    67e6:	d1 08       	sbc	r13, r1
    67e8:	e1 08       	sbc	r14, r1
    67ea:	80 e8       	ldi	r24, 0x80	; 128
    67ec:	f8 0a       	sbc	r15, r24
    67ee:	c8 82       	st	Y, r12
    67f0:	d9 82       	std	Y+1, r13	; 0x01
    67f2:	ea 82       	std	Y+2, r14	; 0x02
    67f4:	fb 82       	std	Y+3, r15	; 0x03
    67f6:	c6 01       	movw	r24, r12
    67f8:	9f 77       	andi	r25, 0x7F	; 127
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	ff 90       	pop	r15
    6800:	ef 90       	pop	r14
    6802:	df 90       	pop	r13
    6804:	cf 90       	pop	r12
    6806:	bf 90       	pop	r11
    6808:	af 90       	pop	r10
    680a:	9f 90       	pop	r9
    680c:	8f 90       	pop	r8
    680e:	08 95       	ret

00006810 <rand_r>:
    6810:	0e 94 bd 33 	call	0x677a	; 0x677a <do_rand>
    6814:	08 95       	ret

00006816 <rand>:
    6816:	83 e2       	ldi	r24, 0x23	; 35
    6818:	91 e0       	ldi	r25, 0x01	; 1
    681a:	0e 94 bd 33 	call	0x677a	; 0x677a <do_rand>
    681e:	08 95       	ret

00006820 <srand>:
    6820:	a0 e0       	ldi	r26, 0x00	; 0
    6822:	b0 e0       	ldi	r27, 0x00	; 0
    6824:	80 93 23 01 	sts	0x0123, r24
    6828:	90 93 24 01 	sts	0x0124, r25
    682c:	a0 93 25 01 	sts	0x0125, r26
    6830:	b0 93 26 01 	sts	0x0126, r27
    6834:	08 95       	ret

00006836 <__ftoa_engine>:
    6836:	28 30       	cpi	r18, 0x08	; 8
    6838:	08 f0       	brcs	.+2      	; 0x683c <__ftoa_engine+0x6>
    683a:	27 e0       	ldi	r18, 0x07	; 7
    683c:	33 27       	eor	r19, r19
    683e:	da 01       	movw	r26, r20
    6840:	99 0f       	add	r25, r25
    6842:	31 1d       	adc	r19, r1
    6844:	87 fd       	sbrc	r24, 7
    6846:	91 60       	ori	r25, 0x01	; 1
    6848:	00 96       	adiw	r24, 0x00	; 0
    684a:	61 05       	cpc	r22, r1
    684c:	71 05       	cpc	r23, r1
    684e:	39 f4       	brne	.+14     	; 0x685e <__ftoa_engine+0x28>
    6850:	32 60       	ori	r19, 0x02	; 2
    6852:	2e 5f       	subi	r18, 0xFE	; 254
    6854:	3d 93       	st	X+, r19
    6856:	30 e3       	ldi	r19, 0x30	; 48
    6858:	2a 95       	dec	r18
    685a:	e1 f7       	brne	.-8      	; 0x6854 <__ftoa_engine+0x1e>
    685c:	08 95       	ret
    685e:	9f 3f       	cpi	r25, 0xFF	; 255
    6860:	30 f0       	brcs	.+12     	; 0x686e <__ftoa_engine+0x38>
    6862:	80 38       	cpi	r24, 0x80	; 128
    6864:	71 05       	cpc	r23, r1
    6866:	61 05       	cpc	r22, r1
    6868:	09 f0       	breq	.+2      	; 0x686c <__ftoa_engine+0x36>
    686a:	3c 5f       	subi	r19, 0xFC	; 252
    686c:	3c 5f       	subi	r19, 0xFC	; 252
    686e:	3d 93       	st	X+, r19
    6870:	91 30       	cpi	r25, 0x01	; 1
    6872:	08 f0       	brcs	.+2      	; 0x6876 <__ftoa_engine+0x40>
    6874:	80 68       	ori	r24, 0x80	; 128
    6876:	91 1d       	adc	r25, r1
    6878:	df 93       	push	r29
    687a:	cf 93       	push	r28
    687c:	1f 93       	push	r17
    687e:	0f 93       	push	r16
    6880:	ff 92       	push	r15
    6882:	ef 92       	push	r14
    6884:	19 2f       	mov	r17, r25
    6886:	98 7f       	andi	r25, 0xF8	; 248
    6888:	96 95       	lsr	r25
    688a:	e9 2f       	mov	r30, r25
    688c:	96 95       	lsr	r25
    688e:	96 95       	lsr	r25
    6890:	e9 0f       	add	r30, r25
    6892:	ff 27       	eor	r31, r31
    6894:	e3 5f       	subi	r30, 0xF3	; 243
    6896:	f9 4f       	sbci	r31, 0xF9	; 249
    6898:	99 27       	eor	r25, r25
    689a:	33 27       	eor	r19, r19
    689c:	ee 24       	eor	r14, r14
    689e:	ff 24       	eor	r15, r15
    68a0:	a7 01       	movw	r20, r14
    68a2:	e7 01       	movw	r28, r14
    68a4:	05 90       	lpm	r0, Z+
    68a6:	08 94       	sec
    68a8:	07 94       	ror	r0
    68aa:	28 f4       	brcc	.+10     	; 0x68b6 <__ftoa_engine+0x80>
    68ac:	36 0f       	add	r19, r22
    68ae:	e7 1e       	adc	r14, r23
    68b0:	f8 1e       	adc	r15, r24
    68b2:	49 1f       	adc	r20, r25
    68b4:	51 1d       	adc	r21, r1
    68b6:	66 0f       	add	r22, r22
    68b8:	77 1f       	adc	r23, r23
    68ba:	88 1f       	adc	r24, r24
    68bc:	99 1f       	adc	r25, r25
    68be:	06 94       	lsr	r0
    68c0:	a1 f7       	brne	.-24     	; 0x68aa <__ftoa_engine+0x74>
    68c2:	05 90       	lpm	r0, Z+
    68c4:	07 94       	ror	r0
    68c6:	28 f4       	brcc	.+10     	; 0x68d2 <__ftoa_engine+0x9c>
    68c8:	e7 0e       	add	r14, r23
    68ca:	f8 1e       	adc	r15, r24
    68cc:	49 1f       	adc	r20, r25
    68ce:	56 1f       	adc	r21, r22
    68d0:	c1 1d       	adc	r28, r1
    68d2:	77 0f       	add	r23, r23
    68d4:	88 1f       	adc	r24, r24
    68d6:	99 1f       	adc	r25, r25
    68d8:	66 1f       	adc	r22, r22
    68da:	06 94       	lsr	r0
    68dc:	a1 f7       	brne	.-24     	; 0x68c6 <__ftoa_engine+0x90>
    68de:	05 90       	lpm	r0, Z+
    68e0:	07 94       	ror	r0
    68e2:	28 f4       	brcc	.+10     	; 0x68ee <__ftoa_engine+0xb8>
    68e4:	f8 0e       	add	r15, r24
    68e6:	49 1f       	adc	r20, r25
    68e8:	56 1f       	adc	r21, r22
    68ea:	c7 1f       	adc	r28, r23
    68ec:	d1 1d       	adc	r29, r1
    68ee:	88 0f       	add	r24, r24
    68f0:	99 1f       	adc	r25, r25
    68f2:	66 1f       	adc	r22, r22
    68f4:	77 1f       	adc	r23, r23
    68f6:	06 94       	lsr	r0
    68f8:	a1 f7       	brne	.-24     	; 0x68e2 <__ftoa_engine+0xac>
    68fa:	05 90       	lpm	r0, Z+
    68fc:	07 94       	ror	r0
    68fe:	20 f4       	brcc	.+8      	; 0x6908 <__ftoa_engine+0xd2>
    6900:	49 0f       	add	r20, r25
    6902:	56 1f       	adc	r21, r22
    6904:	c7 1f       	adc	r28, r23
    6906:	d8 1f       	adc	r29, r24
    6908:	99 0f       	add	r25, r25
    690a:	66 1f       	adc	r22, r22
    690c:	77 1f       	adc	r23, r23
    690e:	88 1f       	adc	r24, r24
    6910:	06 94       	lsr	r0
    6912:	a9 f7       	brne	.-22     	; 0x68fe <__ftoa_engine+0xc8>
    6914:	84 91       	lpm	r24, Z
    6916:	10 95       	com	r17
    6918:	17 70       	andi	r17, 0x07	; 7
    691a:	41 f0       	breq	.+16     	; 0x692c <__ftoa_engine+0xf6>
    691c:	d6 95       	lsr	r29
    691e:	c7 95       	ror	r28
    6920:	57 95       	ror	r21
    6922:	47 95       	ror	r20
    6924:	f7 94       	ror	r15
    6926:	e7 94       	ror	r14
    6928:	1a 95       	dec	r17
    692a:	c1 f7       	brne	.-16     	; 0x691c <__ftoa_engine+0xe6>
    692c:	e3 eb       	ldi	r30, 0xB3	; 179
    692e:	f5 e0       	ldi	r31, 0x05	; 5
    6930:	68 94       	set
    6932:	15 90       	lpm	r1, Z+
    6934:	15 91       	lpm	r17, Z+
    6936:	35 91       	lpm	r19, Z+
    6938:	65 91       	lpm	r22, Z+
    693a:	95 91       	lpm	r25, Z+
    693c:	05 90       	lpm	r0, Z+
    693e:	7f e2       	ldi	r23, 0x2F	; 47
    6940:	73 95       	inc	r23
    6942:	e1 18       	sub	r14, r1
    6944:	f1 0a       	sbc	r15, r17
    6946:	43 0b       	sbc	r20, r19
    6948:	56 0b       	sbc	r21, r22
    694a:	c9 0b       	sbc	r28, r25
    694c:	d0 09       	sbc	r29, r0
    694e:	c0 f7       	brcc	.-16     	; 0x6940 <__ftoa_engine+0x10a>
    6950:	e1 0c       	add	r14, r1
    6952:	f1 1e       	adc	r15, r17
    6954:	43 1f       	adc	r20, r19
    6956:	56 1f       	adc	r21, r22
    6958:	c9 1f       	adc	r28, r25
    695a:	d0 1d       	adc	r29, r0
    695c:	7e f4       	brtc	.+30     	; 0x697c <__ftoa_engine+0x146>
    695e:	70 33       	cpi	r23, 0x30	; 48
    6960:	11 f4       	brne	.+4      	; 0x6966 <__ftoa_engine+0x130>
    6962:	8a 95       	dec	r24
    6964:	e6 cf       	rjmp	.-52     	; 0x6932 <__ftoa_engine+0xfc>
    6966:	e8 94       	clt
    6968:	01 50       	subi	r16, 0x01	; 1
    696a:	30 f0       	brcs	.+12     	; 0x6978 <__ftoa_engine+0x142>
    696c:	08 0f       	add	r16, r24
    696e:	0a f4       	brpl	.+2      	; 0x6972 <__ftoa_engine+0x13c>
    6970:	00 27       	eor	r16, r16
    6972:	02 17       	cp	r16, r18
    6974:	08 f4       	brcc	.+2      	; 0x6978 <__ftoa_engine+0x142>
    6976:	20 2f       	mov	r18, r16
    6978:	23 95       	inc	r18
    697a:	02 2f       	mov	r16, r18
    697c:	7a 33       	cpi	r23, 0x3A	; 58
    697e:	28 f0       	brcs	.+10     	; 0x698a <__ftoa_engine+0x154>
    6980:	79 e3       	ldi	r23, 0x39	; 57
    6982:	7d 93       	st	X+, r23
    6984:	2a 95       	dec	r18
    6986:	e9 f7       	brne	.-6      	; 0x6982 <__ftoa_engine+0x14c>
    6988:	10 c0       	rjmp	.+32     	; 0x69aa <__ftoa_engine+0x174>
    698a:	7d 93       	st	X+, r23
    698c:	2a 95       	dec	r18
    698e:	89 f6       	brne	.-94     	; 0x6932 <__ftoa_engine+0xfc>
    6990:	06 94       	lsr	r0
    6992:	97 95       	ror	r25
    6994:	67 95       	ror	r22
    6996:	37 95       	ror	r19
    6998:	17 95       	ror	r17
    699a:	17 94       	ror	r1
    699c:	e1 18       	sub	r14, r1
    699e:	f1 0a       	sbc	r15, r17
    69a0:	43 0b       	sbc	r20, r19
    69a2:	56 0b       	sbc	r21, r22
    69a4:	c9 0b       	sbc	r28, r25
    69a6:	d0 09       	sbc	r29, r0
    69a8:	98 f0       	brcs	.+38     	; 0x69d0 <__ftoa_engine+0x19a>
    69aa:	23 95       	inc	r18
    69ac:	7e 91       	ld	r23, -X
    69ae:	73 95       	inc	r23
    69b0:	7a 33       	cpi	r23, 0x3A	; 58
    69b2:	08 f0       	brcs	.+2      	; 0x69b6 <__ftoa_engine+0x180>
    69b4:	70 e3       	ldi	r23, 0x30	; 48
    69b6:	7c 93       	st	X, r23
    69b8:	20 13       	cpse	r18, r16
    69ba:	b8 f7       	brcc	.-18     	; 0x69aa <__ftoa_engine+0x174>
    69bc:	7e 91       	ld	r23, -X
    69be:	70 61       	ori	r23, 0x10	; 16
    69c0:	7d 93       	st	X+, r23
    69c2:	30 f0       	brcs	.+12     	; 0x69d0 <__ftoa_engine+0x19a>
    69c4:	83 95       	inc	r24
    69c6:	71 e3       	ldi	r23, 0x31	; 49
    69c8:	7d 93       	st	X+, r23
    69ca:	70 e3       	ldi	r23, 0x30	; 48
    69cc:	2a 95       	dec	r18
    69ce:	e1 f7       	brne	.-8      	; 0x69c8 <__ftoa_engine+0x192>
    69d0:	11 24       	eor	r1, r1
    69d2:	ef 90       	pop	r14
    69d4:	ff 90       	pop	r15
    69d6:	0f 91       	pop	r16
    69d8:	1f 91       	pop	r17
    69da:	cf 91       	pop	r28
    69dc:	df 91       	pop	r29
    69de:	99 27       	eor	r25, r25
    69e0:	87 fd       	sbrc	r24, 7
    69e2:	90 95       	com	r25
    69e4:	08 95       	ret

000069e6 <strnlen_P>:
    69e6:	fc 01       	movw	r30, r24
    69e8:	05 90       	lpm	r0, Z+
    69ea:	61 50       	subi	r22, 0x01	; 1
    69ec:	70 40       	sbci	r23, 0x00	; 0
    69ee:	01 10       	cpse	r0, r1
    69f0:	d8 f7       	brcc	.-10     	; 0x69e8 <strnlen_P+0x2>
    69f2:	80 95       	com	r24
    69f4:	90 95       	com	r25
    69f6:	8e 0f       	add	r24, r30
    69f8:	9f 1f       	adc	r25, r31
    69fa:	08 95       	ret

000069fc <strnlen>:
    69fc:	fc 01       	movw	r30, r24
    69fe:	61 50       	subi	r22, 0x01	; 1
    6a00:	70 40       	sbci	r23, 0x00	; 0
    6a02:	01 90       	ld	r0, Z+
    6a04:	01 10       	cpse	r0, r1
    6a06:	d8 f7       	brcc	.-10     	; 0x69fe <strnlen+0x2>
    6a08:	80 95       	com	r24
    6a0a:	90 95       	com	r25
    6a0c:	8e 0f       	add	r24, r30
    6a0e:	9f 1f       	adc	r25, r31
    6a10:	08 95       	ret

00006a12 <fputc>:
    6a12:	0f 93       	push	r16
    6a14:	1f 93       	push	r17
    6a16:	cf 93       	push	r28
    6a18:	df 93       	push	r29
    6a1a:	18 2f       	mov	r17, r24
    6a1c:	09 2f       	mov	r16, r25
    6a1e:	eb 01       	movw	r28, r22
    6a20:	8b 81       	ldd	r24, Y+3	; 0x03
    6a22:	81 fd       	sbrc	r24, 1
    6a24:	03 c0       	rjmp	.+6      	; 0x6a2c <fputc+0x1a>
    6a26:	8f ef       	ldi	r24, 0xFF	; 255
    6a28:	9f ef       	ldi	r25, 0xFF	; 255
    6a2a:	20 c0       	rjmp	.+64     	; 0x6a6c <fputc+0x5a>
    6a2c:	82 ff       	sbrs	r24, 2
    6a2e:	10 c0       	rjmp	.+32     	; 0x6a50 <fputc+0x3e>
    6a30:	4e 81       	ldd	r20, Y+6	; 0x06
    6a32:	5f 81       	ldd	r21, Y+7	; 0x07
    6a34:	2c 81       	ldd	r18, Y+4	; 0x04
    6a36:	3d 81       	ldd	r19, Y+5	; 0x05
    6a38:	42 17       	cp	r20, r18
    6a3a:	53 07       	cpc	r21, r19
    6a3c:	7c f4       	brge	.+30     	; 0x6a5c <fputc+0x4a>
    6a3e:	e8 81       	ld	r30, Y
    6a40:	f9 81       	ldd	r31, Y+1	; 0x01
    6a42:	9f 01       	movw	r18, r30
    6a44:	2f 5f       	subi	r18, 0xFF	; 255
    6a46:	3f 4f       	sbci	r19, 0xFF	; 255
    6a48:	39 83       	std	Y+1, r19	; 0x01
    6a4a:	28 83       	st	Y, r18
    6a4c:	10 83       	st	Z, r17
    6a4e:	06 c0       	rjmp	.+12     	; 0x6a5c <fputc+0x4a>
    6a50:	e8 85       	ldd	r30, Y+8	; 0x08
    6a52:	f9 85       	ldd	r31, Y+9	; 0x09
    6a54:	81 2f       	mov	r24, r17
    6a56:	09 95       	icall
    6a58:	89 2b       	or	r24, r25
    6a5a:	29 f7       	brne	.-54     	; 0x6a26 <fputc+0x14>
    6a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    6a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    6a60:	2f 5f       	subi	r18, 0xFF	; 255
    6a62:	3f 4f       	sbci	r19, 0xFF	; 255
    6a64:	3f 83       	std	Y+7, r19	; 0x07
    6a66:	2e 83       	std	Y+6, r18	; 0x06
    6a68:	81 2f       	mov	r24, r17
    6a6a:	90 2f       	mov	r25, r16
    6a6c:	df 91       	pop	r29
    6a6e:	cf 91       	pop	r28
    6a70:	1f 91       	pop	r17
    6a72:	0f 91       	pop	r16
    6a74:	08 95       	ret

00006a76 <printf>:
    6a76:	a0 e0       	ldi	r26, 0x00	; 0
    6a78:	b0 e0       	ldi	r27, 0x00	; 0
    6a7a:	e1 e4       	ldi	r30, 0x41	; 65
    6a7c:	f5 e3       	ldi	r31, 0x35	; 53
    6a7e:	0c 94 4c 32 	jmp	0x6498	; 0x6498 <__prologue_saves__+0x20>
    6a82:	fe 01       	movw	r30, r28
    6a84:	35 96       	adiw	r30, 0x05	; 5
    6a86:	61 91       	ld	r22, Z+
    6a88:	71 91       	ld	r23, Z+
    6a8a:	af 01       	movw	r20, r30
    6a8c:	80 91 a8 04 	lds	r24, 0x04A8
    6a90:	90 91 a9 04 	lds	r25, 0x04A9
    6a94:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <vfprintf>
    6a98:	e2 e0       	ldi	r30, 0x02	; 2
    6a9a:	0c 94 68 32 	jmp	0x64d0	; 0x64d0 <__epilogue_restores__+0x20>

00006a9e <puts>:
    6a9e:	0f 93       	push	r16
    6aa0:	1f 93       	push	r17
    6aa2:	cf 93       	push	r28
    6aa4:	df 93       	push	r29
    6aa6:	e0 91 a8 04 	lds	r30, 0x04A8
    6aaa:	f0 91 a9 04 	lds	r31, 0x04A9
    6aae:	23 81       	ldd	r18, Z+3	; 0x03
    6ab0:	21 ff       	sbrs	r18, 1
    6ab2:	1b c0       	rjmp	.+54     	; 0x6aea <puts+0x4c>
    6ab4:	ec 01       	movw	r28, r24
    6ab6:	00 e0       	ldi	r16, 0x00	; 0
    6ab8:	10 e0       	ldi	r17, 0x00	; 0
    6aba:	89 91       	ld	r24, Y+
    6abc:	60 91 a8 04 	lds	r22, 0x04A8
    6ac0:	70 91 a9 04 	lds	r23, 0x04A9
    6ac4:	db 01       	movw	r26, r22
    6ac6:	18 96       	adiw	r26, 0x08	; 8
    6ac8:	ed 91       	ld	r30, X+
    6aca:	fc 91       	ld	r31, X
    6acc:	19 97       	sbiw	r26, 0x09	; 9
    6ace:	88 23       	and	r24, r24
    6ad0:	31 f0       	breq	.+12     	; 0x6ade <puts+0x40>
    6ad2:	09 95       	icall
    6ad4:	89 2b       	or	r24, r25
    6ad6:	89 f3       	breq	.-30     	; 0x6aba <puts+0x1c>
    6ad8:	0f ef       	ldi	r16, 0xFF	; 255
    6ada:	1f ef       	ldi	r17, 0xFF	; 255
    6adc:	ee cf       	rjmp	.-36     	; 0x6aba <puts+0x1c>
    6ade:	8a e0       	ldi	r24, 0x0A	; 10
    6ae0:	09 95       	icall
    6ae2:	89 2b       	or	r24, r25
    6ae4:	11 f4       	brne	.+4      	; 0x6aea <puts+0x4c>
    6ae6:	c8 01       	movw	r24, r16
    6ae8:	02 c0       	rjmp	.+4      	; 0x6aee <puts+0x50>
    6aea:	8f ef       	ldi	r24, 0xFF	; 255
    6aec:	9f ef       	ldi	r25, 0xFF	; 255
    6aee:	df 91       	pop	r29
    6af0:	cf 91       	pop	r28
    6af2:	1f 91       	pop	r17
    6af4:	0f 91       	pop	r16
    6af6:	08 95       	ret

00006af8 <__ultoa_invert>:
    6af8:	fa 01       	movw	r30, r20
    6afa:	aa 27       	eor	r26, r26
    6afc:	28 30       	cpi	r18, 0x08	; 8
    6afe:	51 f1       	breq	.+84     	; 0x6b54 <__ultoa_invert+0x5c>
    6b00:	20 31       	cpi	r18, 0x10	; 16
    6b02:	81 f1       	breq	.+96     	; 0x6b64 <__ultoa_invert+0x6c>
    6b04:	e8 94       	clt
    6b06:	6f 93       	push	r22
    6b08:	6e 7f       	andi	r22, 0xFE	; 254
    6b0a:	6e 5f       	subi	r22, 0xFE	; 254
    6b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    6b10:	9f 4f       	sbci	r25, 0xFF	; 255
    6b12:	af 4f       	sbci	r26, 0xFF	; 255
    6b14:	b1 e0       	ldi	r27, 0x01	; 1
    6b16:	3e d0       	rcall	.+124    	; 0x6b94 <__ultoa_invert+0x9c>
    6b18:	b4 e0       	ldi	r27, 0x04	; 4
    6b1a:	3c d0       	rcall	.+120    	; 0x6b94 <__ultoa_invert+0x9c>
    6b1c:	67 0f       	add	r22, r23
    6b1e:	78 1f       	adc	r23, r24
    6b20:	89 1f       	adc	r24, r25
    6b22:	9a 1f       	adc	r25, r26
    6b24:	a1 1d       	adc	r26, r1
    6b26:	68 0f       	add	r22, r24
    6b28:	79 1f       	adc	r23, r25
    6b2a:	8a 1f       	adc	r24, r26
    6b2c:	91 1d       	adc	r25, r1
    6b2e:	a1 1d       	adc	r26, r1
    6b30:	6a 0f       	add	r22, r26
    6b32:	71 1d       	adc	r23, r1
    6b34:	81 1d       	adc	r24, r1
    6b36:	91 1d       	adc	r25, r1
    6b38:	a1 1d       	adc	r26, r1
    6b3a:	20 d0       	rcall	.+64     	; 0x6b7c <__ultoa_invert+0x84>
    6b3c:	09 f4       	brne	.+2      	; 0x6b40 <__ultoa_invert+0x48>
    6b3e:	68 94       	set
    6b40:	3f 91       	pop	r19
    6b42:	2a e0       	ldi	r18, 0x0A	; 10
    6b44:	26 9f       	mul	r18, r22
    6b46:	11 24       	eor	r1, r1
    6b48:	30 19       	sub	r19, r0
    6b4a:	30 5d       	subi	r19, 0xD0	; 208
    6b4c:	31 93       	st	Z+, r19
    6b4e:	de f6       	brtc	.-74     	; 0x6b06 <__ultoa_invert+0xe>
    6b50:	cf 01       	movw	r24, r30
    6b52:	08 95       	ret
    6b54:	46 2f       	mov	r20, r22
    6b56:	47 70       	andi	r20, 0x07	; 7
    6b58:	40 5d       	subi	r20, 0xD0	; 208
    6b5a:	41 93       	st	Z+, r20
    6b5c:	b3 e0       	ldi	r27, 0x03	; 3
    6b5e:	0f d0       	rcall	.+30     	; 0x6b7e <__ultoa_invert+0x86>
    6b60:	c9 f7       	brne	.-14     	; 0x6b54 <__ultoa_invert+0x5c>
    6b62:	f6 cf       	rjmp	.-20     	; 0x6b50 <__ultoa_invert+0x58>
    6b64:	46 2f       	mov	r20, r22
    6b66:	4f 70       	andi	r20, 0x0F	; 15
    6b68:	40 5d       	subi	r20, 0xD0	; 208
    6b6a:	4a 33       	cpi	r20, 0x3A	; 58
    6b6c:	18 f0       	brcs	.+6      	; 0x6b74 <__ultoa_invert+0x7c>
    6b6e:	49 5d       	subi	r20, 0xD9	; 217
    6b70:	31 fd       	sbrc	r19, 1
    6b72:	40 52       	subi	r20, 0x20	; 32
    6b74:	41 93       	st	Z+, r20
    6b76:	02 d0       	rcall	.+4      	; 0x6b7c <__ultoa_invert+0x84>
    6b78:	a9 f7       	brne	.-22     	; 0x6b64 <__ultoa_invert+0x6c>
    6b7a:	ea cf       	rjmp	.-44     	; 0x6b50 <__ultoa_invert+0x58>
    6b7c:	b4 e0       	ldi	r27, 0x04	; 4
    6b7e:	a6 95       	lsr	r26
    6b80:	97 95       	ror	r25
    6b82:	87 95       	ror	r24
    6b84:	77 95       	ror	r23
    6b86:	67 95       	ror	r22
    6b88:	ba 95       	dec	r27
    6b8a:	c9 f7       	brne	.-14     	; 0x6b7e <__ultoa_invert+0x86>
    6b8c:	00 97       	sbiw	r24, 0x00	; 0
    6b8e:	61 05       	cpc	r22, r1
    6b90:	71 05       	cpc	r23, r1
    6b92:	08 95       	ret
    6b94:	9b 01       	movw	r18, r22
    6b96:	ac 01       	movw	r20, r24
    6b98:	0a 2e       	mov	r0, r26
    6b9a:	06 94       	lsr	r0
    6b9c:	57 95       	ror	r21
    6b9e:	47 95       	ror	r20
    6ba0:	37 95       	ror	r19
    6ba2:	27 95       	ror	r18
    6ba4:	ba 95       	dec	r27
    6ba6:	c9 f7       	brne	.-14     	; 0x6b9a <__ultoa_invert+0xa2>
    6ba8:	62 0f       	add	r22, r18
    6baa:	73 1f       	adc	r23, r19
    6bac:	84 1f       	adc	r24, r20
    6bae:	95 1f       	adc	r25, r21
    6bb0:	a0 1d       	adc	r26, r0
    6bb2:	08 95       	ret

00006bb4 <__divmodsi4>:
    6bb4:	05 2e       	mov	r0, r21
    6bb6:	97 fb       	bst	r25, 7
    6bb8:	1e f4       	brtc	.+6      	; 0x6bc0 <__divmodsi4+0xc>
    6bba:	00 94       	com	r0
    6bbc:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__negsi2>
    6bc0:	57 fd       	sbrc	r21, 7
    6bc2:	07 d0       	rcall	.+14     	; 0x6bd2 <__divmodsi4_neg2>
    6bc4:	0e 94 0f 32 	call	0x641e	; 0x641e <__udivmodsi4>
    6bc8:	07 fc       	sbrc	r0, 7
    6bca:	03 d0       	rcall	.+6      	; 0x6bd2 <__divmodsi4_neg2>
    6bcc:	4e f4       	brtc	.+18     	; 0x6be0 <__divmodsi4_exit>
    6bce:	0c 94 f1 35 	jmp	0x6be2	; 0x6be2 <__negsi2>

00006bd2 <__divmodsi4_neg2>:
    6bd2:	50 95       	com	r21
    6bd4:	40 95       	com	r20
    6bd6:	30 95       	com	r19
    6bd8:	21 95       	neg	r18
    6bda:	3f 4f       	sbci	r19, 0xFF	; 255
    6bdc:	4f 4f       	sbci	r20, 0xFF	; 255
    6bde:	5f 4f       	sbci	r21, 0xFF	; 255

00006be0 <__divmodsi4_exit>:
    6be0:	08 95       	ret

00006be2 <__negsi2>:
    6be2:	90 95       	com	r25
    6be4:	80 95       	com	r24
    6be6:	70 95       	com	r23
    6be8:	61 95       	neg	r22
    6bea:	7f 4f       	sbci	r23, 0xFF	; 255
    6bec:	8f 4f       	sbci	r24, 0xFF	; 255
    6bee:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf0:	08 95       	ret

00006bf2 <__mulshisi3>:
    6bf2:	b7 ff       	sbrs	r27, 7
    6bf4:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__muluhisi3>

00006bf8 <__mulohisi3>:
    6bf8:	0e 94 31 32 	call	0x6462	; 0x6462 <__muluhisi3>
    6bfc:	82 1b       	sub	r24, r18
    6bfe:	93 0b       	sbc	r25, r19
    6c00:	08 95       	ret

00006c02 <_exit>:
    6c02:	f8 94       	cli

00006c04 <__stop_program>:
    6c04:	ff cf       	rjmp	.-2      	; 0x6c04 <__stop_program>
